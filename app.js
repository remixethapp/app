(window["webpackJsonp"] = window["webpackJsonp"] || []).push([
    [0], {

        /***/ 1000:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Ethdebugger = void 0;

            const tslib_1 = __webpack_require__(494);

            const storageViewer_1 = __webpack_require__(643);

            const storageResolver_1 = __webpack_require__(767);

            const traceManager_1 = __webpack_require__(1732);

            const codeManager_1 = __webpack_require__(1736);

            const traceHelper_1 = __webpack_require__(553);

            const eventManager_1 = __webpack_require__(562);

            const solidity_decoder_1 = __webpack_require__(1003);

            /**
             * Ethdebugger is a wrapper around a few classes that helps debugging a transaction
             *
             * - Web3Providers - define which environment (web3) the transaction will be retrieved from
             * - TraceManager - Load / Analyze the trace and retrieve details of specific test
             * - CodeManager - Retrieve loaded byte code and help to resolve AST item from vmtrace index
             * - SolidityProxy - Basically used to extract state variable from AST
             * - Breakpoint Manager - Used to add / remove / jumpto breakpoint
             * - InternalCallTree - Used to retrieved local variables
             * - StorageResolver - Help resolving the storage accross different steps
             *
             * @param {Map} opts  -  { function compilationResult } //
             */


            class Ethdebugger {
                constructor(opts) {
                    this.compilationResult = opts.compilationResult || function (contractAddress) {
                        return null;
                    };

                    this.web3 = opts.web3;
                    this.opts = opts;
                    this.event = new eventManager_1.EventManager();
                    this.traceManager = new traceManager_1.TraceManager({
                        web3: this.web3
                    });
                    this.codeManager = new codeManager_1.CodeManager(this.traceManager);
                    this.solidityProxy = new solidity_decoder_1.SolidityProxy({
                        getCurrentCalledAddressAt: this.traceManager.getCurrentCalledAddressAt.bind(this.traceManager),
                        getCode: this.codeManager.getCode.bind(this.codeManager)
                    });
                    this.storageResolver = null;
                    const includeLocalVariables = true;
                    this.callTree = new solidity_decoder_1.InternalCallTree(this.event, this.traceManager, this.solidityProxy, this.codeManager, Object.assign(Object.assign({}, opts), {
                        includeLocalVariables
                    }));
                }

                setManagers() {
                    this.traceManager = new traceManager_1.TraceManager({
                        web3: this.web3
                    });
                    this.codeManager = new codeManager_1.CodeManager(this.traceManager);
                    this.solidityProxy = new solidity_decoder_1.SolidityProxy({
                        getCurrentCalledAddressAt: this.traceManager.getCurrentCalledAddressAt.bind(this.traceManager),
                        getCode: this.codeManager.getCode.bind(this.codeManager)
                    });
                    this.storageResolver = null;
                    const includeLocalVariables = true;
                    this.callTree = new solidity_decoder_1.InternalCallTree(this.event, this.traceManager, this.solidityProxy, this.codeManager, Object.assign(Object.assign({}, this.opts), {
                        includeLocalVariables
                    }));
                    this.event.trigger('managersChanged');
                }

                resolveStep(index) {
                    this.codeManager.resolveStep(index, this.tx);
                }

                setCompilationResult(compilationResult) {
                    this.solidityProxy.reset(compilationResult && compilationResult.data || {});
                }

                sourceLocationFromVMTraceIndex(address, stepIndex) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        return this.callTree.sourceLocationTracker.getSourceLocationFromVMTraceIndex(address, stepIndex, this.solidityProxy.contracts);
                    });
                }

                getValidSourceLocationFromVMTraceIndex(address, stepIndex) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        return this.callTree.sourceLocationTracker.getValidSourceLocationFromVMTraceIndex(address, stepIndex, this.solidityProxy.contracts);
                    });
                }

                sourceLocationFromInstructionIndex(address, instIndex, callback) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        return this.callTree.sourceLocationTracker.getSourceLocationFromInstructionIndex(address, instIndex, this.solidityProxy.contracts);
                    });
                }

                /* breakpoint */


                setBreakpointManager(breakpointManager) {
                    this.breakpointManager = breakpointManager;
                }

                /* decode locals */


                extractLocalsAt(step) {
                    return this.callTree.findScope(step);
                }

                decodeLocalsAt(step, sourceLocation, callback) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            const stack = this.traceManager.getStackAt(step);
                            const memory = this.traceManager.getMemoryAt(step);
                            const address = this.traceManager.getCurrentCalledAddressAt(step);
                            const calldata = this.traceManager.getCallDataAt(step);

                            try {
                                const storageViewer = new storageViewer_1.StorageViewer({
                                    stepIndex: step,
                                    tx: this.tx,
                                    address: address
                                }, this.storageResolver, this.traceManager);
                                const locals = yield solidity_decoder_1.localDecoder.solidityLocals(step, this.callTree, stack, memory, storageViewer, calldata, sourceLocation, null);

                                if (locals['error']) {
                                    return callback(locals['error']);
                                }

                                return callback(null, locals);
                            } catch (e) {
                                callback(e.message);
                            }
                        } catch (error) {
                            callback(error);
                        }
                    });
                }

                /* decode state */


                extractStateAt(step) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        return this.solidityProxy.extractStateVariablesAt(step);
                    });
                }

                decodeStateAt(step, stateVars, callback) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            const address = this.traceManager.getCurrentCalledAddressAt(step);
                            const storageViewer = new storageViewer_1.StorageViewer({
                                stepIndex: step,
                                tx: this.tx,
                                address: address
                            }, this.storageResolver, this.traceManager);
                            const result = yield solidity_decoder_1.stateDecoder.decodeState(stateVars, storageViewer);
                            return result;
                        } catch (error) {
                            callback(error);
                        }
                    });
                }

                storageViewAt(step, address) {
                    return new storageViewer_1.StorageViewer({
                        stepIndex: step,
                        tx: this.tx,
                        address: address
                    }, this.storageResolver, this.traceManager);
                }

                updateWeb3(web3) {
                    this.web3 = web3;
                    this.setManagers();
                }

                unLoad() {
                    this.traceManager.init();
                    this.codeManager.clear();
                    this.event.trigger('traceUnloaded');
                }

                debug(tx) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (this.traceManager.isLoading) {
                            return;
                        }

                        tx.to = tx.to || (0, traceHelper_1.contractCreationToken)('0');
                        this.tx = tx;
                        yield this.traceManager.resolveTrace(tx);
                        this.setCompilationResult(yield this.compilationResult(tx.to));
                        this.event.trigger('newTraceLoaded', [this.traceManager.trace]);

                        if (this.breakpointManager && this.breakpointManager.hasBreakpoint()) {
                            this.breakpointManager.jumpNextBreakpoint(false);
                        }

                        this.storageResolver = new storageResolver_1.StorageResolver({
                            web3: this.traceManager.web3
                        });
                    });
                }

            }

            exports.Ethdebugger = Ethdebugger;

            /***/
        }),

        /***/ 1001:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.decodeMappingsKeys = void 0;

            const tslib_1 = __webpack_require__(494);

            const util_1 = __webpack_require__(544);

            /**
             * extract the mappings location from the storage
             * like { "<mapping_slot>" : { "<mapping-key1>": preimageOf1 }, { "<mapping-key2>": preimageOf2 }, ... }
             *
             * @param {Object} storage  - storage given by storage Viewer (basically a mapping hashedkey : {key, value})
             * @param {Array} corrections - used in case the calculated sha3 has been modifyed before SSTORE (notably used for struct in mapping).
             * @param {Function} callback  - calback
             * @return {Map} - solidity mapping location (e.g { "<mapping_slot>" : { "<mapping-key1>": preimageOf1 }, { "<mapping-key2>": preimageOf2 }, ... })
             */


            function decodeMappingsKeys(web3, storage, corrections) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    const ret = {};
                    if (!corrections.length) {
                        corrections.push({
                            offset: 0,
                            slot: 0
                        });
                    }

                    for (const hashedLoc in storage) {
                        var preimage;

                        try {
                            const key = storage[hashedLoc].key;

                            for (const k in corrections) {
                                const corrected = (0, util_1.sub)(key, corrections[k].slot).toString(16);
                                preimage = yield getPreimage(web3, '0x' + corrected);
                                if (preimage) {
                                    break;
                                }
                            }
                        } catch (e) {
                        } // eslint-disable-line no-empty


                        if (preimage) {
                            // got preimage!
                            // get mapping position (i.e. storage slot), its the last 32 bytes
                            const slotByteOffset = preimage.length - 64;
                            const mappingSlot = preimage.substr(slotByteOffset);
                            const mappingKey = preimage.substr(0, slotByteOffset);

                            if (!ret[mappingSlot]) {
                                ret[mappingSlot] = {};
                            }

                            ret[mappingSlot][mappingKey] = preimage;
                        }
                    }

                    return ret;
                });
            }

            exports.decodeMappingsKeys = decodeMappingsKeys;

            /**
             * Uses web3 to return preimage of a key
             *
             * @param {String} key  - key to retrieve the preimage of
             * @return {String} - preimage of the given key
             */

            function getPreimage(web3, key) {
                return new Promise((resolve, reject) => {
                    web3.debug.preimage(key.indexOf('0x') === 0 ? key : '0x' + key, (error, preimage) => {
                        if (error) {
                            return resolve(null);
                        }

                        resolve(preimage);
                    });
                });
            }

            /***/
        }),

        /***/ 1002:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.AstWalker = exports.isYulAstNode = exports.isAstNode = void 0;

            const events_1 = __webpack_require__(510);

            const isObject = function (obj) {
                return obj != null && obj.constructor.name === 'Object';
            };

            function isAstNode(node) {
                return isObject(node) && 'id' in node && 'nodeType' in node && 'src' in node;
            }

            exports.isAstNode = isAstNode;

            function isYulAstNode(node) {
                return isObject(node) && 'nodeType' in node && 'src' in node;
            }

            exports.isYulAstNode = isYulAstNode;

            /**
             * Crawl the given AST through the function walk(ast, callback)
             */

            /**
             * visit all the AST nodes
             *
             * @param {Object} ast  - AST node
             * @return EventEmitter
             * event('node', <Node Type | false>) will be fired for every node of type <Node Type>.
             * event('node', "*") will be fired for all other nodes.
             * in each case, if the event emits false it does not descend into children.
             * If no event for the current type, children are visited.
             */
                // eslint-disable-next-line no-redeclare

            class AstWalker extends events_1.EventEmitter {
                manageCallback(node, callback // eslint-disable-line @typescript-eslint/ban-types
                ) {
                    // FIXME: we shouldn't be doing this callback determination type on each AST node,
                    // since the callback function is set once per walk.
                    // Better would be to store the right one as a variable and
                    // return that.
                    if (node) {
                        if (node.name in callback) {
                            return callback[node.name](node);
                        } else {
                            return callback['*'](node);
                        }
                    }

                    if (node) {
                        if (node.nodeType in callback) {
                            /* istanbul ignore next */
                            return callback[node.nodeType](node);
                        } else {
                            /* istanbul ignore next */
                            return callback['*'](node);
                        }
                    }
                }

                normalizeNodes(nodes) {
                    // Remove null, undefined and empty elements if any
                    nodes = nodes.filter(e => e); // If any element in nodes is array, extract its members

                    const objNodes = [];
                    nodes.forEach(x => {
                        if (Array.isArray(x)) {
                            objNodes.push(...x);
                        } else {
                            objNodes.push(x);
                        }
                    }); // Filter duplicate nodes using id field

                    const normalizedNodes = [];
                    objNodes.forEach(element => {
                        const firstIndex = normalizedNodes.findIndex(e => e.id === element.id);
                        if (firstIndex === -1) {
                            normalizedNodes.push(element);
                        }
                    });
                    return normalizedNodes;
                }

                getASTNodeChildren(ast) {
                    var _a;

                    let nodes = ast.nodes || // for ContractDefinition
                        ast.body || // for FunctionDefinition, ModifierDefinition, WhileStatement, DoWhileStatement, ForStatement
                        ast.statements || // for Block, YulBlock
                        ast.members || // for StructDefinition, EnumDefinition
                        ast.overrides || // for OverrideSpecifier
                        ast.parameters || // for ParameterList, EventDefinition
                        ast.declarations || // for VariableDeclarationStatement
                        ast.expression || // for Return, ExpressionStatement, FunctionCall, FunctionCallOptions, MemberAccess
                        ast.components || // for TupleExpression
                        ast.subExpression || // for UnaryOperation
                        ast.eventCall || // for EmitStatement
                        []; // If 'nodes' is not an array, convert it into one, for example: ast.body

                    if (nodes && !Array.isArray(nodes)) {
                        const tempArr = [];
                        tempArr.push(nodes);
                        nodes = tempArr;
                    } // To break object referencing


                    nodes = [...nodes];

                    if (ast.nodes && ((_a = ast.baseContracts) === null || _a === void 0 ? void 0 : _a.length)) {
                        // for ContractDefinition
                        nodes.push(...ast.baseContracts);
                    } else if (ast.body && ast.overrides && ast.parameters && ast.returnParameters && ast.modifiers) {
                        // for FunctionDefinition
                        nodes.push(ast.overrides);
                        nodes.push(ast.parameters);
                        nodes.push(ast.returnParameters);
                        nodes.push(ast.modifiers);
                    } else if (ast.typeName) {
                        // for VariableDeclaration, NewExpression, ElementaryTypeNameExpression
                        nodes.push(ast.typeName);
                    } else if (ast.body && ast.overrides && ast.parameters) {
                        // for ModifierDefinition
                        nodes.push(ast.overrides);
                        nodes.push(ast.parameters);
                    } else if (ast.modifierName && ast.arguments) {
                        // for ModifierInvocation
                        nodes.push(ast.modifierName);
                        nodes.push(ast.arguments);
                    } else if (ast.parameterTypes && ast.returnParameterTypes) {
                        // for ModifierInvocation
                        nodes.push(ast.parameterTypes);
                        nodes.push(ast.returnParameterTypes);
                    } else if (ast.keyType && ast.valueType) {
                        // for Mapping
                        nodes.push(ast.keyType);
                        nodes.push(ast.valueType);
                    } else if (ast.baseType && ast.length) {
                        // for ArrayTypeName
                        nodes.push(ast.baseType);
                        nodes.push(ast.length);
                    } else if (ast.AST) {
                        // for InlineAssembly
                        nodes.push(ast.AST);
                    } else if (ast.condition && (ast.trueBody || ast.falseBody || ast.body)) {
                        // for IfStatement, WhileStatement, DoWhileStatement
                        nodes.push(ast.condition);
                        nodes.push(ast.trueBody);
                        nodes.push(ast.falseBody);
                    } else if (ast.parameters && ast.block) {
                        // for TryCatchClause
                        nodes.push(ast.block);
                    } else if (ast.externalCall && ast.clauses) {
                        // for TryStatement
                        nodes.push(ast.externalCall);
                        nodes.push(ast.clauses);
                    } else if (ast.body && ast.condition && ast.initializationExpression && ast.loopExpression) {
                        // for ForStatement
                        nodes.push(ast.condition);
                        nodes.push(ast.initializationExpression);
                        nodes.push(ast.loopExpression);
                    } else if (ast.declarations && ast.initialValue) {
                        // for VariableDeclarationStatement
                        nodes.push(ast.initialValue);
                    } else if (ast.condition && (ast.trueExpression || ast.falseExpression)) {
                        // for Conditional
                        nodes.push(ast.condition);
                        nodes.push(ast.trueExpression);
                        nodes.push(ast.falseExpression);
                    } else if (ast.leftHandSide && ast.rightHandSide) {
                        // for Assignment
                        nodes.push(ast.leftHandSide);
                        nodes.push(ast.rightHandSide);
                    } else if (ast.leftExpression && ast.rightExpression) {
                        // for BinaryOperation
                        nodes.push(ast.leftExpression);
                        nodes.push(ast.rightExpression);
                    } else if (ast.expression && (ast.arguments || ast.options)) {
                        // for FunctionCall, FunctionCallOptions
                        nodes.push(ast.arguments ? ast.arguments : ast.options);
                    } else if (ast.baseExpression && (ast.indexExpression || ast.startExpression && ast.endExpression)) {
                        // for IndexAccess, IndexRangeAccess
                        nodes.push(ast.baseExpression);
                        if (ast.indexExpression) {
                            nodes.push(ast.indexExpression);
                        } else {
                            nodes.push(ast.startExpression);
                            nodes.push(ast.endExpression);
                        }
                    }

                    return this.normalizeNodes(nodes);
                } // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types


                walk(ast, callback) {
                    if (ast) {
                        const children = this.getASTNodeChildren(ast);

                        if (callback) {
                            if (callback instanceof Function) {
                                callback = Object({
                                    '*': callback
                                });
                            }

                            if (!('*' in callback)) {
                                callback['*'] = function () {
                                    return true;
                                };
                            }

                            if (this.manageCallback(ast, callback) && (children === null || children === void 0 ? void 0 : children.length)) {
                                for (const k in children) {
                                    const child = children[k];
                                    this.walk(child, callback);
                                }
                            }
                        } else {
                            if (children === null || children === void 0 ? void 0 : children.length) {
                                for (const k in children) {
                                    const child = children[k];
                                    this.emit('node', child);
                                    this.walk(child);
                                }
                            }
                        }
                    }
                } // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types


                walkFullInternal(ast, callback) {
                    if (isAstNode(ast) || isYulAstNode(ast)) {
                        // console.log(`XXX id ${ast.id}, nodeType: ${ast.nodeType}, src: ${ast.src}`);
                        callback(ast);

                        for (const k of Object.keys(ast)) {
                            // Possible optimization:
                            // if (k in ['id', 'src', 'nodeType']) continue;
                            const astItem = ast[k];

                            if (Array.isArray(astItem)) {
                                for (const child of astItem) {
                                    if (child) {
                                        this.walkFullInternal(child, callback);
                                    }
                                }
                            } else {
                                this.walkFullInternal(astItem, callback);
                            }
                        }
                    }
                } // Normalizes parameter callback and calls walkFullInternal
                // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


                walkFull(ast, callback) {
                    if (isAstNode(ast) || isYulAstNode(ast)) {
                        return this.walkFullInternal(ast, callback);
                    }
                } // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types


                walkAstList(sourcesList, cb) {
                    if (cb) {
                        if (sourcesList.ast) {
                            this.walk(sourcesList.ast, cb);
                        }
                    } else {
                        if (sourcesList.ast) {
                            this.walk(sourcesList.ast);
                        }
                    }
                }

            }

            exports.AstWalker = AstWalker;

            /***/
        }),

        /***/ 1003:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.InternalCallTree = exports.localDecoder = exports.stateDecoder = exports.SolidityProxy = void 0;

            const tslib_1 = __webpack_require__(494);

            const solidityProxy_1 = __webpack_require__(1746);

            Object.defineProperty(exports, "SolidityProxy", {
                enumerable: true,
                get: function () {
                    return solidityProxy_1.SolidityProxy;
                }
            });
            const stateDecoder = (0, tslib_1.__importStar)(__webpack_require__(771));
            exports.stateDecoder = stateDecoder;
            const localDecoder = (0, tslib_1.__importStar)(__webpack_require__(1008));
            exports.localDecoder = localDecoder;

            const internalCallTree_1 = __webpack_require__(1756);

            Object.defineProperty(exports, "InternalCallTree", {
                enumerable: true,
                get: function () {
                    return internalCallTree_1.InternalCallTree;
                }
            });

            /***/
        }),

        /***/ 1004:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extractStatesDefinitions = exports.extractStateDefinitions = exports.getLinearizedBaseContracts = exports.extractOrphanDefinitions = exports.extractContractDefinitions = void 0;

            const remix_astwalker_1 = __webpack_require__(600);

            /**
             * return all contract definitions of the given @astList
             *
             * @param {Object} sourcesList - sources list (containing root AST node)
             * @return {Object} - returns a mapping from AST node ids to AST nodes for the contracts
             */


            function extractContractDefinitions(sourcesList) {
                const ret = {
                    contractsById: {},
                    contractsByName: {},
                    sourcesByContract: {}
                };
                const walker = new remix_astwalker_1.AstWalker();

                for (const k in sourcesList) {
                    walker.walkFull(sourcesList[k].ast, node => {
                        if (node.nodeType === 'ContractDefinition') {
                            ret.contractsById[node.id] = node;
                            ret.sourcesByContract[node.id] = k;
                            ret.contractsByName[k + ':' + node.name] = node;
                        }
                    });
                }

                return ret;
            }

            exports.extractContractDefinitions = extractContractDefinitions;

            /**
             * return nodes from an ast @arg sourcesList that are declared outside of a ContractDefinition @astList
             *
             * @param {Object} sourcesList - sources list (containing root AST node)
             * @return {Object} - returns a list of node
             */

            function extractOrphanDefinitions(sourcesList) {
                const ret = [];

                for (const k in sourcesList) {
                    const ast = sourcesList[k].ast;

                    if (ast.nodes && ast.nodes.length) {
                        for (const node of ast.nodes) {
                            if (node.nodeType !== 'ContractDefinition') {
                                ret.push(node);
                            }
                        }
                    }
                }

                return ret;
            }

            exports.extractOrphanDefinitions = extractOrphanDefinitions;

            /**
             * returns the linearized base contracts of the contract @arg id
             *
             * @param {Int} id - contract id to resolve
             * @param {Map} contracts  - all contracts defined in the current context
             * @return {Array} - array of base contracts in derived to base order as AST nodes.
             */

            function getLinearizedBaseContracts(id, contractsById) {
                return contractsById[id].linearizedBaseContracts.map(function (id) {
                    return contractsById[id];
                });
            }

            exports.getLinearizedBaseContracts = getLinearizedBaseContracts;

            /**
             * return state var and type definition of the given contract
             *
             * @param {String} contractName - contract for which state var should be resolved
             * @param {Object} sourcesList - sources list (containing root AST node)
             * @param {Object} [contracts] - map of contract definitions (contains contractsById, contractsByName)
             * @return {Object} - return an object containing: stateItems - list of all the children node of the @arg contractName
             *                                                 stateVariables - list of all the variable declaration of the @arg contractName
             */

            function extractStateDefinitions(contractName, sourcesList, contracts) {
                if (!contracts) {
                    contracts = extractContractDefinitions(sourcesList);
                }

                const node = contracts.contractsByName[contractName];

                if (!node) {
                    return null;
                }

                const stateItems = extractOrphanDefinitions(sourcesList);
                const stateVar = [];
                const baseContracts = getLinearizedBaseContracts(node.id, contracts.contractsById);
                baseContracts.reverse();

                for (const k in baseContracts) {
                    const ctr = baseContracts[k];

                    for (const i in ctr.nodes) {
                        const item = ctr.nodes[i];
                        stateItems.push(item);

                        if (item.nodeType === 'VariableDeclaration') {
                            stateVar.push(item);
                        }
                    }
                }

                return {
                    stateDefinitions: stateItems,
                    stateVariables: stateVar
                };
            }

            exports.extractStateDefinitions = extractStateDefinitions;

            /**
             * return state var and type definition of all the contracts from the given @args sourcesList
             *
             * @param {Object} sourcesList - sources list (containing root AST node)
             * @param {Object} [contracts] - map of contract definitions (contains contractsById, contractsByName)
             * @return {Object} - returns a mapping between contract name and contract state
             */

            function extractStatesDefinitions(sourcesList, contracts) {
                if (!contracts) {
                    contracts = extractContractDefinitions(sourcesList);
                }

                const ret = {};

                for (const contract in contracts.contractsById) {
                    const name = contracts.contractsById[contract].name;
                    const source = contracts.sourcesByContract[contract];
                    const fullName = source + ':' + name;
                    const state = extractStateDefinitions(fullName, sourcesList, contracts);
                    ret[fullName] = state;
                    ret[name] = state; // solc < 0.4.9
                }

                return ret;
            }

            exports.extractStatesDefinitions = extractStatesDefinitions;

            /***/
        }),

        /***/ 1005:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Struct = exports.Enum = exports.Array = exports.String = exports.Int = exports.FixedByteArray = exports.DynamicByteArray = exports.Bool = exports.Address = exports.Uint = exports.computeOffsets = exports.parseType = void 0;

            const Address_1 = __webpack_require__(1747);

            const ArrayType_1 = __webpack_require__(1748);

            const Bool_1 = __webpack_require__(1749);

            const DynamicByteArray_1 = __webpack_require__(1006);

            const FixedByteArray_1 = __webpack_require__(1750);

            const Enum_1 = __webpack_require__(1751);

            const StringType_1 = __webpack_require__(1752);

            const Struct_1 = __webpack_require__(1753);

            const Int_1 = __webpack_require__(1754);

            const Uint_1 = __webpack_require__(1755);

            const Mapping_1 = __webpack_require__(1007);

            const util_1 = __webpack_require__(544);

            /**
             * mapping decode the given @arg type
             *
             * @param {String} type - type given by the AST
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */


            function mapping(type, stateDefinitions, contractName) {
                const match = type.match(/mapping\((.*?)=>(.*)\)$/);
                const keyTypeName = match[1].trim();
                const valueTypeName = match[2].trim();
                const keyType = parseType(keyTypeName, stateDefinitions, contractName, 'storage');
                const valueType = parseType(valueTypeName, stateDefinitions, contractName, 'storage');
                var underlyingTypes = {
                    keyType: keyType,
                    valueType: valueType
                };
                return new Mapping_1.Mapping(underlyingTypes, 'location', (0, util_1.removeLocation)(type));
            }

            /**
             * Uint decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g uint256, uint32)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */


            function uint(type) {
                type = type === 'uint' ? 'uint256' : type;
                const storageBytes = parseInt(type.replace('uint', '')) / 8;
                return new Uint_1.Uint(storageBytes);
            }

            exports.Uint = uint;

            /**
             * Int decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g int256, int32)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function int(type) {
                type = type === 'int' ? 'int256' : type;
                const storageBytes = parseInt(type.replace('int', '')) / 8;
                return new Int_1.Int(storageBytes);
            }

            exports.Int = int;

            /**
             * Address decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g address)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function address(type) {
                return new Address_1.Address();
            }

            exports.Address = address;

            /**
             * Bool decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g bool)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function bool(type) {
                return new Bool_1.Bool();
            }

            exports.Bool = bool;

            /**
             * DynamicByteArray decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g bytes storage ref)
             * @param {null} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {null} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function dynamicByteArray(type, stateDefinitions, contractName, location) {
                if (!location) {
                    location = (0, util_1.extractLocation)(type);
                }

                if (location) {
                    return new DynamicByteArray_1.DynamicByteArray(location);
                } else {
                    return null;
                }
            }

            exports.DynamicByteArray = dynamicByteArray;

            /**
             * FixedByteArray decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g bytes16)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function fixedByteArray(type) {
                const storageBytes = parseInt(type.replace('bytes', ''));
                return new FixedByteArray_1.FixedByteArray(storageBytes);
            }

            exports.FixedByteArray = fixedByteArray;

            /**
             * StringType decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g string storage ref)
             * @param {null} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {null} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName}
             */

            function stringType(type, stateDefinitions, contractName, location) {
                if (!location) {
                    location = (0, util_1.extractLocation)(type);
                }

                if (location) {
                    return new StringType_1.StringType(location);
                } else {
                    return null;
                }
            }

            exports.String = stringType;

            /**
             * ArrayType decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g int256[] storage ref, int256[] storage ref[] storage ref)
             * @param {Object} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName, arraySize, subArray}
             */

            function array(type, stateDefinitions, contractName, location) {
                const match = type.match(/(.*)\[(.*?)\]( storage ref| storage pointer| memory| calldata)?$/);

                if (!match) {
                    console.log('unable to parse type ' + type);
                    return null;
                }

                if (!location) {
                    location = match[3].trim();
                }

                const arraySize = match[2] === '' ? 'dynamic' : parseInt(match[2]);
                const underlyingType = parseType(match[1], stateDefinitions, contractName, location);

                if (underlyingType === null) {
                    console.log('unable to parse type ' + type);
                    return null;
                }

                return new ArrayType_1.ArrayType(underlyingType, arraySize, location);
            }

            exports.Array = array;

            /**
             * Enum decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g enum enumDef)
             * @param {Object} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName, enum}
             */

            function enumType(type, stateDefinitions, contractName) {
                const match = type.match(/enum (.*)/);
                const enumDef = getEnum(match[1], stateDefinitions, contractName);

                if (enumDef === null) {
                    console.log('unable to retrieve decode info of ' + type);
                    return null;
                }

                return new Enum_1.Enum(enumDef);
            }

            exports.Enum = enumType;

            /**
             * Struct decode the given @arg type
             *
             * @param {String} type - type given by the AST (e.g struct structDef storage ref)
             * @param {Object} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Object} returns decoded info about the current type: { storageBytes, typeName, members}
             */

            function struct(type, stateDefinitions, contractName, location) {
                const match = type.match(/struct (\S*?)( storage ref| storage pointer| memory| calldata)?$/);

                if (match) {
                    if (!location) {
                        location = match[2].trim();
                    }

                    const memberDetails = getStructMembers(match[1], stateDefinitions, contractName, location); // type is used to extract the ast struct definition

                    if (!memberDetails) {
                        return null;
                    }
                    return new Struct_1.Struct(memberDetails, location, match[1]);
                } else {
                    return null;
                }
            }

            exports.Struct = struct;

            /**
             * retrieve enum declaration of the given @arg type
             *
             * @param {String} type - type given by the AST (e.g enum enumDef)
             * @param {Object} stateDefinitions  - all state declarations given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @return {Array} - containing all value declaration of the current enum type
             */

            function getEnum(type, stateDefinitions, contractName) {
                const split = type.split('.');

                if (!split.length) {
                    type = contractName + '.' + type;
                } else {
                    contractName = split[0];
                }

                const state = stateDefinitions[contractName];

                if (state) {
                    for (const dec of state.stateDefinitions) {
                        if (dec && dec.name && type === contractName + '.' + dec.name) {
                            return dec;
                        }
                    }
                }

                return null;
            }

            /**
             * retrieve memebers declared in the given @arg tye
             *
             * @param {String} typeName - name of the struct type (e.g struct <name>)
             * @param {Object} stateDefinitions  - all state definition given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Array} containing all members of the current struct type
             */


            function getStructMembers(type, stateDefinitions, contractName, location) {
                if (type.indexOf('.') === -1) {
                    type = contractName + '.' + type;
                }

                if (!contractName) {
                    contractName = type.split('.')[0];
                }

                const state = stateDefinitions[contractName];

                if (state) {
                    for (const dec of state.stateDefinitions) {
                        if (dec.nodeType === 'StructDefinition' && type === contractName + '.' + dec.name) {
                            const offsets = computeOffsets(dec.members, stateDefinitions, contractName, location);

                            if (!offsets) {
                                return null;
                            }

                            return {
                                members: offsets.typesOffsets,
                                storageSlots: offsets.endLocation.slot
                            };
                        }
                    }
                }

                return null;
            }

            /**
             * parse the full type
             *
             * @param {String} fullType - type given by the AST (ex: uint[2] storage ref[2])
             * @return {String} returns the token type (used to instanciate the right decoder) (uint[2] storage ref[2] will return 'array', uint256 will return uintX)
             */


            function typeClass(fullType) {
                fullType = (0, util_1.removeLocation)(fullType);

                if (fullType.lastIndexOf(']') === fullType.length - 1) {
                    return 'array';
                }

                if (fullType.indexOf('mapping') === 0) {
                    return 'mapping';
                }

                if (fullType.indexOf(' ') !== -1) {
                    fullType = fullType.split(' ')[0];
                }

                const char = fullType.indexOf('bytes') === 0 ? 'X' : '';
                return fullType.replace(/[0-9]+/g, char);
            }

            /**
             * parse the type and return an object representing the type
             *
             * @param {Object} type - type name given by the ast node
             * @param {Object} stateDefinitions - all state stateDefinitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Object} - return the corresponding decoder or null on error
             */


            function parseType(type, stateDefinitions, contractName, location) {
                const decodeInfos = {
                    contract: address,
                    address: address,
                    array: array,
                    bool: bool,
                    bytes: dynamicByteArray,
                    bytesX: fixedByteArray,
                    enum: enumType,
                    string: stringType,
                    struct: struct,
                    int: int,
                    uint: uint,
                    mapping: mapping
                };
                const currentType = typeClass(type);

                if (currentType === null) {
                    console.log('unable to retrieve decode info of ' + type);
                    return null;
                }

                if (decodeInfos[currentType]) {
                    return decodeInfos[currentType](type, stateDefinitions, contractName, location);
                } else {
                    return null;
                }
            }

            exports.parseType = parseType;

            /**
             * compute offset (slot offset and byte offset of the @arg list of types)
             *
             * @param {Array} types - list of types
             * @param {Object} stateDefinitions - all state definitions given by the AST (including struct and enum type declaration) for all contracts
             * @param {String} contractName - contract the @args typeName belongs to
             * @param {String} location - location of the data (storage ref| storage pointer| memory| calldata)
             * @return {Array} - return an array of types item: {name, type, location}. location defines the byte offset and slot offset
             */

            function computeOffsets(types, stateDefinitions, contractName, location) {
                const ret = [];
                const storagelocation = {
                    offset: 0,
                    slot: 0
                };

                for (var i in types) {
                    var variable = types[i];
                    var type = parseType(variable.typeDescriptions.typeString, stateDefinitions, contractName, location);

                    if (!type) {
                        console.log('unable to retrieve decode info of ' + variable.typeDescriptions.typeString);
                        return null;
                    }

                    const immutable = variable.mutability === 'immutable';
                    const hasStorageSlots = !immutable && !variable.constant;

                    if (hasStorageSlots && storagelocation.offset + type.storageBytes > 32) {
                        storagelocation.slot++;
                        storagelocation.offset = 0;
                    }

                    ret.push({
                        name: variable.name,
                        type: type,
                        constant: variable.constant,
                        immutable,
                        storagelocation: {
                            offset: !hasStorageSlots ? 0 : storagelocation.offset,
                            slot: !hasStorageSlots ? 0 : storagelocation.slot
                        }
                    });

                    if (hasStorageSlots) {
                        if (type.storageSlots === 1 && storagelocation.offset + type.storageBytes <= 32) {
                            storagelocation.offset += type.storageBytes;
                        } else {
                            storagelocation.slot += type.storageSlots;
                            storagelocation.offset = 0;
                        }
                    }
                }

                if (storagelocation.offset > 0) {
                    storagelocation.slot++;
                }

                return {
                    typesOffsets: ret,
                    endLocation: storagelocation
                };
            }

            exports.computeOffsets = computeOffsets;

            /***/
        }),

        /***/ 1006:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DynamicByteArray = void 0;

            const tslib_1 = __webpack_require__(494);

            const util_1 = __webpack_require__(544);

            const remix_lib_1 = __webpack_require__(508);

            const ethereumjs_util_1 = __webpack_require__(493);

            const RefType_1 = __webpack_require__(678);

            const sha3256 = remix_lib_1.util.sha3_256;

            class DynamicByteArray extends RefType_1.RefType {
                constructor(location) {
                    super(1, 32, 'bytes', location);
                }

                decodeFromStorage(location, storageResolver) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        let value = '0x0';

                        try {
                            value = yield (0, util_1.extractHexValue)(location, storageResolver, this.storageBytes);
                        } catch (e) {
                            console.log(e);
                            return {
                                error: '<decoding failed - ' + e.message + '>',
                                type: this.typeName
                            };
                        }

                        const length = new ethereumjs_util_1.BN(value, 16);

                        if (length.testn(0)) {
                            let dataPos = new ethereumjs_util_1.BN(sha3256(location.slot).replace('0x', ''), 16);
                            let ret = '';
                            let currentSlot = '0x';

                            try {
                                currentSlot = yield (0, util_1.readFromStorage)(dataPos, storageResolver);
                            } catch (e) {
                                console.log(e);
                                return {
                                    error: '<decoding failed - ' + e.message + '>',
                                    type: this.typeName
                                };
                            }

                            while (length.gt(new ethereumjs_util_1.BN(ret.length)) && ret.length < 32000) {
                                currentSlot = currentSlot.replace('0x', '');
                                ret += currentSlot;
                                dataPos = dataPos.add(new ethereumjs_util_1.BN(1));

                                try {
                                    currentSlot = yield (0, util_1.readFromStorage)(dataPos, storageResolver);
                                } catch (e) {
                                    console.log(e);
                                    return {
                                        error: '<decoding failed - ' + e.message + '>',
                                        type: this.typeName
                                    };
                                }
                            }

                            return {
                                value: '0x' + ret.replace(/(00)+$/, ''),
                                length: '0x' + length.toString(16),
                                type: this.typeName
                            };
                        } else {
                            var size = parseInt(value.substr(value.length - 2, 2), 16) / 2;
                            return {
                                value: '0x' + value.substr(0, size * 2),
                                length: '0x' + size.toString(16),
                                type: this.typeName
                            };
                        }
                    });
                }

                decodeFromMemoryInternal(offset, memory) {
                    offset = 2 * offset;
                    let length = memory.substr(offset, 64);
                    length = 2 * parseInt(length, 16);
                    return {
                        length: '0x' + length.toString(16),
                        value: '0x' + memory.substr(offset + 64, length),
                        type: this.typeName
                    };
                }

            }

            exports.DynamicByteArray = DynamicByteArray;

            /***/
        }),

        /***/ 1007:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Mapping = void 0;

            const tslib_1 = __webpack_require__(494);

            const RefType_1 = __webpack_require__(678);

            const util_1 = __webpack_require__(544);

            const ethereumjs_util_1 = __webpack_require__(493);

            class Mapping extends RefType_1.RefType {
                constructor(underlyingTypes, location, fullType) {
                    super(1, 32, fullType, 'storage');
                    this.keyType = underlyingTypes.keyType;
                    this.valueType = underlyingTypes.valueType;
                    this.initialDecodedState = null;
                }

                decodeFromStorage(location, storageResolver) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const corrections = this.valueType.members ? this.valueType.members.map(value => {
                            return value.storagelocation;
                        }) : [];

                        if (!this.initialDecodedState) {
                            // cache the decoded initial storage
                            let mappingsInitialPreimages;

                            try {
                                mappingsInitialPreimages = yield storageResolver.initialMappingsLocation(corrections);
                                this.initialDecodedState = yield this.decodeMappingsLocation(mappingsInitialPreimages, location, storageResolver);
                            } catch (e) {
                                return {
                                    value: e.message,
                                    type: this.typeName
                                };
                            }
                        }

                        const mappingPreimages = yield storageResolver.mappingsLocation(corrections);
                        let ret = yield this.decodeMappingsLocation(mappingPreimages, location, storageResolver); // fetch mapping storage changes

                        ret = Object.assign({}, this.initialDecodedState, ret); // merge changes

                        return {
                            value: ret,
                            type: this.typeName
                        };
                    });
                }

                decodeFromMemoryInternal(offset, memory) {
                    // mappings can only exist in storage and not in memory
                    // so this should never be called
                    return {
                        value: '',
                        length: '0x0',
                        type: this.typeName
                    };
                }

                decodeMappingsLocation(preimages, location, storageResolver) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const mapSlot = (0, util_1.normalizeHex)((0, ethereumjs_util_1.bufferToHex)(location.slot));

                        if (!preimages[mapSlot]) {
                            return {};
                        }

                        const ret = {};

                        for (const i in preimages[mapSlot]) {
                            const mapLocation = getMappingLocation(i, location.slot);
                            const globalLocation = {
                                offset: location.offset,
                                slot: mapLocation
                            };
                            ret[i] = yield this.valueType.decodeFromStorage(globalLocation, storageResolver);
                        }

                        return ret;
                    });
                }

            }

            exports.Mapping = Mapping;

            function getMappingLocation(key, position) {
                // mapping storage location decribed at http://solidity.readthedocs.io/en/develop/miscellaneous.html#layout-of-state-variables-in-storage
                // > the value corresponding to a mapping key k is located at keccak256(k . p) where . is concatenation.
                // key should be a hex string, and position an int
                const mappingK = (0, ethereumjs_util_1.toBuffer)((0, ethereumjs_util_1.addHexPrefix)(key));
                let mappingP = (0, ethereumjs_util_1.toBuffer)((0, ethereumjs_util_1.addHexPrefix)(position));
                mappingP = (0, ethereumjs_util_1.setLengthLeft)(mappingP, 32);
                const mappingKeyBuf = concatTypedArrays(mappingK, mappingP);
                const mappingStorageLocation = (0, ethereumjs_util_1.keccak)(mappingKeyBuf);
                const mappingStorageLocationinBn = new ethereumjs_util_1.BN(mappingStorageLocation, 16);
                return mappingStorageLocationinBn;
            }

            function concatTypedArrays(a, b) {
                const c = new a.constructor(a.length + b.length);
                c.set(a, 0);
                c.set(b, a.length);
                return c;
            }

            /***/
        }),

        /***/ 1008:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.solidityLocals = void 0;

            const tslib_1 = __webpack_require__(494);

            function solidityLocals(vmtraceIndex, internalTreeCall, stack, memory, storageResolver, calldata, currentSourceLocation, cursor) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    const scope = internalTreeCall.findScope(vmtraceIndex);

                    if (!scope) {
                        const error = {
                            message: 'Can\'t display locals. reason: compilation result might not have been provided'
                        };
                        throw error;
                    }

                    const locals = {};
                    memory = formatMemory(memory);
                    let anonymousIncr = 1;

                    for (const local in scope.locals) {
                        var variable = scope.locals[local];

                        if (variable.stackDepth < stack.length && variable.sourceLocation.start <= currentSourceLocation.start) {
                            let name = variable.name;

                            if (name.indexOf('$') !== -1) {
                                name = '<' + anonymousIncr + '>';
                                anonymousIncr++;
                            }

                            try {
                                locals[name] = yield variable.type.decodeFromStack(variable.stackDepth, stack, memory, storageResolver, calldata, cursor, variable);
                            } catch (e) {
                                console.log(e);
                                locals[name] = {
                                    error: '<decoding failed - ' + e.message + '>'
                                };
                            }
                        }
                    }

                    return locals;
                });
            }

            exports.solidityLocals = solidityLocals;

            function formatMemory(memory) {
                if (memory instanceof Array) {
                    memory = memory.join('').replace(/0x/g, '');
                }

                return memory;
            }

            /***/
        }),

        /***/ 1009:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Debugger = void 0;

            const tslib_1 = __webpack_require__(494);

            const Ethdebugger_1 = __webpack_require__(1000);

            const eventManager_1 = __webpack_require__(562);

            const traceHelper_1 = __webpack_require__(553);

            const breakpointManager_1 = __webpack_require__(1010);

            const stepManager_1 = __webpack_require__(1758);

            const VmDebugger_1 = __webpack_require__(1759);

            class Debugger {
                constructor(options) {
                    this.event = new eventManager_1.EventManager();
                    this.offsetToLineColumnConverter = options.offsetToLineColumnConverter;
                    /*
      Returns a compilation result for a given address or the last one available if none are found
    */

                    this.compilationResult = options.compilationResult || function (contractAddress) {
                        return null;
                    };

                    this.debugger = new Ethdebugger_1.Ethdebugger({
                        web3: options.web3,
                        debugWithGeneratedSources: options.debugWithGeneratedSources,
                        compilationResult: this.compilationResult
                    });
                    const {
                        traceManager,
                        callTree,
                        solidityProxy
                    } = this.debugger;
                    this.breakPointManager = new breakpointManager_1.BreakpointManager({
                        traceManager,
                        callTree,
                        solidityProxy,
                        locationToRowConverter: sourceLocation => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                            const compilationResult = yield this.compilationResult();
                            if (!compilationResult) {
                                return {
                                    start: null,
                                    end: null
                                };
                            }
                            return yield this.offsetToLineColumnConverter.offsetToLineColumn(sourceLocation, sourceLocation.file, compilationResult.source.sources, compilationResult.data.sources);
                        })
                    });
                    this.breakPointManager.event.register('managersChanged', () => {
                        const {
                            traceManager,
                            callTree,
                            solidityProxy
                        } = this.debugger;
                        this.breakPointManager.setManagers({
                            traceManager,
                            callTree,
                            solidityProxy
                        });
                    });
                    this.breakPointManager.event.register('breakpointStep', step => {
                        this.step_manager.jumpTo(step);
                    });
                    this.debugger.setBreakpointManager(this.breakPointManager);
                    this.debugger.event.register('newTraceLoaded', this, () => {
                        this.event.trigger('debuggerStatus', [true]);
                    });
                    this.debugger.event.register('traceUnloaded', this, () => {
                        this.event.trigger('debuggerStatus', [false]);
                    });
                }

                registerAndHighlightCodeItem(index) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // register selected code item, highlight the corresponding source location
                        // this.debugger.traceManager.getCurrentCalledAddressAt(index, async (error, address) => {
                        try {
                            const address = this.debugger.traceManager.getCurrentCalledAddressAt(index);
                            const compilationResultForAddress = yield this.compilationResult(address);
                            if (!compilationResultForAddress) {
                                return;
                            }
                            this.debugger.callTree.sourceLocationTracker.getValidSourceLocationFromVMTraceIndex(address, index, compilationResultForAddress.data.contracts).then(rawLocation => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                                if (compilationResultForAddress && compilationResultForAddress.data) {
                                    const generatedSources = this.debugger.callTree.sourceLocationTracker.getGeneratedSourcesFromAddress(address);
                                    const astSources = Object.assign({}, compilationResultForAddress.data.sources);
                                    const sources = Object.assign({}, compilationResultForAddress.source.sources);

                                    if (generatedSources) {
                                        for (const genSource of generatedSources) {
                                            astSources[genSource.name] = {
                                                id: genSource.id,
                                                ast: genSource.ast
                                            };
                                            sources[genSource.name] = {
                                                content: genSource.contents
                                            };
                                        }
                                    }

                                    var lineColumnPos = yield this.offsetToLineColumnConverter.offsetToLineColumn(rawLocation, rawLocation.file, sources, astSources);
                                    this.event.trigger('newSourceLocation', [lineColumnPos, rawLocation, generatedSources, address]);
                                } else {
                                    this.event.trigger('newSourceLocation', [null]);
                                }
                            })).catch(_error => {
                                this.event.trigger('newSourceLocation', [null]);
                            }); // })
                        } catch (error) {
                            return console.log(error);
                        }
                    });
                }

                updateWeb3(web3) {
                    this.debugger.web3 = web3;
                }

                debug(blockNumber, txNumber, tx, loadingCb) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const web3 = this.debugger.web3;

                        if (this.debugger.traceManager.isLoading) {
                            return;
                        }

                        if (tx) {
                            if (!tx.to) {
                                tx.to = (0, traceHelper_1.contractCreationToken)('0');
                            }

                            return yield this.debugTx(tx, loadingCb);
                        }

                        if (txNumber.indexOf('0x') !== -1) {
                            tx = yield web3.eth.getTransaction(txNumber);
                            if (!tx) {
                                throw new Error('cannot find transaction ' + txNumber);
                            }
                        } else {
                            tx = yield web3.eth.getTransactionFromBlock(blockNumber, txNumber);
                            if (!tx) {
                                throw new Error('cannot find transaction ' + blockNumber + ' ' + txNumber);
                            }
                        }

                        return yield this.debugTx(tx, loadingCb);
                    });
                }

                debugTx(tx, loadingCb) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        this.step_manager = new stepManager_1.DebuggerStepManager(this.debugger, this.debugger.traceManager);
                        this.debugger.codeManager.event.register('changed', this, (code, address, instIndex) => {
                            if (!this.debugger.solidityProxy.contracts) {
                                return;
                            }
                            this.debugger.callTree.sourceLocationTracker.getValidSourceLocationFromVMTraceIndex(address, this.step_manager.currentStepIndex, this.debugger.solidityProxy.contracts).then(sourceLocation => {
                                this.vmDebuggerLogic.event.trigger('sourceLocationChanged', [sourceLocation]);
                            });
                        });
                        this.vmDebuggerLogic = new VmDebugger_1.VmDebuggerLogic(this.debugger, tx, this.step_manager, this.debugger.traceManager, this.debugger.codeManager, this.debugger.solidityProxy, this.debugger.callTree);
                        this.vmDebuggerLogic.start();
                        this.step_manager.event.register('stepChanged', this, stepIndex => {
                            if (typeof stepIndex !== 'number' || stepIndex >= this.step_manager.traceLength) {
                                return this.event.trigger('endDebug');
                            }

                            this.debugger.codeManager.resolveStep(stepIndex, tx);
                            this.step_manager.event.trigger('indexChanged', [stepIndex]);
                            this.vmDebuggerLogic.event.trigger('indexChanged', [stepIndex]);
                            this.vmDebuggerLogic.debugger.event.trigger('indexChanged', [stepIndex]);
                            this.registerAndHighlightCodeItem(stepIndex);
                        });
                        loadingCb();
                        yield this.debugger.debug(tx);
                    });
                }

                unload() {
                    this.debugger.unLoad();
                    this.event.trigger('debuggerUnloaded');
                }

            }

            exports.Debugger = Debugger;

            /***/
        }),

        /***/ 1010:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.BreakpointManager = void 0;

            const tslib_1 = __webpack_require__(494);

            const eventManager_1 = __webpack_require__(562);

            const traceHelper_1 = __webpack_require__(553);

            /**
             * allow to manage breakpoint
             *
             * Trigger events: breakpointHit, breakpointAdded, breakpointRemoved
             */


            class BreakpointManager {
                /**
                 * constructor
                 *
                 * @param {Object} _debugger - type of EthDebugger
                 * @return {Function} _locationToRowConverter - function implemented by editor which return a column/line position for a char source location
                 */
                constructor({
                                traceManager,
                                callTree,
                                solidityProxy,
                                locationToRowConverter
                            }) {
                    this.event = new eventManager_1.EventManager();
                    this.traceManager = traceManager;
                    this.callTree = callTree;
                    this.solidityProxy = solidityProxy;
                    this.breakpoints = {};
                    this.locationToRowConverter = locationToRowConverter;
                }

                setManagers({
                                traceManager,
                                callTree,
                                solidityProxy
                            }) {
                    this.traceManager = traceManager;
                    this.callTree = callTree;
                    this.solidityProxy = solidityProxy;
                }

                /**
                 * start looking for the next breakpoint
                 * @param {Bool} defaultToLimit - if true jump to the end of the trace if no more breakpoint found
                 *
                 */


                jumpNextBreakpoint(fromStep, defaultToLimit) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (!this.locationToRowConverter) {
                            return console.log('row converter not provided');
                        }

                        this.jump(fromStep || 0, 1, defaultToLimit, this.traceManager.trace);
                    });
                }

                /**
                 * start looking for the previous breakpoint
                 * @param {Bool} defaultToLimit - if true jump to the start of the trace if no more breakpoint found
                 *
                 */


                jumpPreviousBreakpoint(fromStep, defaultToLimit) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (!this.locationToRowConverter) {
                            return console.log('row converter not provided');
                        }

                        this.jump(fromStep || 0, -1, defaultToLimit, this.traceManager.trace);
                    });
                }

                depthChange(step, trace) {
                    return trace[step].depth !== trace[step - 1].depth;
                }

                hitLine(currentStep, sourceLocation, previousSourceLocation, trace) {
                    // isJumpDestInstruction -> returning from a internal function call
                    // depthChange -> returning from an external call
                    // sourceLocation.start <= previousSourceLocation.start && ... -> previous src is contained in the current one
                    if ((0, traceHelper_1.isJumpDestInstruction)(trace[currentStep]) && previousSourceLocation.jump === 'o' || this.depthChange(currentStep, trace) || sourceLocation.start <= previousSourceLocation.start && sourceLocation.start + sourceLocation.length >= previousSourceLocation.start + previousSourceLocation.length) {
                        return false;
                    }

                    this.event.trigger('breakpointStep', [currentStep]);
                    this.event.trigger('breakpointHit', [sourceLocation, currentStep]);
                    return true;
                }

                /**
                 * start looking for the previous or next breakpoint
                 * @param {Int} direction - 1 or -1 direction of the search
                 * @param {Bool} defaultToLimit - if true jump to the limit (end if direction is 1, beginning if direction is -1) of the trace if no more breakpoint found
                 *
                 */


                jump(fromStep, direction, defaultToLimit, trace) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        let sourceLocation;
                        let previousSourceLocation;
                        let currentStep = fromStep + direction;
                        let lineHadBreakpoint = false;
                        let initialLine;

                        while (currentStep > 0 && currentStep < trace.length) {
                            try {
                                previousSourceLocation = sourceLocation;
                                sourceLocation = yield this.callTree.extractValidSourceLocation(currentStep);
                            } catch (e) {
                                console.log('cannot jump to breakpoint ' + e);
                                currentStep += direction;
                                continue;
                            }

                            const lineColumn = yield this.locationToRowConverter(sourceLocation);
                            if (!initialLine) {
                                initialLine = lineColumn;
                            }

                            if (initialLine.start.line !== lineColumn.start.line) {
                                if (direction === -1 && lineHadBreakpoint) {
                                    // TODO : improve this when we will build the correct structure before hand
                                    lineHadBreakpoint = false;

                                    if (this.hitLine(currentStep + 1, previousSourceLocation, sourceLocation, trace)) {
                                        return;
                                    }
                                }

                                if (this.hasBreakpointAtLine(sourceLocation.file, lineColumn.start.line)) {
                                    lineHadBreakpoint = true;

                                    if (direction === 1 && this.hitLine(currentStep, sourceLocation, previousSourceLocation, trace)) {
                                        return;
                                    }
                                }
                            }

                            currentStep += direction;
                        }

                        this.event.trigger('NoBreakpointHit', []);

                        if (!defaultToLimit) {
                            return;
                        }

                        if (direction === -1) {
                            this.event.trigger('breakpointStep', [0]);
                        } else if (direction === 1) {
                            this.event.trigger('breakpointStep', [trace.length - 1]);
                        }
                    });
                }

                /**
                 * check the given pair fileIndex/line against registered breakpoints
                 *
                 * @param {Int} fileIndex - index of the file content (from the compilation result)
                 * @param {Int} line - line number where looking for breakpoint
                 * @return {Bool} return true if the given @arg fileIndex @arg line refers to a breakpoint
                 */


                hasBreakpointAtLine(fileIndex, line) {
                    const filename = this.solidityProxy.fileNameFromIndex(fileIndex);

                    if (!(filename && this.breakpoints[filename])) {
                        return false;
                    }

                    const sources = this.breakpoints[filename];

                    for (const k in sources) {
                        const source = sources[k];

                        if (line === source.row) {
                            return true;
                        }
                    }
                }

                /**
                 * return true if current manager has breakpoint
                 *
                 * @return {Bool} true if breapoint registered
                 */


                hasBreakpoint() {
                    for (const k in this.breakpoints) {
                        if (this.breakpoints[k].length) {
                            return true;
                        }
                    }

                    return false;
                }

                /**
                 * add a new breakpoint to the manager
                 *
                 * @param {Object} sourceLocation - position of the breakpoint { file: '<file index>', row: '<line number' }
                 */


                add(sourceLocation) {
                    if (!this.breakpoints[sourceLocation.fileName]) {
                        this.breakpoints[sourceLocation.fileName] = [];
                    }

                    this.breakpoints[sourceLocation.fileName].push(sourceLocation);
                    this.event.trigger('breakpointAdded', [sourceLocation]);
                }

                /**
                 * remove a breakpoint from the manager
                 *
                 * @param {Object} sourceLocation - position of the breakpoint { file: '<file index>', row: '<line number' }
                 */


                remove(sourceLocation) {
                    var sources = this.breakpoints[sourceLocation.fileName];

                    if (!sources) {
                        return;
                    }

                    for (const k in sources) {
                        const source = sources[k];

                        if (sourceLocation.row === source.row) {
                            sources.splice(k, 1);
                            this.event.trigger('breakpointRemoved', [sourceLocation]);
                            break;
                        }
                    }
                }

            }

            exports.BreakpointManager = BreakpointManager;

            /***/
        }),

        /***/ 1026:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extend = exports.Provider = void 0;

            var provider_1 = __webpack_require__(1804);

            Object.defineProperty(exports, "Provider", {
                enumerable: true,
                get: function () {
                    return provider_1.Provider;
                }
            });
            Object.defineProperty(exports, "extend", {
                enumerable: true,
                get: function () {
                    return provider_1.extend;
                }
            });

            /***/
        }),

        /***/ 1158:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            /* eslint-disable @typescript-eslint/no-unused-vars,no-use-before-define */
            function ModuleHeading({
                                       headingLabel,
                                       count
                                   }) {
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("nav", {
                    className: "plugins-list-header justify-content-between navbar navbar-expand-lg bg-light navbar-light align-items-center",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        className: "navbar-brand plugins-list-title h6 mb-0 mr-2",
                        children: headingLabel
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        className: "badge badge-primary",
                        style: {
                            cursor: 'default'
                        },
                        "data-id": "pluginManagerComponentInactiveTilesCount",
                        children: count
                    })
                    ]
                });
            }

            var _default = ModuleHeading;
            exports.default = _default;

            /***/
        }),

        /***/ 1159:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _solidityCompiler = __webpack_require__(2413);

            Object.keys(_solidityCompiler).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _solidityCompiler[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _solidityCompiler[key];
                    }
                });
            });

            var _logic = __webpack_require__(2422);

            Object.keys(_logic).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _logic[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _logic[key];
                    }
                });
            });

            /***/
        }),

        /***/ 1160:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _renderer = __webpack_require__(2419);

            Object.keys(_renderer).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _renderer[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _renderer[key];
                    }
                });
            });

            /***/
        }),

        /***/ 1162:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.resolveCallGraphSymbol = exports.analyseCallGraph = exports.buildGlobalFuncCallGraph = void 0;

            const staticAnalysisCommon_1 = __webpack_require__(513);

            function buildLocalFuncCallGraphInternal(functions, nodeFilter, extractNodeIdent, extractFuncDefIdent) {
                const callGraph = {};
                functions.forEach(func => {
                    const calls = func.relevantNodes.filter(nodeFilter).map(extractNodeIdent).filter(name => name !== extractFuncDefIdent(func)); // filter self recursive call

                    callGraph[extractFuncDefIdent(func)] = {
                        node: func,
                        calls: calls
                    };
                });
                return callGraph;
            }

            /**
             * Builds a function call graph for the current contracts.
             * Example Contract call graph:
             *
             * {
             *  "KingOfTheEtherThrone": {
             *    "contracts": {...},                                        // Contract node as defined in abstractAstView.js
             *    "functions": {
             *      "KingOfTheEtherThrone.claimThrone(string memory)": {    // function in KingOfEtherThrone
             *        "node": {...},                                        // function node as defined in abstractAstView.js
             *        "calls": {                                            // list of full qualified function names which are called form this function
             *        }
             *      }
             *    }
             *  },
             *  "foo": {
             *    "contract": {...},           // Contract node as definded in abstractAstView.js
             *    "functions": {}             // map from full qualified function name to func node
             *  }
             * }
             *
             * @contracts {list contracts} Expects as input the contract structure defined in abstractAstView.js
             * @return {map (string -> Contract Call Graph)} returns map from contract name to contract call graph
             */


            function buildGlobalFuncCallGraph(contracts) {
                const callGraph = {};
                contracts.forEach(contract => {
                    const filterNodes = node => {
                        return (0, staticAnalysisCommon_1.isLocalCallGraphRelevantNode)(node) || (0, staticAnalysisCommon_1.isExternalDirectCall)(node);
                    };

                    const getNodeIdent = node => {
                        return (0, staticAnalysisCommon_1.getFullQualifiedFunctionCallIdent)(contract.node, node);
                    };

                    const getFunDefIdent = funcDef => {
                        return (0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, funcDef.node, funcDef.parameters);
                    };

                    callGraph[(0, staticAnalysisCommon_1.getContractName)(contract.node)] = {
                        contract: contract,
                        functions: buildLocalFuncCallGraphInternal(contract.functions, filterNodes, getNodeIdent, getFunDefIdent)
                    };
                });
                return callGraph;
            }

            exports.buildGlobalFuncCallGraph = buildGlobalFuncCallGraph;

            /**
             * Walks through the call graph from a defined starting function, true if nodeCheck holds for every relevant node in the callgraph
             * @callGraph {callGraph} As returned by buildGlobalFuncCallGraph
             * @funcName {string} full qualified name of the starting function
             * @context {Object} provides additional context information that can be used by the nodeCheck function
             * @nodeCheck {(ASTNode, context) -> bool} applied on every relevant node in the call graph
             * @return {bool} returns map from contract name to contract call graph
             */

            function analyseCallGraph(callGraph, funcName, context, nodeCheck) {
                return analyseCallGraphInternal(callGraph, funcName, context, (a, b) => a || b, nodeCheck, {});
            }

            exports.analyseCallGraph = analyseCallGraph;

            function analyseCallGraphInternal(callGraph, funcName, context, combinator, nodeCheck, visited) {
                const current = resolveCallGraphSymbol(callGraph, funcName);
                if (current === undefined || visited[funcName] === true) {
                    return true;
                }
                visited[funcName] = true;
                return combinator(current.node.relevantNodes.reduce((acc, val) => combinator(acc, nodeCheck(val, context)), false), current.calls.reduce((acc, val) => combinator(acc, analyseCallGraphInternal(callGraph, val, context, combinator, nodeCheck, visited)), false));
            }

            function resolveCallGraphSymbol(callGraph, funcName) {
                return resolveCallGraphSymbolInternal(callGraph, funcName, false);
            }

            exports.resolveCallGraphSymbol = resolveCallGraphSymbol;

            function resolveCallGraphSymbolInternal(callGraph, funcName, silent) {
                let current = null;

                if (funcName.includes('.')) {
                    const parts = funcName.split('.');
                    const contractPart = parts[0];
                    const functionPart = parts[1];
                    const currentContract = callGraph[contractPart];

                    if (!(currentContract === undefined)) {
                        current = currentContract.functions[funcName]; // resolve inheritance hierarchy

                        if (current === undefined) {
                            // resolve inheritance lookup in linearized fashion
                            const inheritsFromNames = currentContract.contract.inheritsFrom.reverse();

                            for (let i = 0; i < inheritsFromNames.length; i++) {
                                const res = resolveCallGraphSymbolInternal(callGraph, inheritsFromNames[i] + '.' + functionPart, true);
                                if (!(res === undefined)) {
                                    return res;
                                }
                            }
                        }
                    } else {
                        if (!silent) {
                            console.log(`static analysis functionCallGraph.js: Contract ${contractPart} not found in function call graph.`);
                        }
                    }
                } else {
                    throw new Error('functionCallGraph.js: function does not have full qualified name.');
                }

                if (current === undefined && !silent) {
                    console.log(`static analysis functionCallGraph.js: ${funcName} not found in function call graph.`);
                }

                if (current !== null) {
                    return current;
                }
            }

            /***/
        }),

        /***/ 1172:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extractData = extractData;

            var _ethereumjsUtil = __webpack_require__(493);

            // eslint-disable-line
            function extractData(item, parent) {
                const ret = {};

                if (item.isProperty || !item.type) {
                    return item;
                }

                try {
                    if (item.type.lastIndexOf(']') === item.type.length - 1) {
                        ret.children = (item.value || []).map(function (item, index) {
                            return {
                                key: index,
                                value: item
                            };
                        });
                        ret.children.unshift({
                            key: 'length',
                            value: {
                                self: new _ethereumjsUtil.BN(item.length.replace('0x', ''), 16).toString(10),
                                type: 'uint',
                                isProperty: true
                            }
                        });
                        ret.isArray = true;
                        ret.self = parent.isArray ? '' : item.type;
                        ret.cursor = item.cursor;
                        ret.hasNext = item.hasNext;
                    } else if (item.type.indexOf('struct') === 0) {
                        ret.children = Object.keys(item.value || {}).map(function (key) {
                            return {
                                key: key,
                                value: item.value[key]
                            };
                        });
                        ret.self = item.type;
                        ret.isStruct = true;
                    } else if (item.type.indexOf('mapping') === 0) {
                        ret.children = Object.keys(item.value || {}).map(function (key) {
                            return {
                                key: key,
                                value: item.value[key]
                            };
                        });
                        ret.isMapping = true;
                        ret.self = item.type;
                    } else {
                        ret.children = null;
                        ret.self = item.value;
                        ret.type = item.type;
                    }
                } catch (e) {
                    console.log(e);
                }

                return ret;
            }

            /***/
        }),

        /***/ 1175:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            const tslib_1 = __webpack_require__(494); // Extend fs


            const path_1 = (0, tslib_1.__importDefault)(__webpack_require__(530));

            const fs = __webpack_require__(559); // https://github.com/mikeal/node-utils/blob/master/file/lib/main.js


            fs.walkSync = function (start, callback) {
                fs.readdirSync(start).forEach(name => {
                    if (name === 'node_modules') {
                        return; // hack
                    }

                    const abspath = path_1.default.join(start, name);

                    if (fs.statSync(abspath).isDirectory()) {
                        fs.walkSync(abspath, callback);
                    } else {
                        callback(abspath);
                    }
                });
            };

            module.exports = fs;

            /***/
        }),

        /***/ 1193:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompilationErrors = void 0; // eslint-disable-next-line no-redeclare

            class CompilationErrors extends Error {
                constructor(errors) {
                    const mapError = errors.map(e => {
                        return e.formattedMessage || e.message;
                    });
                    super(mapError.join('\n'));
                    this.errors = errors;
                    this.name = 'CompilationErrors';
                }

            }

            exports.CompilationErrors = CompilationErrors;

            /***/
        }),

        /***/ 1196:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.deployAll = void 0;

            const tslib_1 = __webpack_require__(494);

            const async_1 = (0, tslib_1.__importDefault)(__webpack_require__(541));

            const remix_lib_1 = __webpack_require__(508);

            /**
             * @dev Deploy all contracts from compilation result
             * @param compileResult compilation result
             * @param web3 web3 object
             * @param withDoubleGas If true, try deployment with gas double of estimation (used for Out-of-gas error only)
             * @param callback Callback
             */


            function deployAll(compileResult, web3, testsAccounts, withDoubleGas, deployCb, callback) {
                const compiledObject = {};
                const contracts = {};
                const accounts = testsAccounts;
                async_1.default.waterfall([
                    function getContractData(next) {
                        for (const contractFile in compileResult) {
                            for (const contractName in compileResult[contractFile]) {
                                const contract = compileResult[contractFile][contractName];
                                const className = contractName;
                                const filename = contractFile;
                                const abi = contract.abi;
                                const code = contract.evm.bytecode.object;
                                compiledObject[className] = {};
                                compiledObject[className].abi = abi;
                                compiledObject[className].code = code;
                                compiledObject[className].filename = filename;
                                compiledObject[className].className = className;
                                compiledObject[className].raw = contract;

                                if (contractFile.endsWith('_test.sol')) {
                                    compiledObject[className].isTest = true;
                                }
                            }
                        }

                        next();
                    }, function determineContractsToDeploy(next) {
                        const contractsToDeploy = ['Assert'];
                        const allContracts = Object.keys(compiledObject);

                        for (const contractName of allContracts) {
                            if (contractName === 'Assert') {
                                continue;
                            }

                            if (compiledObject[contractName].isTest) {
                                contractsToDeploy.push(contractName);
                            }
                        }

                        next(null, contractsToDeploy);
                    }, function deployContracts(contractsToDeploy, next) {
                        const deployRunner = (deployObject, contractObject, contractName, filename, callback) => {
                            deployObject.estimateGas().then(gasValue => {
                                const gasBase = Math.ceil(gasValue * 1.2);
                                const gas = withDoubleGas ? gasBase * 2 : gasBase;
                                deployObject.send({
                                    from: accounts[0],
                                    gas: gas
                                }).on('receipt', function (receipt) {
                                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                                        contractObject.options.address = receipt.contractAddress;
                                        contractObject.options.from = accounts[0];
                                        contractObject.options.gas = 5000 * 1000;
                                        compiledObject[contractName].deployedAddress = receipt.contractAddress;
                                        contracts[contractName] = contractObject;
                                        contracts[contractName].filename = filename;
                                        if (deployCb) {
                                            yield deployCb(filename, receipt.contractAddress);
                                        }
                                        callback(null, {
                                            receipt: {
                                                contractAddress: receipt.contractAddress
                                            }
                                        }); // TODO this will only work with JavaScriptV VM
                                    });
                                }).on('error', function (err) {
                                    console.error(err);
                                    callback(err);
                                });
                            });
                        };

                        async_1.default.eachOfLimit(contractsToDeploy, 1, function (contractName, index, nextEach) {
                            const contract = compiledObject[contractName];

                            const encodeDataFinalCallback = (error, contractDeployData) => {
                                if (error) {
                                    return nextEach(error);
                                }
                                const contractObject = new web3.eth.Contract(contract.abi);
                                const deployObject = contractObject.deploy({
                                    arguments: [],
                                    data: '0x' + contractDeployData.dataHex
                                });
                                deployRunner(deployObject, contractObject, contractName, contract.filename, error => {
                                    nextEach(error);
                                });
                            };

                            const encodeDataStepCallback = msg => {
                                console.dir(msg);
                            };

                            const encodeDataDeployLibraryCallback = (libData, callback) => {
                                const abi = compiledObject[libData.data.contractName].abi;
                                const code = compiledObject[libData.data.contractName].code;
                                const libraryObject = new web3.eth.Contract(abi);
                                const deployObject = libraryObject.deploy({
                                    arguments: [],
                                    data: '0x' + code
                                });
                                deployRunner(deployObject, libraryObject, libData.data.contractName, contract.filename, callback);
                            };

                            const funAbi = null; // no need to set the abi for encoding the constructor

                            const params = ''; // we suppose that the test contract does not have any param in the constructor

                            remix_lib_1.execution.txFormat.encodeConstructorCallAndDeployLibraries(contractName, contract.raw, compileResult, params, funAbi, encodeDataFinalCallback, encodeDataStepCallback, encodeDataDeployLibraryCallback);
                        }, function (err) {
                            if (err) {
                                return next(err);
                            }
                            next(null, contracts);
                        });
                    }
                ], callback);
            }

            exports.deployAll = deployAll;

            /***/
        }),

        /***/ 1199:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.workspaceExists = exports.uploadFile = exports.switchToWorkspace = exports.setPlugin = exports.renameWorkspaceFromProvider = exports.renameWorkspace = exports.loadWorkspacePreset = exports.getWorkspaces = exports.fetchWorkspaceDirectory = exports.deleteWorkspace = exports.createWorkspaceTemplate = exports.createWorkspace = exports.addInputField = void 0;

            var _ethereumjsUtil = __webpack_require__(493);

            var _axios = _interopRequireDefault(__webpack_require__(772));

            var _payload = __webpack_require__(854);

            var _helper = __webpack_require__(543);

            const examples = __webpack_require__(2687);

            const QueryParams = __webpack_require__(577);

            const LOCALHOST = ' - connect to localhost - ';
            const NO_WORKSPACE = ' - none - ';
            const queryParams = new QueryParams();
            let plugin, dispatch;

            const setPlugin = (filePanelPlugin, reducerDispatch) => {
                plugin = filePanelPlugin;
                dispatch = reducerDispatch;
            };

            exports.setPlugin = setPlugin;

            const addInputField = async (type, path, cb) => {
                const provider = plugin.fileManager.currentFileProvider();
                const promise = new Promise((resolve, reject) => {
                    provider.resolveDirectory(path, (error, fileTree) => {
                        if (error) {
                            cb && cb(error);
                            return reject(error);
                        }

                        cb && cb(null, true);
                        resolve(fileTree);
                    });
                });
                promise.then(files => {
                    dispatch((0, _payload.addInputFieldSuccess)(path, files, type));
                }).catch(error => {
                    console.error(error);
                });
                return promise;
            };

            exports.addInputField = addInputField;

            const createWorkspace = async (workspaceName, isEmpty = false, cb) => {
                await plugin.fileManager.closeAllFiles();
                const promise = createWorkspaceTemplate(workspaceName, 'default-template');
                dispatch((0, _payload.createWorkspaceRequest)(promise));
                promise.then(async () => {
                    dispatch((0, _payload.createWorkspaceSuccess)(workspaceName));
                    plugin.setWorkspace({
                        name: workspaceName,
                        isLocalhost: false
                    });
                    plugin.setWorkspaces(await getWorkspaces());
                    plugin.workspaceCreated(workspaceName);
                    if (!isEmpty) {
                        await loadWorkspacePreset('default-template');
                    }
                    cb && cb(null, workspaceName);
                }).catch(error => {
                    dispatch((0, _payload.createWorkspaceError)({
                        error
                    }));
                    cb && cb(error);
                });
                return promise;
            };

            exports.createWorkspace = createWorkspace;

            const createWorkspaceTemplate = async (workspaceName, template = 'default-template') => {
                if (!workspaceName) {
                    throw new Error('workspace name cannot be empty');
                }
                if ((0, _helper.checkSpecialChars)(workspaceName) || (0, _helper.checkSlash)(workspaceName)) {
                    throw new Error('special characters are not allowed');
                }
                if ((await workspaceExists(workspaceName)) && template === 'default-template') {
                    throw new Error('workspace already exists');
                } else {
                    const workspaceProvider = plugin.fileProviders.workspace;
                    await workspaceProvider.createWorkspace(workspaceName);
                }
            };

            exports.createWorkspaceTemplate = createWorkspaceTemplate;

            const loadWorkspacePreset = async (template = 'default-template') => {
                const workspaceProvider = plugin.fileProviders.workspace;
                const params = queryParams.get();

                switch (template) {
                    case 'code-template':
                        // creates a new workspace code-sample and loads code from url params.
                        try {
                            let path = '';
                            let content = '';

                            if (params.code) {
                                const hash = (0, _ethereumjsUtil.bufferToHex)((0, _ethereumjsUtil.keccakFromString)(params.code));
                                path = 'contract-' + hash.replace('0x', '').substring(0, 10) + '.sol';
                                content = atob(params.code);
                                workspaceProvider.set(path, content);
                            }

                            if (params.url) {
                                const data = await plugin.call('contentImport', 'resolve', params.url);
                                path = data.cleanUrl;
                                content = data.content;
                                workspaceProvider.set(path, content);
                            }

                            return path;
                        } catch (e) {
                            console.error(e);
                        }

                        break;

                    case 'gist-template':
                        // creates a new workspace gist-sample and get the file from gist
                        try {
                            const gistId = params.gist;
                            const response = await _axios.default.get(`https://api.github.com/gists/${gistId}`);
                            const data = response.data;

                            if (!data.files) {
                                return dispatch((0, _payload.displayNotification)('Gist load error', 'No files found', 'OK', null, () => {
                                    dispatch((0, _payload.hideNotification)());
                                }, null));
                            }

                            const obj = {};
                            Object.keys(data.files).forEach(element => {
                                const path = element.replace(/\.\.\./g, '/');
                                obj['/' + 'gist-' + gistId + '/' + path] = data.files[element];
                            });
                            plugin.fileManager.setBatchFiles(obj, 'workspace', true, errorLoadingFile => {
                                if (errorLoadingFile) {
                                    dispatch((0, _payload.displayNotification)('', errorLoadingFile.message || errorLoadingFile, 'OK', null, () => {
                                    }, null));
                                }
                            });
                        } catch (e) {
                            dispatch((0, _payload.displayNotification)('Gist load error', e.message, 'OK', null, () => {
                                dispatch((0, _payload.hideNotification)());
                            }, null));
                            console.error(e);
                        }

                        break;

                    case 'default-template':
                        // creates a new workspace and populates it with default project template.
                        // insert example contracts
                        for (const file in examples) {
                            try {
                                await workspaceProvider.set(examples[file].name, examples[file].content);
                            } catch (error) {
                                console.error(error);
                            }
                        }

                        break;
                }
            };

            exports.loadWorkspacePreset = loadWorkspacePreset;

            const workspaceExists = async name => {
                const workspaceProvider = plugin.fileProviders.workspace;
                const browserProvider = plugin.fileProviders.browser;
                const workspacePath = 'browser/' + workspaceProvider.workspacesPath + '/' + name;
                return browserProvider.exists(workspacePath);
            };

            exports.workspaceExists = workspaceExists;

            const fetchWorkspaceDirectory = async path => {
                if (!path) {
                    return;
                }
                const provider = plugin.fileManager.currentFileProvider();
                const promise = new Promise(resolve => {
                    provider.resolveDirectory(path, (error, fileTree) => {
                        if (error) {
                            console.error(error);
                        }
                        resolve(fileTree);
                    });
                });
                dispatch((0, _payload.fetchWorkspaceDirectoryRequest)(promise));
                promise.then(fileTree => {
                    dispatch((0, _payload.fetchWorkspaceDirectorySuccess)(path, fileTree));
                }).catch(error => {
                    dispatch((0, _payload.fetchWorkspaceDirectoryError)({
                        error
                    }));
                });
                return promise;
            };

            exports.fetchWorkspaceDirectory = fetchWorkspaceDirectory;

            const renameWorkspace = async (oldName, workspaceName, cb) => {
                await renameWorkspaceFromProvider(oldName, workspaceName);
                await dispatch((0, _payload.setRenameWorkspace)(oldName, workspaceName));
                plugin.setWorkspace({
                    name: workspaceName,
                    isLocalhost: false
                });
                plugin.workspaceRenamed(oldName, workspaceName);
                cb && cb(null, workspaceName);
            };

            exports.renameWorkspace = renameWorkspace;

            const renameWorkspaceFromProvider = async (oldName, workspaceName) => {
                if (!workspaceName) {
                    throw new Error('name cannot be empty');
                }
                if ((0, _helper.checkSpecialChars)(workspaceName) || (0, _helper.checkSlash)(workspaceName)) {
                    throw new Error('special characters are not allowed');
                }
                if (await workspaceExists(workspaceName)) {
                    throw new Error('workspace already exists');
                }
                const browserProvider = plugin.fileProviders.browser;
                const workspaceProvider = plugin.fileProviders.workspace;
                const workspacesPath = workspaceProvider.workspacesPath;
                browserProvider.rename('browser/' + workspacesPath + '/' + oldName, 'browser/' + workspacesPath + '/' + workspaceName, true);
                workspaceProvider.setWorkspace(workspaceName);
                plugin.setWorkspaces(await getWorkspaces());
            };

            exports.renameWorkspaceFromProvider = renameWorkspaceFromProvider;

            const deleteWorkspace = async (workspaceName, cb) => {
                await deleteWorkspaceFromProvider(workspaceName);
                await dispatch((0, _payload.setDeleteWorkspace)(workspaceName));
                plugin.workspaceDeleted(workspaceName);
                cb && cb(null, workspaceName);
            };

            exports.deleteWorkspace = deleteWorkspace;

            const deleteWorkspaceFromProvider = async workspaceName => {
                const workspacesPath = plugin.fileProviders.workspace.workspacesPath;
                await plugin.fileManager.closeAllFiles();
                plugin.fileProviders.browser.remove(workspacesPath + '/' + workspaceName);
                plugin.setWorkspaces(await getWorkspaces());
            };

            const switchToWorkspace = async name => {
                await plugin.fileManager.closeAllFiles();

                if (name === LOCALHOST) {
                    const isActive = await plugin.call('manager', 'isActive', 'remixd');
                    if (!isActive) {
                        await plugin.call('manager', 'activatePlugin', 'remixd');
                    }
                    dispatch((0, _payload.setMode)('localhost'));
                    plugin.emit('setWorkspace', {
                        name: null,
                        isLocalhost: true
                    });
                } else if (name === NO_WORKSPACE) {
                    plugin.fileProviders.workspace.clearWorkspace();
                    plugin.setWorkspace({
                        name: null,
                        isLocalhost: false
                    });
                    dispatch((0, _payload.setCurrentWorkspace)(null));
                } else {
                    const isActive = await plugin.call('manager', 'isActive', 'remixd');
                    if (isActive) {
                        await plugin.call('manager', 'deactivatePlugin', 'remixd');
                    }
                    await plugin.fileProviders.workspace.setWorkspace(name);
                    plugin.setWorkspace({
                        name,
                        isLocalhost: false
                    });
                    dispatch((0, _payload.setMode)('browser'));
                    dispatch((0, _payload.setCurrentWorkspace)(name));
                    dispatch((0, _payload.setReadOnlyMode)(false));
                }
            };

            exports.switchToWorkspace = switchToWorkspace;

            const uploadFile = async (target, targetFolder, cb) => {
                // TODO The file explorer is merely a view on the current state of
                // the files module. Please ask the user here if they want to overwrite
                // a file and then just use `files.add`. The file explorer will
                // pick that up via the 'fileAdded' event from the files module.
                [...target.files].forEach(file => {
                    const workspaceProvider = plugin.fileProviders.workspace;

                    const loadFile = name => {
                        const fileReader = new FileReader();

                        fileReader.onload = async function (event) {
                            if ((0, _helper.checkSpecialChars)(file.name)) {
                                return dispatch((0, _payload.displayNotification)('File Upload Failed', 'Special characters are not allowed', 'Close', null, async () => {
                                }));
                            }

                            const success = await workspaceProvider.set(name, event.target.result);

                            if (!success) {
                                return dispatch((0, _payload.displayNotification)('File Upload Failed', 'Failed to create file ' + name, 'Close', null, async () => {
                                }));
                            }

                            const config = plugin.registry.get('config').api;
                            const editor = plugin.registry.get('editor').api;

                            if (config.get('currentFile') === name && editor.currentContent() !== event.target.result) {
                                editor.setText(event.target.result);
                            }
                        };

                        fileReader.readAsText(file);
                        cb && cb(null, true);
                    };

                    const name = targetFolder === '/' ? file.name : `${targetFolder}/${file.name}`;
                    workspaceProvider.exists(name).then(exist => {
                        if (!exist) {
                            loadFile(name);
                        } else {
                            dispatch((0, _payload.displayNotification)('Confirm overwrite', `The file ${name} already exists! Would you like to overwrite it?`, 'OK', null, () => {
                                loadFile(name);
                            }, () => {
                            }));
                        }
                    }).catch(error => {
                        cb && cb(error);
                        if (error) {
                            console.log(error);
                        }
                    });
                });
            };

            exports.uploadFile = uploadFile;

            const getWorkspaces = async () => {
                try {
                    const workspaces = await new Promise((resolve, reject) => {
                        const workspacesPath = plugin.fileProviders.workspace.workspacesPath;
                        plugin.fileProviders.browser.resolveDirectory('/' + workspacesPath, (error, items) => {
                            if (error) {
                                return reject(error);
                            }

                            resolve(Object.keys(items).filter(item => items[item].isDirectory).map(folder => folder.replace(workspacesPath + '/', '')));
                        });
                    });
                    plugin.setWorkspaces(workspaces);
                    return workspaces;
                } catch (e) {
                }
            };

            exports.getWorkspaces = getWorkspaces;

            /***/
        }),

        /***/ 1201:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _helper = _interopRequireDefault(__webpack_require__(575));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {default: obj};
            }

            // eslint-disable-line
            const remixLib = __webpack_require__(508);

            const typeConversion = remixLib.execution.typeConversion;

            const Context = ({
                                 opts,
                                 provider
                             }) => {
                const data = opts.tx || '';
                const from = opts.from ? _helper.default.shortenHexData(opts.from) : '';
                let to = opts.to;
                if (data.to) {
                    to = to + ' ' + _helper.default.shortenHexData(data.to);
                }
                const val = data.value;
                let hash = data.hash ? _helper.default.shortenHexData(data.hash) : '';
                const input = data.input ? _helper.default.shortenHexData(data.input) : '';
                const logs = opts.logs && opts.logs.decoded && opts.logs.decoded.length ? opts.logs.decoded.length : 0;
                const block = data.receipt ? data.receipt.blockNumber : data.blockNumber || '';
                const i = data.receipt ? data.transactionIndex : data.transactionIndex;
                const value = val ? typeConversion.toInt(val) : 0;

                if (provider === 'vm') {
                    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_tx"
                    }, "[vm]"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "from:"), " ", from), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "to:"), " ", to), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "value:"), " ", value, " wei"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "data:"), " ", input), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "logs:"), " ", logs), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "hash:"), " ", hash)));
                } else if (provider !== 'vm' && data.resolvedData) {
                    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_tx"
                    }, "[block:", block, " txIndex:", i, "]"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "from:"), " ", from), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "to:"), " ", to), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "value:"), " ", value, " wei"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "data:"), " ", input), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "logs:"), " ", logs), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "hash:"), " ", hash)));
                } else {
                    hash = _helper.default.shortenHexData(data.blockHash);
                    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_tx"
                    }, "[block:", block, " txIndex:", i, "]"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "from:"), " ", from), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "to:"), " ", to), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "value:"), " ", value, " wei"), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "data:"), " ", input), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "logs:"), " ", logs), /*#__PURE__*/_react.default.createElement("div", {
                        className: "remix_ui_terminal_txItem"
                    }, /*#__PURE__*/_react.default.createElement("span", {
                        className: "remix_ui_terminal_txItemTitle"
                    }, "hash:"), " ", hash)));
                }
            };

            var _default = Context;
            exports.default = _default;

            /***/
        }),

        /***/ 1210:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _runTab = __webpack_require__(1211);

            Object.keys(_runTab).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _runTab[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function get() {
                        return _runTab[key];
                    }
                });
            });

            var _makeUdapp = __webpack_require__(1691);

            Object.keys(_makeUdapp).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _makeUdapp[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function get() {
                        return _makeUdapp[key];
                    }
                });
            });

            /***/
        }),

        /***/ 1211:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RunTab = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _runTab = __webpack_require__(1212);

            var _engineWeb = __webpack_require__(531);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var EventManager = __webpack_require__(620);

            var Recorder = __webpack_require__(1690);

            var _paq = window._paq = window._paq || [];

            var profile = {
                name: 'udapp',
                displayName: 'Deploy & run transactions',
                icon: 'assets/img/deployAndRun.webp',
                description: 'execute and save transactions',
                kind: 'udapp',
                location: 'sidePanel',
                documentation: 'https://remix-ide.readthedocs.io/en/latest/run.html',
                version: packageJson.version,
                permission: true,
                events: ['newTransaction'],
                methods: ['createVMAccount', 'sendTransaction', 'getAccounts', 'pendingTransactionsCount', 'getSettings', 'setEnvironmentMode']
            };

            var RunTab = /*#__PURE__*/function (_ViewPlugin) {
                _inherits(RunTab, _ViewPlugin);

                var _super = _createSuper(RunTab);

                function RunTab(blockchain, config, fileManager, editor, filePanel, compilersArtefacts, networkModule, fileProvider) {
                    var _this;

                    _classCallCheck(this, RunTab);

                    _this = _super.call(this, profile);
                    _this.event = new EventManager();
                    _this.config = config;
                    _this.blockchain = blockchain;
                    _this.fileManager = fileManager;
                    _this.editor = editor;
                    _this.filePanel = filePanel;
                    _this.compilersArtefacts = compilersArtefacts;
                    _this.networkModule = networkModule;
                    _this.fileProvider = fileProvider;
                    _this.recorder = new Recorder(blockchain);
                    _this.REACT_API = {};

                    _this.setupEvents();

                    _this.el = document.createElement('div');
                    return _this;
                }

                _createClass(RunTab, [
                    {
                        key: "onActivation",
                        value: function onActivation() {
                            this.renderComponent();
                        }
                    }, {
                        key: "setupEvents",
                        value: function setupEvents() {
                            var _this2 = this;

                            this.blockchain.events.on('newTransaction', function (tx, receipt) {
                                _this2.emit('newTransaction', tx, receipt);
                            });
                        }
                    }, {
                        key: "getSettings",
                        value: function getSettings() {
                            var _this3 = this;

                            return new Promise(function (resolve, reject) {
                                resolve({
                                    selectedAccount: _this3.REACT_API.accounts.selectedAccount,
                                    selectedEnvMode: _this3.REACT_API.selectExEnv,
                                    networkEnvironment: _this3.REACT_API.networkName
                                });
                            });
                        }
                    }, {
                        key: "setEnvironmentMode",
                        value: function () {
                            var _setEnvironmentMode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(env) {
                                var canCall;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.next = 2;
                                                return this.askUserPermission('setEnvironmentMode', 'change the environment used');

                                            case 2:
                                                canCall = _context.sent;

                                                if (canCall) {
                                                    env = typeof env === 'string' ? {
                                                        context: env
                                                    } : env;
                                                    this.emit('setEnvironmentModeReducer', env, this.currentRequest.from);
                                                }

                                            case 4:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function setEnvironmentMode(_x) {
                                return _setEnvironmentMode.apply(this, arguments);
                            }

                            return setEnvironmentMode;
                        }()
                    }, {
                        key: "createVMAccount",
                        value: function createVMAccount(newAccount) {
                            return this.blockchain.createVMAccount(newAccount);
                        }
                    }, {
                        key: "sendTransaction",
                        value: function sendTransaction(tx) {
                            _paq.push(['trackEvent', 'udapp', 'sendTx']);

                            return this.blockchain.sendTransaction(tx);
                        }
                    }, {
                        key: "getAccounts",
                        value: function getAccounts(cb) {
                            return this.blockchain.getAccounts(cb);
                        }
                    }, {
                        key: "pendingTransactionsCount",
                        value: function pendingTransactionsCount() {
                            return this.blockchain.pendingTransactionsCount();
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            return this.el;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_runTab.RunTabUI, {
                                plugin: this
                            }), this.el);
                        }
                    }, {
                        key: "onReady",
                        value: function onReady(api) {
                            this.REACT_API = api;
                        }
                    }, {
                        key: "writeFile",
                        value: function writeFile(fileName, content) {
                            return this.call('fileManager', 'writeFile', fileName, content);
                        }
                    }, {
                        key: "readFile",
                        value: function readFile(fileName) {
                            return this.call('fileManager', 'readFile', fileName);
                        }
                    }
                ]);

                return RunTab;
            }(_engineWeb.ViewPlugin);

            exports.RunTab = RunTab;

            /***/
        }),

        /***/ 1212:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _runTab = __webpack_require__(1213);

            Object.keys(_runTab).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _runTab[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _runTab[key];
                    }
                });
            });

            /***/
        }),

        /***/ 1213:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RunTabUI = RunTabUI;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _modalDialog = __webpack_require__(141);

            var _toaster = __webpack_require__(195);

            var _contractDropdownUI = __webpack_require__(1214);

            var _instanceContainerUI = __webpack_require__(1552);

            var _recorderCardUI = __webpack_require__(1563);

            var _settingsUI = __webpack_require__(1564);

            var _runTab = __webpack_require__(1570);

            var _actions = __webpack_require__(1571);

            __webpack_require__(1609);

            var _publishToStorage = __webpack_require__(988);

            var _passphrase = __webpack_require__(974);

            var _mainnet = __webpack_require__(1617);

            var _scenario = __webpack_require__(1618);

            var _payload = __webpack_require__(975);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            function RunTabUI(props) {
                const {
                    plugin
                } = props;
                const [focusModal, setFocusModal] = (0, _react.useState)({
                    hide: true,
                    title: '',
                    message: '',
                    okLabel: '',
                    okFn: () => {
                    },
                    cancelLabel: '',
                    cancelFn: () => {
                    }
                });
                const [modals, setModals] = (0, _react.useState)([]);
                const [focusToaster, setFocusToaster] = (0, _react.useState)('');
                const [toasters, setToasters] = (0, _react.useState)([]);
                const [publishData, setPublishData] = (0, _react.useState)({
                    storage: null,
                    contract: null
                });
                const [runTab, dispatch] = (0, _react.useReducer)(_runTab.runTabReducer, _runTab.runTabInitialState);
                const REACT_API = {
                    runTab
                };
                (0, _react.useEffect)(() => {
                    (0, _actions.initRunTab)(plugin)(dispatch);
                }, [plugin]);
                (0, _react.useEffect)(() => {
                    plugin.onReady(runTab);
                }, [REACT_API]);
                (0, _react.useEffect)(() => {
                    if (modals.length > 0) {
                        setFocusModal(() => {
                            const focusModal = {
                                hide: false,
                                title: modals[0].title,
                                message: modals[0].message,
                                okLabel: modals[0].okLabel,
                                okFn: modals[0].okFn,
                                cancelLabel: modals[0].cancelLabel,
                                cancelFn: modals[0].cancelFn
                            };
                            return focusModal;
                        });
                        const modalList = modals.slice();
                        modalList.shift();
                        setModals(modalList);
                    }
                }, [modals]);
                (0, _react.useEffect)(() => {
                    if (runTab.notification.title) {
                        modal(runTab.notification.title, runTab.notification.message, runTab.notification.labelOk, runTab.notification.actionOk, runTab.notification.labelCancel, runTab.notification.actionCancel);
                    }
                }, [runTab.notification]);
                (0, _react.useEffect)(() => {
                    if (toasters.length > 0) {
                        setFocusToaster(() => {
                            return toasters[0];
                        });
                        const toasterList = toasters.slice();
                        toasterList.shift();
                        setToasters(toasterList);
                    }
                }, [toasters]);
                (0, _react.useEffect)(() => {
                    if (runTab.popup) {
                        toast(runTab.popup);
                    }
                }, [runTab.popup]);

                const setCheckIpfs = value => {
                    dispatch((0, _payload.setIpfsCheckedState)(value));
                };

                const modal = (title, message, okLabel, okFn, cancelLabel, cancelFn) => {
                    setModals(modals => {
                        modals.push({
                            message,
                            title,
                            okLabel,
                            okFn,
                            cancelLabel,
                            cancelFn
                        });
                        return [...modals];
                    });
                };

                const handleHideModal = () => {
                    setFocusModal(modal => {
                        return _objectSpread(_objectSpread({}, modal), {}, {
                            hide: true,
                            message: null
                        });
                    });
                };

                const handleToaster = () => {
                    setFocusToaster('');
                    (0, _actions.clearPopUp)();
                };

                const toast = toasterMsg => {
                    setToasters(messages => {
                        messages.push(toasterMsg);
                        return [...messages];
                    });
                };

                const resetStorage = () => {
                    setPublishData({
                        storage: null,
                        contract: null
                    });
                };

                const publishToStorage = (storage, contract) => {
                    setPublishData({
                        storage,
                        contract
                    });
                };

                const gasEstimationPrompt = msg => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: ["Gas estimation errored with the following message (see below). The transaction execution will likely fail. Do you want to force sending? ", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), msg]
                    });
                };

                const logBuilder = msg => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                        children: msg
                    });
                };

                const passphrasePrompt = message => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_passphrase.PassphrasePrompt, {
                        message: message,
                        setPassphrase: _actions.setPassphrasePrompt,
                        defaultValue: runTab.passphrase
                    });
                };

                const scenarioPrompt = (message, defaultValue) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_scenario.ScenarioPrompt, {
                        message: message,
                        setScenarioPath: _actions.updateScenarioPath,
                        defaultValue: defaultValue
                    });
                };

                const mainnetPrompt = (tx, network, amount, gasEstimation, gasFees, determineGasPrice) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_mainnet.MainnetPrompt, {
                        init: determineGasPrice,
                        network: network,
                        tx: tx,
                        amount: amount,
                        gasEstimation: gasEstimation,
                        setNewGasPrice: gasFees,
                        updateBaseFeePerGas: _actions.updateBaseFeePerGas,
                        updateConfirmSettings: _actions.updateConfirmSettings,
                        updateGasPrice: _actions.updateGasPrice,
                        updateGasPriceStatus: _actions.updateGasPriceStatus,
                        updateMaxFee: _actions.updateMaxFee,
                        updateMaxPriorityFee: _actions.updateMaxPriorityFee,
                        setTxFeeContent: _actions.updateTxFeeContent,
                        txFeeContent: runTab.txFeeContent,
                        maxFee: runTab.maxFee,
                        maxPriorityFee: runTab.maxPriorityFee
                    });
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "udapp_runTabView run-tab",
                        id: "runTabView",
                        "data-id": "runTabView",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "list-group list-group-flush",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_settingsUI.SettingsUI, {
                                networkName: runTab.networkName,
                                personalMode: runTab.personalMode,
                                selectExEnv: runTab.selectExEnv,
                                setWeb3Endpoint: _actions.setWeb3Endpoint,
                                accounts: runTab.accounts,
                                setAccount: _actions.setAccount,
                                setUnit: _actions.setUnit,
                                sendValue: runTab.sendValue,
                                setSendValue: _actions.setSendTransactionValue,
                                sendUnit: runTab.sendUnit,
                                gasLimit: runTab.gasLimit,
                                setGasFee: _actions.setGasFee,
                                providers: runTab.providers,
                                setExecutionContext: _actions.setExecutionContext,
                                createNewBlockchainAccount: _actions.createNewBlockchainAccount,
                                setPassphrase: _actions.setPassphrasePrompt,
                                setMatchPassphrase: _actions.setMatchPassphrasePrompt,
                                modal: modal,
                                tooltip: toast,
                                signMessageWithAddress: _actions.signMessageWithAddress,
                                passphrase: runTab.passphrase
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_contractDropdownUI.ContractDropdownUI, {
                                exEnvironment: runTab.selectExEnv,
                                contracts: runTab.contracts,
                                getSelectedContract: _actions.getSelectedContract,
                                modal: modal,
                                passphrase: runTab.passphrase,
                                setPassphrase: _actions.setPassphrasePrompt,
                                createInstance: _actions.createInstance,
                                ipfsCheckedState: runTab.ipfsChecked,
                                setIpfsCheckedState: setCheckIpfs,
                                publishToStorage: publishToStorage,
                                gasEstimationPrompt: gasEstimationPrompt,
                                logBuilder: logBuilder,
                                passphrasePrompt: passphrasePrompt,
                                mainnetPrompt: mainnetPrompt,
                                tooltip: toast,
                                loadAddress: _actions.loadAddress,
                                networkName: runTab.networkName,
                                setNetworkName: _actions.setNetworkNameFromProvider
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recorderCardUI.RecorderUI, {
                                gasEstimationPrompt: gasEstimationPrompt,
                                logBuilder: logBuilder,
                                passphrasePrompt: passphrasePrompt,
                                mainnetPrompt: mainnetPrompt,
                                storeScenario: _actions.storeScenario,
                                runCurrentScenario: _actions.runCurrentScenario,
                                scenarioPrompt: scenarioPrompt,
                                count: runTab.recorder.transactionCount
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_instanceContainerUI.InstanceContainerUI, {
                                instances: runTab.instances,
                                clearInstances: _actions.clearInstances,
                                removeInstance: _actions.removeInstance,
                                getContext: _actions.getContext,
                                gasEstimationPrompt: gasEstimationPrompt,
                                logBuilder: logBuilder,
                                passphrasePrompt: passphrasePrompt,
                                mainnetPrompt: mainnetPrompt,
                                runTransactions: _actions.runTransactions,
                                sendValue: runTab.sendValue,
                                getFuncABIInputs: _actions.getFuncABIInputs
                            })
                            ]
                        })
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalDialog.ModalDialog, _objectSpread(_objectSpread({
                        id: "udappNotify"
                    }, focusModal), {}, {
                        handleHide: handleHideModal
                    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(_toaster.Toaster, {
                        message: focusToaster,
                        handleHide: handleToaster
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_publishToStorage.PublishToStorage, {
                        id: "udapp",
                        api: props.plugin,
                        resetStorage: resetStorage,
                        storage: publishData.storage,
                        contract: publishData.contract
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1214:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ContractDropdownUI = ContractDropdownUI;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var ethJSUtil = _interopRequireWildcard(__webpack_require__(493));

            var _contractGUI = __webpack_require__(887);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            function ContractDropdownUI(props) {
                const [abiLabel, setAbiLabel] = (0, _react.useState)({
                    display: '',
                    content: ''
                });
                const [atAddressOptions, setAtAddressOptions] = (0, _react.useState)({
                    title: 'address of contract',
                    disabled: true
                });
                const [loadedAddress, setLoadedAddress] = (0, _react.useState)('');
                const [contractOptions, setContractOptions] = (0, _react.useState)({
                    title: 'Please compile *.sol file to deploy or access a contract',
                    disabled: true
                });
                const [selectedContract, setSelectedContract] = (0, _react.useState)('');
                const [compFails, setCompFails] = (0, _react.useState)('none');
                const [loadedContractData, setLoadedContractData] = (0, _react.useState)(null);
                const [constructorInterface, setConstructorInterface] = (0, _react.useState)(null);
                const [constructorInputs, setConstructorInputs] = (0, _react.useState)(null);
                const {
                    contractList,
                    loadType,
                    currentFile,
                    compilationCount
                } = props.contracts;
                (0, _react.useEffect)(() => {
                    enableAtAddress(false);
                    setAbiLabel({
                        display: 'none',
                        content: 'ABI file selected'
                    });
                }, []);
                (0, _react.useEffect)(() => {
                    if (props.exEnvironment && props.networkName) {
                        const savedConfig = window.localStorage.getItem(`ipfs/${props.exEnvironment}/${props.networkName}`);
                        const isCheckedIPFS = savedConfig === 'true' ? true : false; // eslint-disable-line

                        props.setIpfsCheckedState(isCheckedIPFS);
                    }
                }, [props.exEnvironment, props.networkName]);
                (0, _react.useEffect)(() => {
                    if (!loadFromAddress || !ethJSUtil.isValidAddress(loadedAddress)) {
                        enableAtAddress(false);
                    }
                }, [loadedAddress]);
                (0, _react.useEffect)(() => {
                    if (/.(.abi)$/.exec(currentFile)) {
                        setAbiLabel({
                            display: 'block',
                            content: currentFile
                        });
                        enableAtAddress(true);
                    } else if (/.(.sol)$/.exec(currentFile) || /.(.vy)$/.exec(currentFile) || // vyper
                        /.(.lex)$/.exec(currentFile) || // lexon
                        /.(.contract)$/.exec(currentFile)) {
                        if (!selectedContract) {
                            enableAtAddress(false);
                        }
                    } else {
                        if (!selectedContract) {
                            enableAtAddress(false);
                        }
                    }

                    if (currentFile) {
                        enableContractNames(true);
                        setCompFails('none');
                    } else {
                        enableContractNames(false);
                        setCompFails('block');
                    }

                    initSelectedContract();
                }, [loadType, currentFile, compilationCount]);
                (0, _react.useEffect)(() => {
                    if (selectedContract) {
                        const contract = contractList.find(contract => contract.alias === selectedContract);

                        if (contract) {
                            const loadedContractData = props.getSelectedContract(selectedContract, contract.name);

                            if (loadedContractData) {
                                setLoadedContractData(loadedContractData);
                                setConstructorInterface(loadedContractData.getConstructorInterface());
                                setConstructorInputs(loadedContractData.getConstructorInputs());
                            }
                        }
                    }
                }, [selectedContract, compilationCount]);
                (0, _react.useEffect)(() => {
                    initSelectedContract();
                }, [contractList]);

                const initSelectedContract = () => {
                    if (contractList.length > 0) {
                        const contract = contractList.find(contract => contract.alias === selectedContract);
                        if (!selectedContract || !contract) {
                            setSelectedContract(contractList[0].alias);
                        }
                    }
                };

                const enableAtAddress = enable => {
                    if (enable) {
                        setAtAddressOptions({
                            disabled: false,
                            title: 'Interact with the given contract.'
                        });
                    } else {
                        setAtAddressOptions({
                            disabled: true,
                            title: loadedAddress ? '⚠ Compile *.sol file or select *.abi file.' : '⚠ Compile *.sol file or select *.abi file & then enter the address of deployed contract.'
                        });
                    }
                };

                const enableContractNames = enable => {
                    if (enable) {
                        setContractOptions({
                            disabled: false,
                            title: 'Select contract for Deploy or At Address.'
                        });
                    } else {
                        setContractOptions({
                            disabled: true,
                            title: loadType === 'sol' ? '⚠ Select and compile *.sol file to deploy or access a contract.' : '⚠ Selected *.abi file allows accessing contracts, select and compile *.sol file to deploy and access one.'
                        });
                    }
                };

                const clickCallback = (inputs, value) => {
                    createInstance(loadedContractData, value);
                };

                const createInstance = (selectedContract, args) => {
                    if (selectedContract.bytecodeObject.length === 0) {
                        return props.modal('Alert', 'This contract may be abstract, not implement an abstract parent\'s methods completely or not invoke an inherited contract\'s constructor correctly.', 'OK', () => {
                        });
                    }

                    props.createInstance(loadedContractData, props.gasEstimationPrompt, props.passphrasePrompt, props.logBuilder, props.publishToStorage, props.mainnetPrompt, isOverSizePrompt, args);
                };

                const atAddressChanged = event => {
                    const value = event.target.value;

                    if (!value) {
                        enableAtAddress(false);
                    } else {
                        if (atAddressOptions.disabled && (loadType === 'sol' || loadType === 'abi')) {
                            enableAtAddress(true);
                        } else {
                            enableAtAddress(false);
                        }
                    }

                    setLoadedAddress(value);
                };

                const loadFromAddress = () => {
                    let address = loadedAddress;

                    if (!ethJSUtil.isValidChecksumAddress(address)) {
                        props.tooltip(checkSumWarning());
                        address = ethJSUtil.toChecksumAddress(address);
                    }

                    props.loadAddress(loadedContractData, address);
                };

                const handleCheckedIPFS = () => {
                    const checkedState = !props.ipfsCheckedState;
                    props.setIpfsCheckedState(checkedState);
                    window.localStorage.setItem(`ipfs/${props.exEnvironment}/${props.networkName}`, checkedState.toString());
                };

                const handleContractChange = e => {
                    const value = e.target.value;
                    setSelectedContract(value);
                };

                const checkSumWarning = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                        children: [
                            "It seems you are not using a checksumed address.", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "A checksummed address is an address that contains uppercase letters, as specified in ", /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                href: "https://eips.ethereum.org/EIPS/eip-55",
                                target: "_blank",
                                rel: "noreferrer",
                                children: "EIP-55"
                            }), ".", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "Checksummed addresses are meant to help prevent users from sending transactions to the wrong address."
                        ]
                    });
                };

                const isOverSizePrompt = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [
                            "Contract creation initialization returns data with length of more than 24576 bytes. The deployment will likely fails. ", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "More info: ", /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                href: "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md",
                                target: "_blank",
                                rel: "noreferrer",
                                children: "eip-170"
                            })
                        ]
                    });
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_container",
                    "data-id": "contractDropdownContainer",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                        className: "udapp_settingsLabel",
                        children: "Contract"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_subcontainer",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
                            value: selectedContract,
                            onChange: handleContractChange,
                            className: "udapp_contractNames custom-select",
                            disabled: contractOptions.disabled,
                            title: contractOptions.title,
                            style: {
                                display: loadType === 'abi' ? 'none' : 'block'
                            },
                            children: contractList.map((contract, index) => {
                                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("option", {
                                    value: contract.alias,
                                    children: [contract.alias, " - ", contract.file]
                                }, index);
                            })
                        }), contractList.length <= 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                            style: {
                                display: compFails
                            },
                            title: "No contract compiled yet or compilation failed. Please check the compile tab for more information.",
                            className: "m-2 ml-3 fas fa-times-circle udapp_errorIcon"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            className: "py-1",
                            style: {
                                display: abiLabel.display
                            },
                            children: abiLabel.content
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "udapp_deployDropdown",
                            children: contractList.length <= 0 ? 'No compiled contracts' : loadedContractData ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_contractGUI.ContractGUI, {
                                    title: "Deploy",
                                    funcABI: constructorInterface,
                                    clickCallBack: clickCallback,
                                    inputs: constructorInputs,
                                    widthClass: "w-50",
                                    evmBC: loadedContractData.bytecodeObject,
                                    lookupOnly: false
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex py-1 align-items-center custom-control custom-checkbox",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        id: "deployAndRunPublishToIPFS",
                                        "data-id": "contractDropdownIpfsCheckbox",
                                        className: "form-check-input custom-control-input",
                                        type: "checkbox",
                                        onChange: handleCheckedIPFS,
                                        checked: props.ipfsCheckedState
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        htmlFor: "deployAndRunPublishToIPFS",
                                        "data-id": "contractDropdownIpfsCheckboxLabel",
                                        className: "m-0 form-check-label custom-control-label udapp_checkboxAlign",
                                        title: "Publishing the source code and metadata to IPFS facilitates source code verification using Sourcify and will greatly foster contract adoption (auditing, debugging, calling it, etc...)",
                                        children: "Publish to IPFS"
                                    })
                                    ]
                                })
                                ]
                            }) : ''
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "udapp_orLabel mt-2",
                            style: {
                                display: loadType === 'abi' ? 'none' : 'block'
                            },
                            children: "or"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "udapp_button udapp_atAddressSect",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                className: "udapp_atAddress btn btn-sm btn-info",
                                id: "runAndDeployAtAdressButton",
                                disabled: atAddressOptions.disabled,
                                title: atAddressOptions.title,
                                onClick: loadFromAddress,
                                children: "At Address"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                className: "udapp_input udapp_ataddressinput ataddressinput form-control",
                                placeholder: "Load contract from Address",
                                title: "address of contract",
                                onChange: atAddressChanged
                            })
                            ]
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1216:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1222:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1223:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1247:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1249:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1260:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1262:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1273:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compilerInput = void 0;

            function compilerInput(contracts) {
                return JSON.stringify({
                    language: 'Solidity',
                    sources: {
                        'test.sol': {
                            content: contracts
                        }
                    },
                    settings: {
                        optimizer: {
                            enabled: false,
                            runs: 200
                        },
                        outputSelection: {
                            '*': {
                                '': ['ast'],
                                '*': ['abi', 'metadata', 'evm.legacyAssembly', 'evm.bytecode', 'evm.deployedBytecode', 'evm.methodIdentifiers', 'evm.gasEstimates']
                            }
                        }
                    }
                });
            }

            exports.compilerInput = compilerInput;

            /***/
        }),

        /***/ 1275:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Web3Providers = void 0;

            const web3VmProvider_1 = __webpack_require__(889);

            const init_1 = __webpack_require__(1494);

            class Web3Providers {
                constructor() {
                    this.modes = {};
                }

                addProvider(type, obj) {
                    if (type === 'INTERNAL') {
                        const web3 = (0, init_1.loadWeb3)();
                        this.addWeb3(type, web3);
                    } else if (type === 'vm') {
                        this.addVM(type, obj);
                    } else {
                        (0, init_1.extendWeb3)(obj);
                        this.addWeb3(type, obj);
                    }
                }

                get(type, cb) {
                    if (this.modes[type]) {
                        return cb(null, this.modes[type]);
                    }

                    cb('error: this provider has not been setup (' + type + ')', null);
                }

                addWeb3(type, web3) {
                    this.modes[type] = web3;
                }

                addVM(type, vm) {
                    const vmProvider = new web3VmProvider_1.Web3VmProvider();
                    vmProvider.setVM(vm);
                    this.modes[type] = vmProvider;
                }

            }

            exports.Web3Providers = Web3Providers;

            /***/
        }),

        /***/ 1276:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            // Fetched from https://github.com/nomiclabs/hardhat/blob/ee4969a0a8f746f4775d4018326056d161066869/packages/hardhat-core/src/internal/hardhat-network/stack-traces/logger.ts#L47

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ConsoleLogs = void 0;
            exports.ConsoleLogs = {
                1368866505: '()',
                1309416733: '(int)',
                4122065833: '(uint)',
                1093685164: '(string)',
                843419373: '(bool)',
                741264322: '(address)',
                199720790: '(bytes)',
                1847107880: '(bytes1)',
                3921027734: '(bytes2)',
                763578662: '(bytes3)',
                3764340945: '(bytes4)',
                2793701517: '(bytes5)',
                2927928721: '(bytes6)',
                1322614312: '(bytes7)',
                1334060334: '(bytes8)',
                2428341456: '(bytes9)',
                20780939: '(bytes10)',
                67127854: '(bytes11)',
                2258660029: '(bytes12)',
                2488442420: '(bytes13)',
                2456219775: '(bytes14)',
                3667227872: '(bytes15)',
                1717330180: '(bytes16)',
                866084666: '(bytes17)',
                3302112666: '(bytes18)',
                1584093747: '(bytes19)',
                1367925737: '(bytes20)',
                3923391840: '(bytes21)',
                3589990556: '(bytes22)',
                2879508237: '(bytes23)',
                4055063348: '(bytes24)',
                193248344: '(bytes25)',
                4172368369: '(bytes26)',
                976705501: '(bytes27)',
                3358255854: '(bytes28)',
                1265222613: '(bytes29)',
                3994207469: '(bytes30)',
                3263516050: '(bytes31)',
                666357637: '(bytes32)',
                1812949376: '(uint,uint)',
                262402885: '(uint,string)',
                510514412: '(uint,bool)',
                1491830284: '(uint,address)',
                2534451664: '(string,uint)',
                1264337527: '(string,string)',
                3283441205: '(string,bool)',
                832238387: '(string,address)',
                910912146: '(bool,uint)',
                2414527781: '(bool,string)',
                705760899: '(bool,bool)',
                2235320393: '(bool,address)',
                574869411: '(address,uint)',
                1973388987: '(address,string)',
                1974863315: '(address,bool)',
                3673216170: '(address,address)',
                3884059252: '(uint,uint,uint)',
                2104037094: '(uint,uint,string)',
                1733758967: '(uint,uint,bool)',
                3191032091: '(uint,uint,address)',
                1533929535: '(uint,string,uint)',
                1062716053: '(uint,string,string)',
                1185403086: '(uint,string,bool)',
                529592906: '(uint,string,address)',
                1515034914: '(uint,bool,uint)',
                2332955902: '(uint,bool,string)',
                3587091680: '(uint,bool,bool)',
                1112473535: '(uint,bool,address)',
                2286109610: '(uint,address,uint)',
                3464692859: '(uint,address,string)',
                2060456590: '(uint,address,bool)',
                2104993307: '(uint,address,address)',
                2526862595: '(string,uint,uint)',
                2750793529: '(string,uint,string)',
                4043501061: '(string,uint,bool)',
                3817119609: '(string,uint,address)',
                4083337817: '(string,string,uint)',
                753761519: '(string,string,string)',
                2967534005: '(string,string,bool)',
                2515337621: '(string,string,address)',
                689682896: '(string,bool,uint)',
                3801674877: '(string,bool,string)',
                2232122070: '(string,bool,bool)',
                2469116728: '(string,bool,address)',
                130552343: '(string,address,uint)',
                3773410639: '(string,address,string)',
                3374145236: '(string,address,bool)',
                4243355104: '(string,address,address)',
                995886048: '(bool,uint,uint)',
                3359211184: '(bool,uint,string)',
                464374251: '(bool,uint,bool)',
                3302110471: '(bool,uint,address)',
                3224906412: '(bool,string,uint)',
                2960557183: '(bool,string,string)',
                3686056519: '(bool,string,bool)',
                2509355347: '(bool,string,address)',
                2954061243: '(bool,bool,uint)',
                626391622: '(bool,bool,string)',
                1349555864: '(bool,bool,bool)',
                276362893: '(bool,bool,address)',
                3950005167: '(bool,address,uint)',
                3734671984: '(bool,address,string)',
                415876934: '(bool,address,bool)',
                3530962535: '(bool,address,address)',
                2273710942: '(address,uint,uint)',
                3136907337: '(address,uint,string)',
                3846889796: '(address,uint,bool)',
                2548867988: '(address,uint,address)',
                484110986: '(address,string,uint)',
                4218888805: '(address,string,string)',
                3473018801: '(address,string,bool)',
                4035396840: '(address,string,address)',
                742821141: '(address,bool,uint)',
                555898316: '(address,bool,string)',
                3951234194: '(address,bool,bool)',
                4044790253: '(address,bool,address)',
                1815506290: '(address,address,uint)',
                7426238: '(address,address,string)',
                4070990470: '(address,address,bool)',
                25986242: '(address,address,address)',
                1554033982: '(uint,uint,uint,uint)',
                2024634892: '(uint,uint,uint,string)',
                1683143115: '(uint,uint,uint,bool)',
                3766828905: '(uint,uint,uint,address)',
                949229117: '(uint,uint,string,uint)',
                2080582194: '(uint,uint,string,string)',
                2989403910: '(uint,uint,string,bool)',
                1127384482: '(uint,uint,string,address)',
                1818524812: '(uint,uint,bool,uint)',
                4024028142: '(uint,uint,bool,string)',
                2495495089: '(uint,uint,bool,bool)',
                3776410703: '(uint,uint,bool,address)',
                1628154048: '(uint,uint,address,uint)',
                3600994782: '(uint,uint,address,string)',
                2833785006: '(uint,uint,address,bool)',
                3398671136: '(uint,uint,address,address)',
                3221501959: '(uint,string,uint,uint)',
                2730232985: '(uint,string,uint,string)',
                2270850606: '(uint,string,uint,bool)',
                2877020669: '(uint,string,uint,address)',
                1995203422: '(uint,string,string,uint)',
                1474103825: '(uint,string,string,string)',
                310782872: '(uint,string,string,bool)',
                3432549024: '(uint,string,string,address)',
                2763295359: '(uint,string,bool,uint)',
                2370346144: '(uint,string,bool,string)',
                1371286465: '(uint,string,bool,bool)',
                2037328032: '(uint,string,bool,address)',
                2565338099: '(uint,string,address,uint)',
                4170733439: '(uint,string,address,string)',
                4181720887: '(uint,string,address,bool)',
                2141537675: '(uint,string,address,address)',
                1451396516: '(uint,bool,uint,uint)',
                3906845782: '(uint,bool,uint,string)',
                3534472445: '(uint,bool,uint,bool)',
                1329595790: '(uint,bool,uint,address)',
                2438978344: '(uint,bool,string,uint)',
                2754870525: '(uint,bool,string,string)',
                879671495: '(uint,bool,string,bool)',
                1231956916: '(uint,bool,string,address)',
                3173363033: '(uint,bool,bool,uint)',
                831186331: '(uint,bool,bool,string)',
                1315722005: '(uint,bool,bool,bool)',
                1392910941: '(uint,bool,bool,address)',
                1102442299: '(uint,bool,address,uint)',
                2721084958: '(uint,bool,address,string)',
                2449150530: '(uint,bool,address,bool)',
                2263728396: '(uint,bool,address,address)',
                3399106228: '(uint,address,uint,uint)',
                1054063912: '(uint,address,uint,string)',
                435581801: '(uint,address,uint,bool)',
                4256361684: '(uint,address,uint,address)',
                2697204968: '(uint,address,string,uint)',
                2373420580: '(uint,address,string,string)',
                581204390: '(uint,address,string,bool)',
                3420819197: '(uint,address,string,address)',
                2064181483: '(uint,address,bool,uint)',
                1676730946: '(uint,address,bool,string)',
                2116501773: '(uint,address,bool,bool)',
                3056677012: '(uint,address,bool,address)',
                2587672470: '(uint,address,address,uint)',
                2034490470: '(uint,address,address,string)',
                22350596: '(uint,address,address,bool)',
                1430734329: '(uint,address,address,address)',
                149837414: '(string,uint,uint,uint)',
                2773406909: '(string,uint,uint,string)',
                4147936829: '(string,uint,uint,bool)',
                3201771711: '(string,uint,uint,address)',
                2697245221: '(string,uint,string,uint)',
                1821956834: '(string,uint,string,string)',
                3919545039: '(string,uint,string,bool)',
                3144824297: '(string,uint,string,address)',
                1427009269: '(string,uint,bool,uint)',
                1993105508: '(string,uint,bool,string)',
                3816813520: '(string,uint,bool,bool)',
                3847527825: '(string,uint,bool,address)',
                1481210622: '(string,uint,address,uint)',
                844415720: '(string,uint,address,string)',
                285649143: '(string,uint,address,bool)',
                3939013249: '(string,uint,address,address)',
                3587119056: '(string,string,uint,uint)',
                2366909661: '(string,string,uint,string)',
                3864418506: '(string,string,uint,bool)',
                1565476480: '(string,string,uint,address)',
                2681211381: '(string,string,string,uint)',
                3731419658: '(string,string,string,string)',
                739726573: '(string,string,string,bool)',
                1834430276: '(string,string,string,address)',
                2256636538: '(string,string,bool,uint)',
                1585754346: '(string,string,bool,string)',
                1081628777: '(string,string,bool,bool)',
                3279013851: '(string,string,bool,address)',
                1250010474: '(string,string,address,uint)',
                3944480640: '(string,string,address,string)',
                1556958775: '(string,string,address,bool)',
                1134328815: '(string,string,address,address)',
                1572859960: '(string,bool,uint,uint)',
                1119461927: '(string,bool,uint,string)',
                1019590099: '(string,bool,uint,bool)',
                1909687565: '(string,bool,uint,address)',
                885731469: '(string,bool,string,uint)',
                2821114603: '(string,bool,string,string)',
                1066037277: '(string,bool,string,bool)',
                3764542249: '(string,bool,string,address)',
                2155164136: '(string,bool,bool,uint)',
                2636305885: '(string,bool,bool,string)',
                2304440517: '(string,bool,bool,bool)',
                1905304873: '(string,bool,bool,address)',
                685723286: '(string,bool,address,uint)',
                764294052: '(string,bool,address,string)',
                2508990662: '(string,bool,address,bool)',
                870964509: '(string,bool,address,address)',
                3668153533: '(string,address,uint,uint)',
                1280700980: '(string,address,uint,string)',
                1522647356: '(string,address,uint,bool)',
                2741431424: '(string,address,uint,address)',
                2405583849: '(string,address,string,uint)',
                609847026: '(string,address,string,string)',
                1595265676: '(string,address,string,bool)',
                2864486961: '(string,address,string,address)',
                3318856587: '(string,address,bool,uint)',
                72663161: '(string,address,bool,string)',
                2038975531: '(string,address,bool,bool)',
                573965245: '(string,address,bool,address)',
                1857524797: '(string,address,address,uint)',
                2148146279: '(string,address,address,string)',
                3047013728: '(string,address,address,bool)',
                3985582326: '(string,address,address,address)',
                853517604: '(bool,uint,uint,uint)',
                3657852616: '(bool,uint,uint,string)',
                2753397214: '(bool,uint,uint,bool)',
                4049711649: '(bool,uint,uint,address)',
                1098907931: '(bool,uint,string,uint)',
                3542771016: '(bool,uint,string,string)',
                2446522387: '(bool,uint,string,bool)',
                2781285673: '(bool,uint,string,address)',
                3554563475: '(bool,uint,bool,uint)',
                3067439572: '(bool,uint,bool,string)',
                2650928961: '(bool,uint,bool,bool)',
                1114097656: '(bool,uint,bool,address)',
                3399820138: '(bool,uint,address,uint)',
                403247937: '(bool,uint,address,string)',
                1705899016: '(bool,uint,address,bool)',
                2318373034: '(bool,uint,address,address)',
                2387273838: '(bool,string,uint,uint)',
                2007084013: '(bool,string,uint,string)',
                549177775: '(bool,string,uint,bool)',
                1529002296: '(bool,string,uint,address)',
                1574643090: '(bool,string,string,uint)',
                392356650: '(bool,string,string,string)',
                508266469: '(bool,string,string,bool)',
                2547225816: '(bool,string,string,address)',
                2372902053: '(bool,string,bool,uint)',
                1211958294: '(bool,string,bool,string)',
                3697185627: '(bool,string,bool,bool)',
                1401816747: '(bool,string,bool,address)',
                453743963: '(bool,string,address,uint)',
                316065672: '(bool,string,address,string)',
                1842623690: '(bool,string,address,bool)',
                724244700: '(bool,string,address,address)',
                1181212302: '(bool,bool,uint,uint)',
                1348569399: '(bool,bool,uint,string)',
                2874982852: '(bool,bool,uint,bool)',
                201299213: '(bool,bool,uint,address)',
                395003525: '(bool,bool,string,uint)',
                1830717265: '(bool,bool,string,string)',
                3092715066: '(bool,bool,string,bool)',
                4188875657: '(bool,bool,string,address)',
                3259532109: '(bool,bool,bool,uint)',
                719587540: '(bool,bool,bool,string)',
                992632032: '(bool,bool,bool,bool)',
                2352126746: '(bool,bool,bool,address)',
                1620281063: '(bool,bool,address,uint)',
                2695133539: '(bool,bool,address,string)',
                3231908568: '(bool,bool,address,bool)',
                4102557348: '(bool,bool,address,address)',
                2617143996: '(bool,address,uint,uint)',
                2691192883: '(bool,address,uint,string)',
                4002252402: '(bool,address,uint,bool)',
                1760647349: '(bool,address,uint,address)',
                194640930: '(bool,address,string,uint)',
                2805734838: '(bool,address,string,string)',
                3804222987: '(bool,address,string,bool)',
                1870422078: '(bool,address,string,address)',
                1287000017: '(bool,address,bool,uint)',
                1248250676: '(bool,address,bool,string)',
                1788626827: '(bool,address,bool,bool)',
                474063670: '(bool,address,bool,address)',
                1384430956: '(bool,address,address,uint)',
                3625099623: '(bool,address,address,string)',
                1180699616: '(bool,address,address,bool)',
                487903233: '(bool,address,address,address)',
                1024368100: '(address,uint,uint,uint)',
                2301889963: '(address,uint,uint,string)',
                3964381346: '(address,uint,uint,bool)',
                519451700: '(address,uint,uint,address)',
                4111650715: '(address,uint,string,uint)',
                2119616147: '(address,uint,string,string)',
                2751614737: '(address,uint,string,bool)',
                3698927108: '(address,uint,string,address)',
                1770996626: '(address,uint,bool,uint)',
                2391690869: '(address,uint,bool,string)',
                4272018778: '(address,uint,bool,bool)',
                602229106: '(address,uint,bool,address)',
                2782496616: '(address,uint,address,uint)',
                1567749022: '(address,uint,address,string)',
                4051804649: '(address,uint,address,bool)',
                3961816175: '(address,uint,address,address)',
                2764647008: '(address,string,uint,uint)',
                1561552329: '(address,string,uint,string)',
                2116357467: '(address,string,uint,bool)',
                3755464715: '(address,string,uint,address)',
                2706362425: '(address,string,string,uint)',
                1560462603: '(address,string,string,string)',
                900007711: '(address,string,string,bool)',
                2689478535: '(address,string,string,address)',
                3877655068: '(address,string,bool,uint)',
                3154862590: '(address,string,bool,string)',
                1595759775: '(address,string,bool,bool)',
                542667202: '(address,string,bool,address)',
                2350461865: '(address,string,address,uint)',
                4158874181: '(address,string,address,string)',
                233909110: '(address,string,address,bool)',
                221706784: '(address,string,address,address)',
                3255869470: '(address,bool,uint,uint)',
                2606272204: '(address,bool,uint,string)',
                2244855215: '(address,bool,uint,bool)',
                227337758: '(address,bool,uint,address)',
                2652011374: '(address,bool,string,uint)',
                1197235251: '(address,bool,string,string)',
                1353532957: '(address,bool,string,bool)',
                436029782: '(address,bool,string,address)',
                3484780374: '(address,bool,bool,uint)',
                3754205928: '(address,bool,bool,string)',
                3401856121: '(address,bool,bool,bool)',
                3476636805: '(address,bool,bool,address)',
                3698398930: '(address,bool,address,uint)',
                769095910: '(address,bool,address,string)',
                2801077007: '(address,bool,address,bool)',
                1711502813: '(address,bool,address,address)',
                1425929188: '(address,address,uint,uint)',
                2647731885: '(address,address,uint,string)',
                3270936812: '(address,address,uint,bool)',
                3603321462: '(address,address,uint,address)',
                69767936: '(address,address,string,uint)',
                566079269: '(address,address,string,string)',
                1863997774: '(address,address,string,bool)',
                2406706454: '(address,address,string,address)',
                2513854225: '(address,address,bool,uint)',
                2858762440: '(address,address,bool,string)',
                752096074: '(address,address,bool,bool)',
                2669396846: '(address,address,bool,address)',
                3982404743: '(address,address,address,uint)',
                4161329696: '(address,address,address,string)',
                238520724: '(address,address,address,bool)',
                1717301556: '(address,address,address,address)'
            };

            /***/
        }),

        /***/ 1284:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1290:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1307:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1309:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1325:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1328:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1393:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1395:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1401:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1413:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1416:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1421:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1494:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extend = exports.extendWeb3 = exports.loadWeb3 = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            function loadWeb3(url = 'http://localhost:8545') {
                const web3 = new web3_1.default();
                web3.setProvider(new web3_1.default.providers.HttpProvider(url));
                extend(web3);
                return web3;
            }

            exports.loadWeb3 = loadWeb3;

            function extendWeb3(web3) {
                extend(web3);
            }

            exports.extendWeb3 = extendWeb3;

            function extend(web3) {
                if (!web3.extend) {
                    return;
                } // DEBUG


                const methods = [];

                if (!(web3.debug && web3.debug.preimage)) {
                    methods.push(new web3.extend.Method({
                        name: 'preimage',
                        call: 'debug_preimage',
                        inputFormatter: [null],
                        params: 1
                    }));
                }

                if (!(web3.debug && web3.debug.traceTransaction)) {
                    methods.push(new web3.extend.Method({
                        name: 'traceTransaction',
                        call: 'debug_traceTransaction',
                        inputFormatter: [null, null],
                        params: 2
                    }));
                }

                if (!(web3.debug && web3.debug.storageRangeAt)) {
                    methods.push(new web3.extend.Method({
                        name: 'storageRangeAt',
                        call: 'debug_storageRangeAt',
                        inputFormatter: [null, null, null, null, null],
                        params: 5
                    }));
                }

                if (methods.length > 0) {
                    web3.extend({
                        property: 'debug',
                        methods: methods,
                        properties: []
                    });
                }
            }

            exports.extend = extend;

            /***/
        }),

        /***/ 1495:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DummyProvider = void 0;

            class DummyProvider {
                constructor() {
                    this.eth = {};
                    this.debug = {};

                    this.eth.getCode = (address, cb) => {
                        return this.getCode(address, cb);
                    };

                    this.eth.getTransaction = (hash, cb) => {
                        return this.getTransaction(hash, cb);
                    };

                    this.eth.getTransactionFromBlock = (blockNumber, txIndex, cb) => {
                        return this.getTransactionFromBlock(blockNumber, txIndex, cb);
                    };

                    this.eth.getBlockNumber = cb => {
                        return this.getBlockNumber(cb);
                    };

                    this.debug.traceTransaction = (hash, options, cb) => {
                        return this.traceTransaction(hash, options, cb);
                    };

                    this.debug.storageRangeAt = (blockNumber, txIndex, address, start, end, maxLength, cb) => {
                        return this.storageRangeAt(blockNumber, txIndex, address, start, end, maxLength, cb);
                    };

                    this.providers = {
                        HttpProvider: function (url) {
                        }
                    };
                    this.currentProvider = {
                        host: ''
                    };
                }

                getCode(address, cb) {
                    cb(null, '');
                }

                setProvider(provider) {
                }

                traceTransaction(txHash, options, cb) {
                    if (cb) {
                        cb(null, {});
                    }

                    return {};
                }

                storageRangeAt(blockNumber, txIndex, address, start, end, maxLength, cb) {
                    if (cb) {
                        cb(null, {});
                    }

                    return {};
                }

                getBlockNumber(cb) {
                    cb(null, '');
                }

                getTransaction(txHash, cb) {
                    if (cb) {
                        cb(null, {});
                    }

                    return {};
                }

                getTransactionFromBlock(blockNumber, txIndex, cb) {
                    if (cb) {
                        cb(null, {});
                    }

                    return {};
                }

            }

            exports.DummyProvider = DummyProvider;

            /***/
        }),

        /***/ 1496:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Storage = void 0;

            class Storage {
                constructor(prefix) {
                    this.prefix = prefix; // on startup, upgrade the old storage layout

                    if (typeof window !== 'undefined') {
                        this.safeKeys().forEach(function (name) {
                            if (name.indexOf('sol-cache-file-', 0) === 0) {
                                var content = window.localStorage.getItem(name);
                                window.localStorage.setItem(name.replace(/^sol-cache-file-/, 'sol:'), content);
                                window.localStorage.removeItem(name);
                            }
                        });
                    } // remove obsolete key


                    if (typeof window !== 'undefined') {
                        window.localStorage.removeItem('editor-size-cache');
                    }
                }

                exists(name) {
                    if (typeof window !== 'undefined') {
                        return this.get(name) !== null;
                    }
                }

                get(name) {
                    if (typeof window !== 'undefined') {
                        return window.localStorage.getItem(this.prefix + name);
                    }
                }

                set(name, content) {
                    try {
                        if (typeof window !== 'undefined') {
                            window.localStorage.setItem(this.prefix + name, content);
                        }
                    } catch (exception) {
                        return false;
                    }

                    return true;
                }

                remove(name) {
                    if (typeof window !== 'undefined') {
                        window.localStorage.removeItem(this.prefix + name);
                    }

                    return true;
                }

                rename(originalName, newName) {
                    const content = this.get(originalName);

                    if (!this.set(newName, content)) {
                        return false;
                    }

                    this.remove(originalName);
                    return true;
                }

                safeKeys() {
                    // NOTE: this is a workaround for some browsers
                    if (typeof window !== 'undefined') {
                        return Object.keys(window.localStorage).filter(function (item) {
                            return item !== null && item !== undefined;
                        });
                    }

                    return [];
                }

                keys() {
                    return this.safeKeys() // filter any names not including the prefix
                        .filter(item => item.indexOf(this.prefix, 0) === 0) // remove prefix from filename and add the 'browser' path
                        .map(item => item.substr(this.prefix.length));
                }

            }

            exports.Storage = Storage;

            /***/
        }),

        /***/ 1497:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.EventsDecoder = void 0;

            const ethers_1 = __webpack_require__(592);

            const txHelper_1 = __webpack_require__(641);

            /**
             * Register to txListener and extract events
             *
             */


            class EventsDecoder {
                constructor({
                                resolveReceipt
                            }) {
                    this.resolveReceipt = resolveReceipt;
                }

                /**
                 * use Transaction Receipt to decode logs. assume that the transaction as already been resolved by txListener.
                 * logs are decoded only if the contract if known by remix.
                 *
                 * @param {Object} tx - transaction object
                 * @param {Function} cb - callback
                 */


                parseLogs(tx, contractName, compiledContracts, cb) {
                    if (tx.isCall) {
                        return cb(null, {
                            decoded: [],
                            raw: []
                        });
                    }
                    this.resolveReceipt(tx, (error, receipt) => {
                        if (error) {
                            return cb(error);
                        }

                        this._decodeLogs(tx, receipt, contractName, compiledContracts, cb);
                    });
                }

                _decodeLogs(tx, receipt, contract, contracts, cb) {
                    if (!contract || !receipt) {
                        return cb('cannot decode logs - contract or receipt not resolved ');
                    }

                    if (!receipt.logs) {
                        return cb(null, {
                            decoded: [],
                            raw: []
                        });
                    }

                    this._decodeEvents(tx, receipt.logs, contract, contracts, cb);
                }

                _eventABI(contract) {
                    const eventABI = {};
                    const abi = new ethers_1.ethers.utils.Interface(contract.abi);

                    for (const e in abi.events) {
                        const event = abi.getEvent(e);
                        eventABI[abi.getEventTopic(e).replace('0x', '')] = {
                            event: event.name,
                            inputs: event.inputs,
                            object: event,
                            abi: abi
                        };
                    }

                    return eventABI;
                }

                _eventsABI(compiledContracts) {
                    const eventsABI = {};
                    (0, txHelper_1.visitContracts)(compiledContracts, contract => {
                        eventsABI[contract.name] = this._eventABI(contract.object);
                    });
                    return eventsABI;
                }

                _event(hash, eventsABI) {
                    for (const k in eventsABI) {
                        if (eventsABI[k][hash]) {
                            const event = eventsABI[k][hash];

                            for (const input of event.inputs) {
                                if (input.type === 'function') {
                                    input.type = 'bytes24';
                                    input.baseType = 'bytes24';
                                }
                            }

                            return event;
                        }
                    }

                    return null;
                }

                _stringifyBigNumber(value) {
                    return value._isBigNumber ? value.toString() : value;
                }

                _stringifyEvent(value) {
                    if (value === null || value === undefined) {
                        return ' - ';
                    }
                    if (value._ethersType) {
                        value.type = value._ethersType;
                    }

                    if (Array.isArray(value)) {
                        // for struct && array
                        return value.map(item => {
                            return this._stringifyEvent(item);
                        });
                    } else {
                        return this._stringifyBigNumber(value);
                    }
                }

                _decodeEvents(tx, logs, contractName, compiledContracts, cb) {
                    const eventsABI = this._eventsABI(compiledContracts);

                    const events = [];

                    for (const i in logs) {
                        // [address, topics, mem]
                        const log = logs[i];
                        const topicId = log.topics[0];

                        const eventAbi = this._event(topicId.replace('0x', ''), eventsABI);

                        if (eventAbi) {
                            const decodedlog = eventAbi.abi.parseLog(log);
                            const decoded = {};

                            for (const v in decodedlog.args) {
                                decoded[v] = this._stringifyEvent(decodedlog.args[v]);
                            }

                            events.push({
                                from: log.address,
                                topic: topicId,
                                event: eventAbi.event,
                                args: decoded
                            });
                        } else {
                            events.push({
                                from: log.address,
                                data: log.data,
                                topics: log.topics
                            });
                        }
                    }

                    cb(null, {
                        decoded: events,
                        raw: logs
                    });
                }

            }

            exports.EventsDecoder = EventsDecoder;

            /***/
        }),

        /***/ 1498:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.checkVMError = exports.callFunction = exports.createContract = void 0;

            const ethers_1 = __webpack_require__(592);

            const txHelper_1 = __webpack_require__(641);

            /**
             * deploy the given contract
             *
             * @param {String} from    - sender address
             * @param {String} data    - data to send with the transaction ( return of txFormat.buildData(...) ).
             * @param {String} value    - decimal representation of value.
             * @param {String} gasLimit    - decimal representation of gas limit.
             * @param {Object} txRunner    - TxRunner.js instance
             * @param {Object} callbacks    - { confirmationCb, gasEstimationForceSend, promptCb }
             *     [validate transaction] confirmationCb (network, tx, gasEstimation, continueTxExecution, cancelCb)
             *     [transaction failed, force send] gasEstimationForceSend (error, continueTxExecution, cancelCb)
             *     [personal mode enabled, need password to continue] promptCb (okCb, cancelCb)
             * @param {Function} finalCallback    - last callback.
             */


            function createContract(from, data, value, gasLimit, txRunner, callbacks, finalCallback) {
                if (!callbacks.confirmationCb || !callbacks.gasEstimationForceSend || !callbacks.promptCb) {
                    return finalCallback('all the callbacks must have been defined');
                }

                const tx = {
                    from: from,
                    to: null,
                    data: data,
                    useCall: false,
                    value: value,
                    gasLimit: gasLimit
                };
                txRunner.rawRun(tx, callbacks.confirmationCb, callbacks.gasEstimationForceSend, callbacks.promptCb, (error, txResult) => {
                    // see universaldapp.js line 660 => 700 to check possible values of txResult (error case)
                    finalCallback(error, txResult);
                });
            }

            exports.createContract = createContract;

            /**
             * call the current given contract ! that will create a transaction !
             *
             * @param {String} from    - sender address
             * @param {String} to    - recipient address
             * @param {String} data    - data to send with the transaction ( return of txFormat.buildData(...) ).
             * @param {String} value    - decimal representation of value.
             * @param {String} gasLimit    - decimal representation of gas limit.
             * @param {Object} txRunner    - TxRunner.js instance
             * @param {Object} callbacks    - { confirmationCb, gasEstimationForceSend, promptCb }
             *     [validate transaction] confirmationCb (network, tx, gasEstimation, continueTxExecution, cancelCb)
             *     [transaction failed, force send] gasEstimationForceSend (error, continueTxExecution, cancelCb)
             *     [personal mode enabled, need password to continue] promptCb (okCb, cancelCb)
             * @param {Function} finalCallback    - last callback.
             */

            function callFunction(from, to, data, value, gasLimit, funAbi, txRunner, callbacks, finalCallback) {
                const useCall = funAbi.stateMutability === 'view' || funAbi.stateMutability === 'pure' || funAbi.constant;
                const tx = {
                    from,
                    to,
                    data,
                    useCall,
                    value,
                    gasLimit
                };
                txRunner.rawRun(tx, callbacks.confirmationCb, callbacks.gasEstimationForceSend, callbacks.promptCb, (error, txResult) => {
                    // see universaldapp.js line 660 => 700 to check possible values of txResult (error case)
                    finalCallback(error, txResult);
                });
            }

            exports.callFunction = callFunction;

            /**
             * check if the vm has errored
             *
             * @param {Object} execResult    - execution result given by the VM
             * @return {Object} -  { error: true/false, message: DOMNode }
             */

            function checkVMError(execResult, compiledContracts) {
                const errorCode = {
                    OUT_OF_GAS: 'out of gas',
                    STACK_UNDERFLOW: 'stack underflow',
                    STACK_OVERFLOW: 'stack overflow',
                    INVALID_JUMP: 'invalid JUMP',
                    INVALID_OPCODE: 'invalid opcode',
                    REVERT: 'revert',
                    STATIC_STATE_CHANGE: 'static state change',
                    INTERNAL_ERROR: 'internal error',
                    CREATE_COLLISION: 'create collision',
                    STOP: 'stop',
                    REFUND_EXHAUSTED: 'refund exhausted'
                };
                const ret = {
                    error: false,
                    message: ''
                };

                if (!execResult.exceptionError) {
                    return ret;
                }

                const exceptionError = execResult.exceptionError.error || '';
                const error = `VM error: ${exceptionError}.\n`;
                let msg;

                if (exceptionError === errorCode.INVALID_OPCODE) {
                    msg = '\t\n\tThe execution might have thrown.\n';
                    ret.error = true;
                } else if (exceptionError === errorCode.OUT_OF_GAS) {
                    msg = '\tThe transaction ran out of gas. Please increase the Gas Limit.\n';
                    ret.error = true;
                } else if (exceptionError === errorCode.REVERT) {
                    const returnData = execResult.returnValue;
                    const returnDataHex = returnData.slice(0, 4).toString('hex');
                    let customError;

                    if (compiledContracts) {
                        let decodedCustomErrorInputsClean;

                        for (const file of Object.keys(compiledContracts)) {
                            for (const contractName of Object.keys(compiledContracts[file])) {
                                const contract = compiledContracts[file][contractName];

                                for (const item of contract.abi) {
                                    if (item.type === 'error') {
                                        // ethers doesn't crash anymore if "error" type is specified, but it doesn't extract the errors. see:
                                        // https://github.com/ethers-io/ethers.js/commit/bd05aed070ac9e1421a3e2bff2ceea150bedf9b7
                                        // we need here to fake the type, so the "getSighash" function works properly
                                        const fn = (0, txHelper_1.getFunctionFragment)(Object.assign(Object.assign({}, item), {
                                            type: 'function',
                                            stateMutability: 'nonpayable'
                                        }));
                                        if (!fn) {
                                            continue;
                                        }
                                        const sign = fn.getSighash(item.name);
                                        if (!sign) {
                                            continue;
                                        }

                                        if (returnDataHex === sign.replace('0x', '')) {
                                            customError = item.name;
                                            const functionDesc = fn.getFunction(item.name); // decoding error parameters

                                            const decodedCustomErrorInputs = fn.decodeFunctionData(functionDesc, returnData);
                                            decodedCustomErrorInputsClean = {};
                                            let devdoc = {}; // "contract" reprensents the compilation result containing the NATSPEC documentation

                                            if (contract && fn.functions && Object.keys(fn.functions).length) {
                                                const functionSignature = Object.keys(fn.functions)[0]; // we check in the 'devdoc' if there's a developer documentation for this error

                                                try {
                                                    devdoc = contract.devdoc.errors && contract.devdoc.errors[functionSignature][0] || {};
                                                } catch (e) {
                                                    console.error(e.message);
                                                } // we check in the 'userdoc' if there's an user documentation for this error


                                                try {
                                                    const userdoc = contract.userdoc.errors && contract.userdoc.errors[functionSignature][0] || {};
                                                    if (userdoc && userdoc.notice) {
                                                        customError += ' : ' + userdoc.notice;
                                                    } // we append the user doc if any
                                                } catch (e) {
                                                    console.error(e.message);
                                                }
                                            }

                                            let inputIndex = 0;

                                            for (const input of functionDesc.inputs) {
                                                const inputKey = input.name || inputIndex;
                                                const v = decodedCustomErrorInputs[inputKey];
                                                decodedCustomErrorInputsClean[inputKey] = {
                                                    value: v.toString ? v.toString() : v
                                                };

                                                if (devdoc && devdoc.params) {
                                                    decodedCustomErrorInputsClean[input.name].documentation = devdoc.params[inputKey]; // we add the developer documentation for this input parameter if any
                                                }

                                                inputIndex++;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if (decodedCustomErrorInputsClean) {
                            msg = '\tThe transaction has been reverted to the initial state.\nError provided by the contract:';
                            msg += `\n${customError}`;
                            msg += '\nParameters:';
                            msg += `\n${JSON.stringify(decodedCustomErrorInputsClean, null, ' ')}`;
                        }
                    }

                    if (!customError) {
                        // It is the hash of Error(string)
                        if (returnData && returnDataHex === '08c379a0') {
                            const abiCoder = new ethers_1.ethers.utils.AbiCoder();
                            const reason = abiCoder.decode(['string'], returnData.slice(4))[0];
                            msg = `\tThe transaction has been reverted to the initial state.\nReason provided by the contract: "${reason}".`;
                        } else {
                            msg = '\tThe transaction has been reverted to the initial state.\nNote: The called function should be payable if you send value and the value you send should be less than your current balance.';
                        }
                    }

                    ret.error = true;
                } else if (exceptionError === errorCode.STATIC_STATE_CHANGE) {
                    msg = '\tState changes is not allowed in Static Call context\n';
                    ret.error = true;
                }

                ret.message = `${error}\n${exceptionError}\n${msg}\nDebug the transaction to get more information.`;
                return ret;
            }

            exports.checkVMError = checkVMError;

            /***/
        }),

        /***/ 1499:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TxListener = void 0;

            const tslib_1 = __webpack_require__(494);

            const async_1 = __webpack_require__(541);

            const ethers_1 = __webpack_require__(592);

            const ethereumjs_util_1 = __webpack_require__(493);

            const eventManager_1 = __webpack_require__(635);

            const util_1 = __webpack_require__(720);

            const txFormat_1 = __webpack_require__(952);

            const txHelper_1 = __webpack_require__(641);

            function addExecutionCosts(txResult, tx, execResult) {
                if (txResult) {
                    if (execResult) {
                        tx.returnValue = execResult.returnValue;
                        if (execResult.gasUsed) {
                            tx.executionCost = execResult.gasUsed.toString(10);
                        }
                    }

                    if (txResult.receipt && txResult.receipt.gasUsed) {
                        tx.transactionCost = txResult.receipt.gasUsed.toString(10);
                    }
                }
            }

            /**
             * poll web3 each 2s if web3
             * listen on transaction executed event if VM
             * attention: blocks returned by the event `newBlock` have slightly different json properties whether web3 or the VM is used
             * trigger 'newBlock'
             *
             */


            class TxListener {
                constructor(opt, executionContext) {
                    this.event = new eventManager_1.EventManager(); // has a default for now for backwards compatability

                    this.executionContext = executionContext;
                    this._api = opt.api;
                    this._resolvedTransactions = {};
                    this._resolvedContracts = {};
                    this._isListening = false;
                    this._listenOnNetwork = false;
                    this._loopId = null;
                    this.init();
                    this.executionContext.event.register('contextChanged', context => {
                        if (this._isListening) {
                            this.stopListening();
                            this.startListening();
                        }
                    });
                    opt.event.udapp.register('callExecuted', (error, from, to, data, lookupOnly, txResult) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (error) {
                            return;
                        } // we go for that case if
                        // in VM mode
                        // in web3 mode && listen remix txs only

                        if (!this._isListening) {
                            return;
                        } // we don't listen

                        if (this._loopId && this.executionContext.getProvider() !== 'vm') {
                            return;
                        } // we seems to already listen on a "web3" network

                        let returnValue;
                        let execResult;

                        if (this.executionContext.isVM()) {
                            execResult = yield this.executionContext.web3().eth.getExecutionResultFromSimulator(txResult.transactionHash);
                            returnValue = execResult.returnValue;
                        } else {
                            returnValue = (0, ethereumjs_util_1.toBuffer)((0, ethereumjs_util_1.addHexPrefix)(txResult.result));
                        }

                        const call = {
                            from: from,
                            to: to,
                            input: data,
                            hash: txResult.transactionHash ? txResult.transactionHash : 'call' + (from || '') + to + data,
                            isCall: true,
                            returnValue,
                            envMode: this.executionContext.getProvider()
                        };
                        addExecutionCosts(txResult, call, execResult);

                        this._resolveTx(call, call, (error, resolvedData) => {
                            if (!error) {
                                this.event.trigger('newCall', [call]);
                            }
                        });
                    }));
                    opt.event.udapp.register('transactionExecuted', (error, from, to, data, lookupOnly, txResult) => {
                        if (error) {
                            return;
                        }
                        if (lookupOnly) {
                            return;
                        } // we go for that case if
                        // in VM mode
                        // in web3 mode && listen remix txs only

                        if (!this._isListening) {
                            return;
                        } // we don't listen

                        if (this._loopId && this.executionContext.getProvider() !== 'vm') {
                            return;
                        } // we seems to already listen on a "web3" network

                        this.executionContext.web3().eth.getTransaction(txResult.transactionHash, (error, tx) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                            if (error) {
                                return console.log(error);
                            }
                            let execResult;

                            if (this.executionContext.isVM()) {
                                execResult = yield this.executionContext.web3().eth.getExecutionResultFromSimulator(txResult.transactionHash);
                            }

                            addExecutionCosts(txResult, tx, execResult);
                            tx.envMode = this.executionContext.getProvider();
                            tx.status = txResult.receipt.status; // 0x0 or 0x1

                            this._resolve([tx], () => {
                            });
                        }));
                    });
                }

                /**
                 * define if txlistener should listen on the network or if only tx created from remix are managed
                 *
                 * @param {Bool} type - true if listen on the network
                 */


                setListenOnNetwork(listenOnNetwork) {
                    this._listenOnNetwork = listenOnNetwork;

                    if (this._loopId) {
                        clearInterval(this._loopId);
                    }

                    if (this._listenOnNetwork) {
                        this._startListenOnNetwork();
                    }
                }

                /**
                 * reset recorded transactions
                 */


                init() {
                    this.blocks = [];
                    this.lastBlock = null;
                }

                /**
                 * start listening for incoming transactions
                 *
                 * @param {String} type - type/name of the provider to add
                 * @param {Object} obj  - provider
                 */


                startListening() {
                    this.init();
                    this._isListening = true;

                    if (this._listenOnNetwork && this.executionContext.getProvider() !== 'vm') {
                        this._startListenOnNetwork();
                    }
                }

                /**
                 * stop listening for incoming transactions. do not reset the recorded pool.
                 *
                 * @param {String} type - type/name of the provider to add
                 * @param {Object} obj  - provider
                 */


                stopListening() {
                    if (this._loopId) {
                        clearInterval(this._loopId);
                    }

                    this._loopId = null;
                    this._isListening = false;
                }

                _startListenOnNetwork() {
                    this._loopId = setInterval(() => {
                        const currentLoopId = this._loopId;
                        this.executionContext.web3().eth.getBlockNumber((error, blockNumber) => {
                            if (this._loopId === null) {
                                return;
                            }
                            if (error) {
                                return console.log(error);
                            }

                            if (currentLoopId === this._loopId && (!this.lastBlock || blockNumber > this.lastBlock)) {
                                if (!this.lastBlock) {
                                    this.lastBlock = blockNumber - 1;
                                }
                                let current = this.lastBlock + 1;
                                this.lastBlock = blockNumber;

                                while (blockNumber >= current) {
                                    try {
                                        this._manageBlock(current);
                                    } catch (e) {
                                        console.log(e);
                                    }

                                    current++;
                                }
                            }
                        });
                    }, 2000);
                }

                _manageBlock(blockNumber) {
                    this.executionContext.web3().eth.getBlock(blockNumber, true, (error, result) => {
                        if (!error) {
                            this._newBlock(Object.assign({
                                type: 'web3'
                            }, result));
                        }
                    });
                }

                /**
                 * try to resolve the contract name from the given @arg address
                 *
                 * @param {String} address - contract address to resolve
                 * @return {String} - contract name
                 */


                resolvedContract(address) {
                    if (this._resolvedContracts[address]) {
                        return this._resolvedContracts[address].name;
                    }
                    return null;
                }

                /**
                 * try to resolve the transaction from the given @arg txHash
                 *
                 * @param {String} txHash - contract address to resolve
                 * @return {String} - contract name
                 */


                resolvedTransaction(txHash) {
                    return this._resolvedTransactions[txHash];
                }

                _newBlock(block) {
                    this.blocks.push(block);

                    this._resolve(block.transactions, () => {
                        this.event.trigger('newBlock', [block]);
                    });
                }

                _resolve(transactions, callback) {
                    (0, async_1.each)(transactions, (tx, cb) => {
                        this._api.resolveReceipt(tx, (error, receipt) => {
                            if (error) {
                                return cb(error);
                            }

                            this._resolveTx(tx, receipt, (error, resolvedData) => {
                                if (error) {
                                    cb(error);
                                }

                                if (resolvedData) {
                                    this.event.trigger('txResolved', [tx, receipt, resolvedData]);
                                }

                                this.event.trigger('newTransaction', [tx, receipt]);
                                cb();
                            });
                        });
                    }, () => {
                        callback();
                    });
                }

                _resolveTx(tx, receipt, cb) {
                    const contracts = this._api.contracts();

                    if (!contracts) {
                        return cb();
                    }
                    let fun;
                    let contract;

                    if (!tx.to || tx.to === '0x0') {
                        // testrpc returns 0x0 in that case
                        // contract creation / resolve using the creation bytes code
                        // if web3: we have to call getTransactionReceipt to get the created address
                        // if VM: created address already included
                        const code = tx.input;
                        contract = this._tryResolveContract(code, contracts, true);

                        if (contract) {
                            const address = receipt.contractAddress;
                            this._resolvedContracts[address] = contract;
                            fun = this._resolveFunction(contract, tx, true);

                            if (this._resolvedTransactions[tx.hash]) {
                                this._resolvedTransactions[tx.hash].contractAddress = address;
                            }

                            return cb(null, {
                                to: null,
                                contractName: contract.name,
                                function: fun,
                                creationAddress: address
                            });
                        }

                        return cb();
                    } else {
                        // first check known contract, resolve against the `runtimeBytecode` if not known
                        contract = this._resolvedContracts[tx.to];

                        if (!contract) {
                            this.executionContext.web3().eth.getCode(tx.to, (error, code) => {
                                if (error) {
                                    return cb(error);
                                }

                                if (code) {
                                    const contract = this._tryResolveContract(code, contracts, false);

                                    if (contract) {
                                        this._resolvedContracts[tx.to] = contract;

                                        const fun = this._resolveFunction(contract, tx, false);

                                        return cb(null, {
                                            to: tx.to,
                                            contractName: contract.name,
                                            function: fun
                                        });
                                    }
                                }

                                return cb();
                            });
                            return;
                        }

                        if (contract) {
                            fun = this._resolveFunction(contract, tx, false);
                            return cb(null, {
                                to: tx.to,
                                contractName: contract.name,
                                function: fun
                            });
                        }

                        return cb();
                    }
                }

                _resolveFunction(contract, tx, isCtor) {
                    if (!contract) {
                        console.log('txListener: cannot resolve contract - contract is null');
                        return;
                    }

                    const abi = contract.object.abi;
                    const inputData = tx.input.replace('0x', '');

                    if (!isCtor) {
                        const methodIdentifiers = contract.object.evm.methodIdentifiers;

                        for (const fn in methodIdentifiers) {
                            if (methodIdentifiers[fn] === inputData.substring(0, 8)) {
                                const fnabi = (0, txHelper_1.getFunction)(abi, fn);
                                this._resolvedTransactions[tx.hash] = {
                                    contractName: contract.name,
                                    to: tx.to,
                                    fn: fn,
                                    params: this._decodeInputParams(inputData.substring(8), fnabi)
                                };

                                if (tx.returnValue) {
                                    this._resolvedTransactions[tx.hash].decodedReturnValue = (0, txFormat_1.decodeResponse)(tx.returnValue, fnabi);
                                }

                                return this._resolvedTransactions[tx.hash];
                            }
                        } // receive function


                        if (!inputData && (0, txHelper_1.getReceiveInterface)(abi)) {
                            this._resolvedTransactions[tx.hash] = {
                                contractName: contract.name,
                                to: tx.to,
                                fn: '(receive)',
                                params: null
                            };
                        } else {
                            // fallback function
                            this._resolvedTransactions[tx.hash] = {
                                contractName: contract.name,
                                to: tx.to,
                                fn: '(fallback)',
                                params: null
                            };
                        }
                    } else {
                        const bytecode = contract.object.evm.bytecode.object;
                        let params = null;

                        if (bytecode && bytecode.length) {
                            params = this._decodeInputParams(inputData.substring(bytecode.length), (0, txHelper_1.getConstructorInterface)(abi));
                        }

                        this._resolvedTransactions[tx.hash] = {
                            contractName: contract.name,
                            to: null,
                            fn: '(constructor)',
                            params: params
                        };
                    }

                    return this._resolvedTransactions[tx.hash];
                }

                _tryResolveContract(codeToResolve, compiledContracts, isCreation) {
                    let found = null;
                    (0, txHelper_1.visitContracts)(compiledContracts, contract => {
                        const bytes = isCreation ? contract.object.evm.bytecode.object : contract.object.evm.deployedBytecode.object;

                        if ((0, util_1.compareByteCode)(codeToResolve, '0x' + bytes)) {
                            found = contract;
                            return true;
                        }
                    });
                    return found;
                }

                _decodeInputParams(data, abi) {
                    data = (0, ethereumjs_util_1.toBuffer)((0, ethereumjs_util_1.addHexPrefix)(data));
                    if (!data.length) {
                        data = new Uint8Array(32 * abi.inputs.length);
                    } // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data

                    const inputTypes = [];

                    for (let i = 0; i < abi.inputs.length; i++) {
                        const type = abi.inputs[i].type;
                        inputTypes.push(type.indexOf('tuple') === 0 ? (0, txHelper_1.makeFullTypeDefinition)(abi.inputs[i]) : type);
                    }

                    const abiCoder = new ethers_1.ethers.utils.AbiCoder();
                    const decoded = abiCoder.decode(inputTypes, data);
                    const ret = {};

                    for (var k in abi.inputs) {
                        ret[abi.inputs[k].type + ' ' + abi.inputs[k].name] = decoded[k];
                    }

                    return ret;
                }

            }

            exports.TxListener = TxListener;

            /***/
        }),

        /***/ 1500:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TxRunner = void 0;

            const eventManager_1 = __webpack_require__(635);

            class TxRunner {
                constructor(internalRunner, opt) {
                    this.opt = opt || {};
                    this.internalRunner = internalRunner;
                    this.event = new eventManager_1.EventManager();
                    this.runAsync = this.opt.runAsync || true; // We have to run like this cause the VM Event Manager does not support running multiple txs at the same time.

                    this.pendingTxs = {};
                    this.queusTxs = [];
                }

                rawRun(args, confirmationCb, gasEstimationForceSend, promptCb, cb) {
                    run(this, args, args.timestamp || Date.now(), confirmationCb, gasEstimationForceSend, promptCb, cb);
                }

                execute(args, confirmationCb, gasEstimationForceSend, promptCb, callback) {
                    let data = args.data;

                    if (data.slice(0, 2) !== '0x') {
                        data = '0x' + data;
                    }

                    this.internalRunner.execute(args, confirmationCb, gasEstimationForceSend, promptCb, callback);
                }

            }

            exports.TxRunner = TxRunner;

            function run(self, tx, stamp, confirmationCb, gasEstimationForceSend = null, promptCb = null, callback = null) {
                if (!self.runAsync && Object.keys(self.pendingTxs).length) {
                    return self.queusTxs.push({
                        tx,
                        stamp,
                        callback
                    });
                }

                self.pendingTxs[stamp] = tx;
                self.execute(tx, confirmationCb, gasEstimationForceSend, promptCb, function (error, result) {
                    delete self.pendingTxs[stamp];
                    if (callback && typeof callback === 'function') {
                        callback(error, result);
                    }

                    if (self.queusTxs.length) {
                        const next = self.queusTxs.pop();
                        run(self, next.tx, next.stamp, next.callback);
                    }
                });
            }

            /***/
        }),

        /***/ 1501:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.forkAt = void 0;

            /**
             * returns the fork name for the @argument networkId and @argument blockNumber
             *
             * @param {Object} networkId - network Id (1 for VM, 3 for Ropsten, 4 for Rinkeby, 5 for Goerli)
             * @param {Object} blockNumber - block number
             * @return {String} - fork name (Berlin, Istanbul, ...)
             */

            function forkAt(networkId, blockNumber) {
                if (forks[networkId]) {
                    let currentForkName = forks[networkId][0].name;

                    for (const fork of forks[networkId]) {
                        if (blockNumber >= fork.number) {
                            currentForkName = fork.name;
                        }
                    }

                    return currentForkName;
                }

                return 'london';
            }

            exports.forkAt = forkAt; // see https://github.com/ethereum/go-ethereum/blob/master/params/config.go

            const forks = {
                1: [
                    {
                        number: 4370000,
                        name: 'byzantium'
                    }, {
                        number: 7280000,
                        name: 'constantinople'
                    }, {
                        number: 7280000,
                        name: 'petersburg'
                    }, {
                        number: 9069000,
                        name: 'istanbul'
                    }, {
                        number: 9200000,
                        name: 'muirglacier'
                    }, {
                        number: 12244000,
                        name: 'berlin'
                    }, {
                        number: 12965000,
                        name: 'london'
                    }
                ],
                3: [
                    {
                        number: 1700000,
                        name: 'byzantium'
                    }, {
                        number: 4230000,
                        name: 'constantinople'
                    }, {
                        number: 4939394,
                        name: 'petersburg'
                    }, {
                        number: 6485846,
                        name: 'istanbul'
                    }, {
                        number: 7117117,
                        name: 'muirglacier'
                    }, {
                        number: 9812189,
                        name: 'berlin'
                    }, {
                        number: 10499401,
                        name: 'london'
                    }
                ],
                4: [
                    {
                        number: 1035301,
                        name: 'byzantium'
                    }, {
                        number: 3660663,
                        name: 'constantinople'
                    }, {
                        number: 4321234,
                        name: 'petersburg'
                    }, {
                        number: 5435345,
                        name: 'istanbul'
                    }, {
                        number: 8290928,
                        name: 'berlin'
                    }, {
                        number: 8897988,
                        name: 'london'
                    }
                ],
                5: [
                    {
                        number: 1561651,
                        name: 'istanbul'
                    }, {
                        number: 4460644,
                        name: 'berlin'
                    }, {
                        number: 5062605,
                        name: 'london'
                    }
                ]
            };

            /***/
        }),

        /***/ 1502:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.stringify = exports.toInt = void 0;

            const ethereumjs_util_1 = __webpack_require__(493);

            function toInt(h) {
                if (h.indexOf && h.indexOf('0x') === 0) {
                    return new ethereumjs_util_1.BN(h.replace('0x', ''), 16).toString(10);
                } else if (h.constructor && h.constructor.name === 'BigNumber' || ethereumjs_util_1.BN.isBN(h)) {
                    return h.toString(10);
                }

                return h;
            }

            exports.toInt = toInt;
            exports.stringify = convertToString;

            function convertToString(v) {
                try {
                    if (v instanceof Array) {
                        const ret = [];

                        for (var k in v) {
                            ret.push(convertToString(v[k]));
                        }

                        return ret;
                    } else if (ethereumjs_util_1.BN.isBN(v) || v.constructor && v.constructor.name === 'BigNumber') {
                        return v.toString(10);
                    } else if (v._isBuffer) {
                        return (0, ethereumjs_util_1.bufferToHex)(v);
                    } else if (typeof v === 'object') {
                        const retObject = {};

                        for (const i in v) {
                            retObject[i] = convertToString(v[i]);
                        }

                        return retObject;
                    } else {
                        return v;
                    }
                } catch (e) {
                    console.log(e);
                    return v;
                }
            }

            /***/
        }),

        /***/ 1503:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.TxRunnerVM = void 0;

                const tx_1 = __webpack_require__(614);

                const block_1 = __webpack_require__(542);

                const ethereumjs_util_1 = __webpack_require__(493);

                const eventManager_1 = __webpack_require__(635);

                const logsManager_1 = __webpack_require__(954);

                class TxRunnerVM {
                    constructor(vmaccounts, api, getVMObject) {
                        this.event = new eventManager_1.EventManager();
                        this.logsManager = new logsManager_1.LogsManager(); // has a default for now for backwards compatability

                        this.getVMObject = getVMObject;
                        this.commonContext = this.getVMObject().common;
                        this.blockNumber = 0;
                        this.runAsync = true;
                        this.blockNumber = 0; // The VM is running in Homestead mode, which started at this block.

                        this.runAsync = false; // We have to run like this cause the VM Event Manager does not support running multiple txs at the same time.

                        this.pendingTxs = {};
                        this.vmaccounts = vmaccounts;
                        this.queusTxs = [];
                        this.blocks = [];
                        /*
      txHash is generated using the nonce,
      in order to have unique transaction hash, we need to keep using different nonce (in case of a call)
      so we increment this value after each call.
      For this to function we also need to skip nonce validation, in the vm: `{ skipNonce: true }`
    */

                        this.nextNonceForCall = 0;
                    }

                    execute(args, confirmationCb, gasEstimationForceSend, promptCb, callback) {
                        let data = args.data;

                        if (data.slice(0, 2) !== '0x') {
                            data = '0x' + data;
                        }

                        try {
                            this.runInVm(args.from, args.to, data, args.value, args.gasLimit, args.useCall, args.timestamp, callback);
                        } catch (e) {
                            callback(e, null);
                        }
                    }

                    runInVm(from, to, data, value, gasLimit, useCall, timestamp, callback) {
                        const self = this;
                        const account = self.vmaccounts[from];

                        if (!account) {
                            return callback('Invalid account selected');
                        }

                        if (Number.isInteger(gasLimit)) {
                            gasLimit = '0x' + gasLimit.toString(16);
                        }

                        this.getVMObject().stateManager.getAccount(ethereumjs_util_1.Address.fromString(from)).then(res => {
                            // See https://github.com/ethereumjs/ethereumjs-tx/blob/master/docs/classes/transaction.md#constructor
                            // for initialization fields and their types
                            if (!value) {
                                value = 0;
                            }

                            if (typeof value === 'string') {
                                if (value.startsWith('0x')) {
                                    value = new ethereumjs_util_1.BN(value.replace('0x', ''), 'hex');
                                } else {
                                    try {
                                        value = new ethereumjs_util_1.BN(value, 10);
                                    } catch (e) {
                                        return callback('Unable to parse the value ' + e.message);
                                    }
                                }
                            }

                            const EIP1559 = this.commonContext.hardfork() !== 'berlin'; // berlin is the only pre eip1559 fork that we handle.

                            let tx;

                            if (!EIP1559) {
                                tx = tx_1.Transaction.fromTxData({
                                    nonce: useCall ? this.nextNonceForCall : new ethereumjs_util_1.BN(res.nonce),
                                    gasPrice: '0x1',
                                    gasLimit: gasLimit,
                                    to: to,
                                    value: value,
                                    data: Buffer.from(data.slice(2), 'hex')
                                }, {
                                    common: this.commonContext
                                }).sign(account.privateKey);
                            } else {
                                tx = tx_1.FeeMarketEIP1559Transaction.fromTxData({
                                    nonce: useCall ? this.nextNonceForCall : new ethereumjs_util_1.BN(res.nonce),
                                    maxPriorityFeePerGas: '0x01',
                                    maxFeePerGas: '0x1',
                                    gasLimit: gasLimit,
                                    to: to,
                                    value: value,
                                    data: Buffer.from(data.slice(2), 'hex')
                                }).sign(account.privateKey);
                            }

                            if (useCall) {
                                this.nextNonceForCall++;
                            }
                            const coinbases = ['0x0e9281e9c6a0808672eaba6bd1220e144c9bb07a', '0x8945a1288dc78a6d8952a92c77aee6730b414778', '0x94d76e24f818426ae84aa404140e8d5f60e10e7e'];
                            const difficulties = [new ethereumjs_util_1.BN('69762765929000', 10), new ethereumjs_util_1.BN('70762765929000', 10), new ethereumjs_util_1.BN('71762765929000', 10)];
                            var block = block_1.Block.fromBlockData({
                                header: {
                                    timestamp: timestamp || new Date().getTime() / 1000 | 0,
                                    number: self.blockNumber,
                                    coinbase: coinbases[self.blockNumber % coinbases.length],
                                    difficulty: difficulties[self.blockNumber % difficulties.length],
                                    gasLimit: new ethereumjs_util_1.BN(gasLimit.replace('0x', ''), 16).imuln(2),
                                    baseFeePerGas: EIP1559 ? '0x1' : undefined
                                },
                                transactions: [tx]
                            }, {
                                common: this.commonContext
                            });

                            if (!useCall) {
                                ++self.blockNumber;
                                this.runBlockInVm(tx, block, callback);
                            } else {
                                this.getVMObject().stateManager.checkpoint().then(() => {
                                    this.runBlockInVm(tx, block, (err, result) => {
                                        this.getVMObject().stateManager.revert().then(() => {
                                            callback(err, result);
                                        });
                                    });
                                });
                            }
                        }).catch(e => {
                            callback(e);
                        });
                    }

                    runBlockInVm(tx, block, callback) {
                        this.getVMObject().vm.runBlock({
                            block: block,
                            generate: true,
                            skipBlockValidation: true,
                            skipBalance: false,
                            skipNonce: true
                        }).then(results => {
                            const result = results.results[0];

                            if (result) {
                                const status = result.execResult.exceptionError ? 0 : 1;
                                result.status = `0x${status}`;
                            }

                            callback(null, {
                                result: result,
                                transactionHash: (0, ethereumjs_util_1.bufferToHex)(Buffer.from(tx.hash())),
                                block,
                                tx
                            });
                        }).catch(function (err) {
                            callback(err);
                        });
                    }

                }

                exports.TxRunnerVM = TxRunnerVM;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1511:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 1543:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TxRunnerWeb3 = void 0;

            const tslib_1 = __webpack_require__(494);

            const eventManager_1 = __webpack_require__(635);

            class TxRunnerWeb3 {
                constructor(api, getWeb3, currentblockGasLimit) {
                    this.event = new eventManager_1.EventManager();
                    this.getWeb3 = getWeb3;
                    this.currentblockGasLimit = currentblockGasLimit;
                    this._api = api;
                }

                _executeTx(tx, network, txFee, api, promptCb, callback) {
                    if (network && network.lastBlock && network.lastBlock.baseFeePerGas) {
                        // the sending stack (web3.js / metamask need to have the type defined)
                        // this is to avoid the following issue: https://github.com/MetaMask/metamask-extension/issues/11824
                        tx.type = '0x2';
                    }

                    if (txFee) {
                        if (txFee.baseFeePerGas) {
                            tx.maxPriorityFeePerGas = this.getWeb3().utils.toHex(this.getWeb3().utils.toWei(txFee.maxPriorityFee, 'gwei'));
                            tx.maxFeePerGas = this.getWeb3().utils.toHex(this.getWeb3().utils.toWei(txFee.maxFee, 'gwei'));
                            tx.type = '0x2';
                        } else {
                            tx.gasPrice = this.getWeb3().utils.toHex(this.getWeb3().utils.toWei(txFee.gasPrice, 'gwei'));
                            tx.type = '0x1';
                        }
                    }

                    if (api.personalMode()) {
                        promptCb(value => {
                            this._sendTransaction(this.getWeb3().personal.sendTransaction, tx, value, callback);
                        }, () => {
                            return callback('Canceled by user.');
                        });
                    } else {
                        this._sendTransaction(this.getWeb3().eth.sendTransaction, tx, null, callback);
                    }
                }

                _sendTransaction(sendTx, tx, pass, callback) {
                    const cb = (err, resp) => {
                        if (err) {
                            return callback(err, resp);
                        }

                        this.event.trigger('transactionBroadcasted', [resp]);

                        var listenOnResponse = () => {
                            // eslint-disable-next-line no-async-promise-executor
                            return new Promise((resolve, reject) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                                const receipt = yield tryTillReceiptAvailable(resp, this.getWeb3());
                                tx = yield tryTillTxAvailable(resp, this.getWeb3());
                                resolve({
                                    receipt,
                                    tx,
                                    transactionHash: receipt ? receipt['transactionHash'] : null
                                });
                            }));
                        };

                        listenOnResponse().then(txData => {
                            callback(null, txData);
                        }).catch(error => {
                            callback(error);
                        });
                    };

                    const args = pass !== null ? [tx, pass, cb] : [tx, cb];

                    try {
                        sendTx.apply({}, args);
                    } catch (e) {
                        return callback(`Send transaction failed: ${e.message} . if you use an injected provider, please check it is properly unlocked. `);
                    }
                }

                execute(args, confirmationCb, gasEstimationForceSend, promptCb, callback) {
                    let data = args.data;

                    if (data.slice(0, 2) !== '0x') {
                        data = '0x' + data;
                    }

                    return this.runInNode(args.from, args.to, data, args.value, args.gasLimit, args.useCall, args.timestamp, confirmationCb, gasEstimationForceSend, promptCb, callback);
                }

                runInNode(from, to, data, value, gasLimit, useCall, timestamp, confirmCb, gasEstimationForceSend, promptCb, callback) {
                    const tx = {
                        from: from,
                        to: to,
                        data: data,
                        value: value
                    };

                    if (useCall) {
                        tx['gas'] = gasLimit;
                        if (this._api && this._api.isVM()) {
                            tx['timestamp'] = timestamp;
                        }
                        return this.getWeb3().eth.call(tx, function (error, result) {
                            if (error) {
                                return callback(error);
                            }
                            callback(null, {
                                result: result
                            });
                        });
                    }

                    this.getWeb3().eth.estimateGas(tx, (err, gasEstimation) => {
                        if (err && err.message.indexOf('Invalid JSON RPC response') !== -1) {
                            // // @todo(#378) this should be removed when https://github.com/WalletConnect/walletconnect-monorepo/issues/334 is fixed
                            callback(new Error('Gas estimation failed because of an unknown internal error. This may indicated that the transaction will fail.'));
                        }

                        gasEstimationForceSend(err, () => {
                            // callback is called whenever no error
                            tx['gas'] = !gasEstimation ? gasLimit : gasEstimation;

                            this._api.detectNetwork((err, network) => {
                                if (err) {
                                    console.log(err);
                                    return;
                                }

                                if (this._api.config.getUnpersistedProperty('doNotShowTransactionConfirmationAgain')) {
                                    return this._executeTx(tx, network, null, this._api, promptCb, callback);
                                }

                                confirmCb(network, tx, tx['gas'], txFee => {
                                    return this._executeTx(tx, network, txFee, this._api, promptCb, callback);
                                }, error => {
                                    callback(error);
                                });
                            });
                        }, () => {
                            const blockGasLimit = this.currentblockGasLimit(); // NOTE: estimateGas very likely will return a large limit if execution of the code failed
                            //       we want to be able to run the code in order to debug and find the cause for the failure

                            if (err) {
                                return callback(err);
                            }
                            let warnEstimation = ' An important gas estimation might also be the sign of a problem in the contract code. Please check loops and be sure you did not sent value to a non payable function (that\'s also the reason of strong gas estimation). ';
                            warnEstimation += ' ' + err;

                            if (gasEstimation > gasLimit) {
                                return callback('Gas required exceeds limit: ' + gasLimit + '. ' + warnEstimation);
                            }

                            if (gasEstimation > blockGasLimit) {
                                return callback('Gas required exceeds block gas limit: ' + gasLimit + '. ' + warnEstimation);
                            }
                        });
                    });
                }

            }

            exports.TxRunnerWeb3 = TxRunnerWeb3;

            function tryTillReceiptAvailable(txhash, web3) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    try {
                        const receipt = yield web3.eth.getTransactionReceipt(txhash);
                        if (receipt) {
                            return receipt;
                        }
                    } catch (e) {
                    }

                    yield pause();
                    return yield tryTillReceiptAvailable(txhash, web3);
                });
            }

            function tryTillTxAvailable(txhash, web3) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    try {
                        const tx = yield web3.eth.getTransaction(txhash);
                        if (tx && tx.blockHash) {
                            return tx;
                        }
                    } catch (e) {
                    }

                    return yield tryTillTxAvailable(txhash, web3);
                });
            }

            function pause() {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    return new Promise((resolve, reject) => {
                        setTimeout(resolve, 500);
                    });
                });
            }

            /***/
        }),

        /***/ 1544:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.resultToRemixTx = void 0;

                const ethereumjs_util_1 = __webpack_require__(493);

                const ethjs_util_1 = __webpack_require__(1545);

                function convertToPrefixedHex(input) {
                    if (input === undefined || input === null || (0, ethjs_util_1.isHexString)(input)) {
                        return input;
                    } else if (Buffer.isBuffer(input)) {
                        return (0, ethereumjs_util_1.bufferToHex)(input);
                    }

                    return '0x' + input.toString(16);
                }

                /*
 txResult.result can be 3 different things:
 - VM call or tx: ethereumjs-vm result object
 - Node transaction: object returned from eth.getTransactionReceipt()
 - Node call: return value from function call (not an object)

 Also, VM results use BN and Buffers, Node results use hex strings/ints,
 So we need to normalize the values to prefixed hex strings
*/


                function resultToRemixTx(txResult, execResult) {
                    const {
                        receipt,
                        transactionHash,
                        result
                    } = txResult;
                    const {
                        status,
                        gasUsed,
                        contractAddress
                    } = receipt;
                    let returnValue, errorMessage;

                    if ((0, ethjs_util_1.isHexString)(result)) {
                        returnValue = result;
                    } else if (execResult !== undefined) {
                        returnValue = execResult.returnValue;
                        errorMessage = execResult.exceptionError;
                    }

                    return {
                        transactionHash,
                        status,
                        gasUsed: convertToPrefixedHex(gasUsed),
                        error: errorMessage,
                        return: convertToPrefixedHex(returnValue),
                        createdAddress: convertToPrefixedHex(contractAddress)
                    };
                }

                exports.resultToRemixTx = resultToRemixTx;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1546:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.CopyToClipboard = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(666));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _copyToClipboard = _interopRequireDefault(__webpack_require__(1547));

            var _reactBootstrap = __webpack_require__(860);

            __webpack_require__(1550);

            var _jsxRuntime = __webpack_require__(21);

            const _excluded = ["content", "tip", "icon", "direction", "children", "getContent"];

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const CopyToClipboard = props => {
                let {
                        content,
                        tip = 'Copy',
                        icon = 'fa-copy',
                        direction = 'right',
                        children,
                        getContent
                    } = props,
                    otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
                const [message, setMessage] = (0, _react.useState)(tip);

                const copyData = () => {
                    try {
                        if (content === '') {
                            setMessage('Cannot copy empty content!');
                            return;
                        }

                        if (typeof content !== 'string') {
                            content = JSON.stringify(content, null, '\t');
                        }

                        (0, _copyToClipboard.default)(content);
                        setMessage('Copied');
                    } catch (e) {
                        console.error(e);
                    }
                };

                const handleClick = e => {
                    if (content) {
                        // module `copy` keeps last copied thing in the memory, so don't show tooltip if nothing is copied, because nothing was added to memory
                        copyData();
                    } else {
                        content = getContent && getContent();
                        copyData();
                    }

                    e.preventDefault();
                };

                const reset = () => {
                    setTimeout(() => setMessage(tip), 500);
                };

                return (
                    /*#__PURE__*/
                    // eslint-disable-next-line jsx-a11y/anchor-is-valid
                    (0, _jsxRuntime.jsx)("a", {
                        href: "#",
                        onClick: handleClick,
                        onMouseLeave: reset,
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.OverlayTrigger, {
                            placement: direction,
                            overlay: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.Tooltip, {
                                id: "overlay-tooltip",
                                children: message
                            }),
                            children: children || /*#__PURE__*/(0, _jsxRuntime.jsx)("i", _objectSpread({
                                className: `far ${icon} ml-1 p-2`,
                                "aria-hidden": "true"
                            }, otherProps))
                        })
                    })
                );
            };

            exports.CopyToClipboard = CopyToClipboard;
            var _default = CopyToClipboard;
            exports.default = _default;

            /***/
        }),

        /***/ 1550:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1551);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1551:
        /***/ (function (module, exports) {

            module.exports = [[module.i, ".copyIcon {\n    margin-left: 5px;\n    cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcHktdG8tY2xpcGJvYXJkLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixlQUFlO0FBQ25CIiwiZmlsZSI6ImNvcHktdG8tY2xpcGJvYXJkLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb3B5SWNvbiB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59Il19 */", '', '']]

            /***/
        }),

        /***/ 1552:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.InstanceContainerUI = InstanceContainerUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _universalDappUI = __webpack_require__(1553);

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function InstanceContainerUI(props) {
                const {
                    instanceList
                } = props.instances;

                const clearInstance = () => {
                    props.clearInstances();
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_instanceContainer border-0 list-group-item",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "d-flex justify-content-between align-items-center pl-2 ml-1 mb-2",
                        title: "Autogenerated generic user interfaces for interaction with deployed contracts",
                        children: [
                            "Deployed Contracts", instanceList.length > 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: "mr-2 udapp_icon far fa-trash-alt",
                                "data-id": "deployAndRunClearInstances",
                                onClick: clearInstance,
                                title: "Clear instances list and reset recorder",
                                "aria-hidden": "true"
                            }) : null
                        ]
                    }), instanceList.length > 0 ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [
                            " ", props.instances.instanceList.map((instance, index) => {
                                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_universalDappUI.UniversalDappUI, {
                                    instance: instance,
                                    context: props.getContext(),
                                    removeInstance: props.removeInstance,
                                    index: index,
                                    gasEstimationPrompt: props.gasEstimationPrompt,
                                    logBuilder: props.logBuilder,
                                    passphrasePrompt: props.passphrasePrompt,
                                    mainnetPrompt: props.mainnetPrompt,
                                    runTransactions: props.runTransactions,
                                    sendValue: props.sendValue,
                                    getFuncABIInputs: props.getFuncABIInputs
                                }, index);
                            })
                        ]
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        className: "mx-2 mt-3 alert alert-warning",
                        "data-id": "deployAndRunNoInstanceText",
                        role: "alert",
                        children: "Currently you have no contract instances to interact with."
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1553:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.UniversalDappUI = UniversalDappUI;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _clipboard = __webpack_require__(574);

            var remixLib = _interopRequireWildcard(__webpack_require__(508));

            var ethJSUtil = _interopRequireWildcard(__webpack_require__(493));

            var _contractGUI = __webpack_require__(887);

            var _treeView = __webpack_require__(599);

            var _helper = __webpack_require__(543);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            const txHelper = remixLib.execution.txHelper;

            function UniversalDappUI(props) {
                const [toggleExpander, setToggleExpander] = (0, _react.useState)(true);
                const [contractABI, setContractABI] = (0, _react.useState)(null);
                const [address, setAddress] = (0, _react.useState)('');
                const [expandPath, setExpandPath] = (0, _react.useState)([]);
                const [llIError, setLlIError] = (0, _react.useState)('');
                const [calldataValue, setCalldataValue] = (0, _react.useState)('');
                const [evmBC, setEvmBC] = (0, _react.useState)(null);
                (0, _react.useEffect)(() => {
                    if (!props.instance.abi) {
                        const abi = txHelper.sortAbiFunction(props.instance.contractData.abi);
                        setContractABI(abi);
                    } else {
                        setContractABI(props.instance.abi);
                    }
                }, [props.instance.abi]);
                (0, _react.useEffect)(() => {
                    if (props.instance.address) {
                        // @ts-ignore
                        let address = (props.instance.address.slice(0, 2) === '0x' ? '' : '0x') + props.instance.address.toString('hex');
                        address = ethJSUtil.toChecksumAddress(address);
                        setAddress(address);
                    }
                }, [props.instance.address]);
                (0, _react.useEffect)(() => {
                    if (props.instance.contractData) {
                        setEvmBC(props.instance.contractData.bytecodeObject);
                    }
                }, [props.instance.contractData]);

                const sendData = () => {
                    setLlIError('');
                    const fallback = txHelper.getFallbackInterface(contractABI);
                    const receive = txHelper.getReceiveInterface(contractABI);
                    const args = {
                        funcABI: fallback || receive,
                        address: address,
                        contractName: props.instance.name,
                        contractABI: contractABI
                    };
                    const amount = props.sendValue;

                    if (amount !== '0') {
                        // check for numeric and receive/fallback
                        if (!(0, _helper.isNumeric)(amount)) {
                            return setLlIError('Value to send should be a number');
                        } else if (!receive && !(fallback && fallback.stateMutability === 'payable')) {
                            return setLlIError("In order to receive Ether transfer the contract should have either 'receive' or payable 'fallback' function");
                        }
                    }

                    let calldata = calldataValue;

                    if (calldata) {
                        if (calldata.length < 4 && (0, _helper.is0XPrefixed)(calldata)) {
                            return setLlIError('The calldata should be a valid hexadecimal value with size of at least one byte.');
                        } else {
                            if ((0, _helper.is0XPrefixed)(calldata)) {
                                calldata = calldata.substr(2, calldata.length);
                            }

                            if (!(0, _helper.isHexadecimal)(calldata)) {
                                return setLlIError('The calldata should be a valid hexadecimal value.');
                            }
                        }

                        if (!fallback) {
                            return setLlIError("'Fallback' function is not defined");
                        }
                    }

                    if (!receive && !fallback) {
                        return setLlIError('Both \'receive\' and \'fallback\' functions are not defined');
                    } // we have to put the right function ABI:
                    // if receive is defined and that there is no calldata => receive function is called
                    // if fallback is defined => fallback function is called

                    if (receive && !calldata) {
                        args.funcABI = receive;
                    } else if (fallback) {
                        args.funcABI = fallback;
                    }
                    if (!args.funcABI) {
                        return setLlIError('Please define a \'Fallback\' function to send calldata and a either \'Receive\' or payable \'Fallback\' to send ethers');
                    }
                    runTransaction(false, args.funcABI, null, calldataValue);
                };

                const toggleClass = () => {
                    setToggleExpander(!toggleExpander);
                };

                const remove = () => {
                    props.removeInstance(props.index);
                };

                const runTransaction = (lookupOnly, funcABI, valArr, inputsValues, funcIndex) => {
                    const functionName = funcABI.type === 'function' ? funcABI.name : `(${funcABI.type})`;
                    const logMsg = `${lookupOnly ? 'call' : 'transact'} to ${props.instance.name}.${functionName}`;
                    props.runTransactions(props.index, lookupOnly, funcABI, inputsValues, props.instance.name, contractABI, props.instance.contractData, address, logMsg, props.logBuilder, props.mainnetPrompt, props.gasEstimationPrompt, props.passphrasePrompt, funcIndex);
                };

                const extractDataDefault = (item, parent) => {
                    const ret = {};

                    if (ethJSUtil.BN.isBN(item)) {
                        ret.self = item.toString(10);
                        ret.children = [];
                    } else {
                        if (item instanceof Array) {
                            ret.children = item.map((item, index) => {
                                return {
                                    key: index,
                                    value: item
                                };
                            });
                            ret.self = 'Array';
                            ret.isNode = true;
                            ret.isLeaf = false;
                        } else if (item instanceof Object) {
                            ret.children = Object.keys(item).map(key => {
                                return {
                                    key: key,
                                    value: item[key]
                                };
                            });
                            ret.self = 'Object';
                            ret.isNode = true;
                            ret.isLeaf = false;
                        } else {
                            ret.self = item;
                            ret.children = null;
                            ret.isNode = false;
                            ret.isLeaf = true;
                        }
                    }

                    return ret;
                };

                const handleExpand = path => {
                    if (expandPath.includes(path)) {
                        const filteredPath = expandPath.filter(value => value !== path);
                        setExpandPath(filteredPath);
                    } else {
                        setExpandPath([...expandPath, path]);
                    }
                };

                const handleCalldataChange = e => {
                    const value = e.target.value;
                    setCalldataValue(value);
                };

                const label = (key, value) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "d-flex mt-2 flex-row label_item",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                            className: "small font-weight-bold mb-0 pr-1 label_key",
                            children: [key, ":"]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                            className: "m-0 label_value",
                            children: value
                        })
                        ]
                    });
                };

                const renderData = (item, parent, key, keyPath) => {
                    const data = extractDataDefault(item, parent);
                    const children = (data.children || []).map(child => {
                        return renderData(child.value, data, child.key, keyPath + '/' + child.key);
                    });

                    if (children && children.length > 0) {
                        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                            id: `treeViewItem${key}`,
                            label: label(key, data.self),
                            onClick: () => handleExpand(keyPath),
                            expand: expandPath.includes(keyPath),
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                id: `treeView${key}`,
                                children: children
                            }, keyPath)
                        }, keyPath);
                    } else {
                        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                            id: key.toString(),
                            label: label(key, data.self),
                            onClick: () => handleExpand(keyPath),
                            expand: expandPath.includes(keyPath)
                        }, keyPath);
                    }
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: `instance udapp_instance udapp_run-instance border-dark ${toggleExpander ? 'udapp_hidesub' : 'bg-light'}`,
                    id: `instance${address}`,
                    "data-shared": "universalDappUiInstance",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_title alert alert-secondary",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                            "data-id": `universalDappUiTitleExpander${props.index}`,
                            className: "btn udapp_titleExpander",
                            onClick: toggleClass,
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: `fas ${toggleExpander ? 'fa-angle-right' : 'fa-angle-down'}`,
                                "aria-hidden": "true"
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "input-group udapp_nameNbuts",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "udapp_titleText input-group-prepend",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                    className: "input-group-text udapp_spanTitleText",
                                    children: [props.instance.name, " at ", (0, _helper.shortenAddress)(address), " (", props.context, ")"]
                                })
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "btn-group",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                    className: "btn p-1 btn-secondary",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                        content: address,
                                        direction: 'top'
                                    })
                                })
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                            className: "udapp_udappClose mr-1 p-1 btn btn-secondary align-items-center",
                            "data-id": "universalDappUiUdappClose",
                            onClick: remove,
                            title: "Remove from the list",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: "udapp_closeIcon fas fa-times",
                                "aria-hidden": "true"
                            })
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_cActionsWrapper",
                        "data-id": "universalDappUiContractActionWrapper",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "udapp_contractActionsContainer",
                            children: contractABI && contractABI.map((funcABI, index) => {
                                if (funcABI.type !== 'function') {
                                    return null;
                                }
                                const isConstant = funcABI.constant !== undefined ? funcABI.constant : false;
                                const lookupOnly = funcABI.stateMutability === 'view' || funcABI.stateMutability === 'pure' || isConstant;
                                const inputs = props.getFuncABIInputs(funcABI);
                                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_contractGUI.ContractGUI, {
                                        funcABI: funcABI,
                                        clickCallBack: (valArray, inputsValues) => {
                                            runTransaction(lookupOnly, funcABI, valArray, inputsValues, index);
                                        },
                                        inputs: inputs,
                                        evmBC: evmBC,
                                        lookupOnly: lookupOnly
                                    }, index), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "udapp_value",
                                        "data-id": "udapp_value",
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                            id: "treeView",
                                            children: Object.keys(props.instance.decodedResponse || {}).map(key => {
                                                const funcIndex = index.toString();
                                                const response = props.instance.decodedResponse[key];
                                                return key === funcIndex ? Object.keys(response || {}).map(innerkey => {
                                                    return renderData(props.instance.decodedResponse[key][innerkey], response, innerkey, innerkey);
                                                }) : null;
                                            })
                                        })
                                    })
                                    ]
                                });
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex flex-column",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex flex-row justify-content-between mt-2",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "py-2 border-top d-flex justify-content-start flex-grow-1",
                                    children: "Low level interactions"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                    href: "https://solidity.readthedocs.io/en/v0.6.2/contracts.html#receive-ether-function",
                                    title: "check out docs for using 'receive'/'fallback'",
                                    target: "_blank",
                                    rel: "noreferrer",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        "aria-hidden": "true",
                                        className: "fas fa-info my-2 mr-1"
                                    })
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex flex-column align-items-start",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "",
                                    children: "CALLDATA"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex justify-content-end w-100 align-items-center",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        id: "deployAndRunLLTxCalldata",
                                        onChange: handleCalldataChange,
                                        className: "udapp_calldataInput form-control",
                                        title: "The Calldata to send to fallback function of the contract."
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                        id: "deployAndRunLLTxSendTransaction",
                                        "data-id": "pluginManagerSettingsDeployAndRunLLTxSendTransaction",
                                        className: "udapp_instanceButton p-0 w-50 btn border-warning text-warning",
                                        title: "Send data to contract.",
                                        onClick: sendData,
                                        children: "Transact"
                                    })
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    id: "deployAndRunLLTxError",
                                    className: "text-danger my-2",
                                    children: llIError
                                })
                            })
                            ]
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1554:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.TreeViewItem = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(666));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(1555);

            var _jsxRuntime = __webpack_require__(21);

            const _excluded = ["id", "children", "label", "labelClass", "expand", "iconX", "iconY", "icon", "controlBehaviour", "innerRef", "showIcon"];

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const TreeViewItem = props => {
                const {
                        id,
                        children,
                        label,
                        labelClass,
                        expand,
                        iconX = 'fas fa-caret-right',
                        iconY = 'fas fa-caret-down',
                        icon,
                        controlBehaviour = false,
                        innerRef,
                        showIcon = true
                    } = props,
                    otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
                const [isExpanded, setIsExpanded] = (0, _react.useState)(false);
                (0, _react.useEffect)(() => {
                    setIsExpanded(expand);
                }, [expand]);
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("li", _objectSpread(_objectSpread({
                    ref: innerRef,
                    "data-id": `treeViewLi${id}`,
                    className: "li_tv"
                }, otherProps), {}, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        "data-id": `treeViewDiv${id}`,
                        className: `d-flex flex-row align-items-center ${labelClass}`,
                        onClick: () => !controlBehaviour && setIsExpanded(!isExpanded),
                        children: [
                            children && showIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: isExpanded ? `px-1 ${iconY} caret caret_tv` : `px-1 ${iconX} caret caret_tv`,
                                style: {
                                    visibility: children ? 'visible' : 'hidden'
                                }
                            }) : icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: `pr-3 pl-1 ${icon} caret caret_tv`
                            }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "w-100 pl-1",
                                children: label
                            })
                        ]
                    }, `treeViewDiv${id}`), isExpanded ? children : null
                    ]
                }), `treeViewLi${id}`);
            };

            exports.TreeViewItem = TreeViewItem;
            var _default = TreeViewItem;
            exports.default = _default;

            /***/
        }),

        /***/ 1555:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1556);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1556:
        /***/ (function (module, exports) {

            module.exports = [[module.i, "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0cmVlLXZpZXctaXRlbS5jc3MifQ== */", '', '']]

            /***/
        }),

        /***/ 1557:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.TreeView = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(666));

            var _react = _interopRequireDefault(__webpack_require__(13));

            __webpack_require__(1558);

            var _jsxRuntime = __webpack_require__(21);

            const _excluded = ["children", "id"];

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const TreeView = props => {
                const {
                        children,
                        id
                    } = props,
                    otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("ul", _objectSpread(_objectSpread({
                    "data-id": `treeViewUl${id}`,
                    className: "ul_tv ml-0 px-2"
                }, otherProps), {}, {
                    children: children
                }));
            };

            exports.TreeView = TreeView;
            var _default = TreeView;
            exports.default = _default;

            /***/
        }),

        /***/ 1558:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1559);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1559:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".li_tv {\n    list-style-type: none;\n    -webkit-margin-before: 0px;\n    -webkit-margin-after: 0px;\n    -webkit-margin-start: 0px;\n    -webkit-margin-end: 0px;\n    -webkit-padding-start: 0px;\n  }\n  .ul_tv {\n    list-style-type: none;\n    -webkit-margin-before: 0px;\n    -webkit-margin-after: 0px;\n    -webkit-margin-start: 0px;\n    -webkit-margin-end: 0px;\n    -webkit-padding-start: 0px;\n  }\n  .caret_tv {\n    width: 10px;\n    flex-shrink: 0;\n    padding-right: 5px;\n  }\n  .label_item {\n    word-break: break-all;\n  }\n  .label_key {\n    min-width: -webkit-max-content;\n    min-width: -moz-max-content;\n    min-width: max-content;\n    max-width: 80%;\n    word-break: break-word;\n  }\n  .label_value {\n    min-width: 10%;\n  }\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbWl4LXVpLXRyZWUtdmlldy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxxQkFBcUI7SUFDckIsMEJBQTBCO0lBQzFCLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsdUJBQXVCO0lBQ3ZCLDBCQUEwQjtFQUM1QjtFQUNBO0lBQ0UscUJBQXFCO0lBQ3JCLDBCQUEwQjtJQUMxQix5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLHVCQUF1QjtJQUN2QiwwQkFBMEI7RUFDNUI7RUFDQTtJQUNFLFdBQVc7SUFDWCxjQUFjO0lBQ2Qsa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxxQkFBcUI7RUFDdkI7RUFDQTtJQUNFLDhCQUFzQjtJQUF0QiwyQkFBc0I7SUFBdEIsc0JBQXNCO0lBQ3RCLGNBQWM7SUFDZCxzQkFBc0I7RUFDeEI7RUFDQTtJQUNFLGNBQWM7RUFDaEIiLCJmaWxlIjoicmVtaXgtdWktdHJlZS12aWV3LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5saV90diB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIC13ZWJraXQtbWFyZ2luLWJlZm9yZTogMHB4O1xuICAgIC13ZWJraXQtbWFyZ2luLWFmdGVyOiAwcHg7XG4gICAgLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDBweDtcbiAgICAtd2Via2l0LW1hcmdpbi1lbmQ6IDBweDtcbiAgICAtd2Via2l0LXBhZGRpbmctc3RhcnQ6IDBweDtcbiAgfVxuICAudWxfdHYge1xuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAtd2Via2l0LW1hcmdpbi1iZWZvcmU6IDBweDtcbiAgICAtd2Via2l0LW1hcmdpbi1hZnRlcjogMHB4O1xuICAgIC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwcHg7XG4gICAgLXdlYmtpdC1tYXJnaW4tZW5kOiAwcHg7XG4gICAgLXdlYmtpdC1wYWRkaW5nLXN0YXJ0OiAwcHg7XG4gIH1cbiAgLmNhcmV0X3R2IHtcbiAgICB3aWR0aDogMTBweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XG4gIH1cbiAgLmxhYmVsX2l0ZW0ge1xuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgfVxuICAubGFiZWxfa2V5IHtcbiAgICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xuICAgIG1heC13aWR0aDogODAlO1xuICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLmxhYmVsX3ZhbHVlIHtcbiAgICBtaW4td2lkdGg6IDEwJTtcbiAgfSJdfQ== */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 1560:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.shortenAddress = exports.joinPath = exports.isNumeric = exports.isHexadecimal = exports.is0XPrefixed = exports.getPathIcon = exports.extractParentFromKey = exports.extractNameFromKey = exports.createNonClashingNameAsync = exports.checkSpecialChars = exports.checkSlash = exports.addressToString = void 0;

            var ethJSUtil = _interopRequireWildcard(__webpack_require__(493));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            const extractNameFromKey = key => {
                if (!key) {
                    return;
                }
                const keyPath = key.split('/');
                return keyPath[keyPath.length - 1];
            };

            exports.extractNameFromKey = extractNameFromKey;

            const extractParentFromKey = key => {
                if (!key) {
                    return;
                }
                const keyPath = key.split('/');
                keyPath.pop();
                return keyPath.join('/');
            };

            exports.extractParentFromKey = extractParentFromKey;

            const checkSpecialChars = name => {
                return name.match(/[:*?"<>\\'|]/) != null;
            };

            exports.checkSpecialChars = checkSpecialChars;

            const checkSlash = name => {
                return name.match(/\//) != null;
            };

            exports.checkSlash = checkSlash;

            const createNonClashingNameAsync = async (name, fileManager, prefix = '') => {
                if (!name) {
                    name = 'Undefined';
                }

                let _counter;

                let ext = 'sol';
                const reg = /(.*)\.([^.]+)/g;
                const split = reg.exec(name);

                if (split) {
                    name = split[1];
                    ext = split[2];
                }

                let exist = true;

                do {
                    const isDuplicate = await fileManager.exists(name + (_counter || '') + prefix + '.' + ext);
                    if (isDuplicate) {
                        _counter = (_counter || 0) + 1;
                    } else {
                        exist = false;
                    }
                } while (exist);

                const counter = _counter || '';
                return name + counter + prefix + '.' + ext;
            };

            exports.createNonClashingNameAsync = createNonClashingNameAsync;

            const joinPath = (...paths) => {
                paths = paths.filter(value => value !== '').map(path => path.replace(/^\/|\/$/g, '')); // remove first and last slash)

                if (paths.length === 1) {
                    return paths[0];
                }
                return paths.join('/');
            };

            exports.joinPath = joinPath;

            const getPathIcon = path => {
                return path.endsWith('.txt') ? 'far fa-file-alt' : path.endsWith('.md') ? 'far fa-file-alt' : path.endsWith('.sol') ? 'fak fa-solidity-mono' : path.endsWith('.js') ? 'fab fa-js' : path.endsWith('.json') ? 'fas fa-brackets-curly' : path.endsWith('.vy') ? 'fak fa-vyper-mono' : path.endsWith('.lex') ? 'fak fa-lexon' : path.endsWith('.contract') ? 'fab fa-ethereum' : path.endsWith('.cairo') ? 'fab fa-ethereum' : 'far fa-file'; // TODO: add cairo icon
            };

            exports.getPathIcon = getPathIcon;

            const isNumeric = value => {
                return /^\+?(0|[1-9]\d*)$/.test(value);
            };

            exports.isNumeric = isNumeric;

            const shortenAddress = (address, etherBalance) => {
                const len = address.length;
                return address.slice(0, 5) + '...' + address.slice(len - 5, len) + (etherBalance ? ' (' + etherBalance.toString() + ' ether)' : '');
            };

            exports.shortenAddress = shortenAddress;

            const addressToString = address => {
                if (!address) {
                    return null;
                }

                if (typeof address !== 'string') {
                    address = address.toString('hex');
                }

                if (address.indexOf('0x') === -1) {
                    address = '0x' + address;
                }

                return ethJSUtil.toChecksumAddress(address);
            };

            exports.addressToString = addressToString;

            const is0XPrefixed = value => {
                return value.substr(0, 2) === '0x';
            };

            exports.is0XPrefixed = is0XPrefixed;

            const isHexadecimal = value => {
                return /^[0-9a-fA-F]+$/.test(value) && value.length % 2 === 0;
            };

            exports.isHexadecimal = isHexadecimal;

            /***/
        }),

        /***/ 1561:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.web3Dialog = exports.sourceVerificationNotAvailableToastMsg = exports.notFoundToastMsg = exports.localCompilationToastMsg = exports.fileChangedToastMsg = exports.envChangeNotification = exports.compilingToastMsg = exports.compilerConfigChangedToastMsg = exports.compileToastMsg = exports.compilationFinishedToastMsg = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _web3Dialog = __webpack_require__(1562);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {default: obj};
            }

            const fileChangedToastMsg = (from, path) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("i", {
                className: "fas fa-exclamation-triangle text-danger mr-1"
            }), /*#__PURE__*/_react.default.createElement("span", null, from, " ", /*#__PURE__*/_react.default.createElement("span", {
                className: "font-weight-bold text-warning"
            }, "is modifying"), " ", path));

            exports.fileChangedToastMsg = fileChangedToastMsg;

            const compilerConfigChangedToastMsg = (from, value) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, from), " is updating the ", /*#__PURE__*/_react.default.createElement("b", null, "Solidity compiler configuration"), ".", /*#__PURE__*/_react.default.createElement("pre", {
                className: "text-left"
            }, value));

            exports.compilerConfigChangedToastMsg = compilerConfigChangedToastMsg;

            const compileToastMsg = (from, fileName) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, from), " is requiring to compile ", /*#__PURE__*/_react.default.createElement("b", null, fileName));

            exports.compileToastMsg = compileToastMsg;

            const compilingToastMsg = settings => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, "Recompiling and debugging with params"), /*#__PURE__*/_react.default.createElement("pre", {
                className: "text-left"
            }, settings));

            exports.compilingToastMsg = compilingToastMsg;

            const compilationFinishedToastMsg = () => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, "Compilation failed..."), " continuing ", /*#__PURE__*/_react.default.createElement("i", null, "without"), " source code debugging.");

            exports.compilationFinishedToastMsg = compilationFinishedToastMsg;

            const notFoundToastMsg = address => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, "Contract ", address, " not found in source code repository"), " continuing ", /*#__PURE__*/_react.default.createElement("i", null, "without"), " source code debugging.");

            exports.notFoundToastMsg = notFoundToastMsg;

            const localCompilationToastMsg = () => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, "Using compilation result from Solidity module"));

            exports.localCompilationToastMsg = localCompilationToastMsg;

            const sourceVerificationNotAvailableToastMsg = () => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("b", null, "Source verification plugin not activated or not available."), " continuing ", /*#__PURE__*/_react.default.createElement("i", null, "without"), " source code debugging.");

            exports.sourceVerificationNotAvailableToastMsg = sourceVerificationNotAvailableToastMsg;

            const web3Dialog = (externalEndpoint, setWeb3Endpoint) => /*#__PURE__*/_react.default.createElement(_web3Dialog.Web3ProviderDialog, {
                externalEndpoint: externalEndpoint,
                setWeb3Endpoint: setWeb3Endpoint
            });

            exports.web3Dialog = web3Dialog;

            const envChangeNotification = (env, from) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("i", {
                className: "fas fa-exclamation-triangle text-danger mr-1"
            }), /*#__PURE__*/_react.default.createElement("span", null, from + ' ', /*#__PURE__*/_react.default.createElement("span", {
                className: "font-weight-bold text-warning"
            }, "is changing your environment to"), " ", env && env.context));

            exports.envChangeNotification = envChangeNotification;

            /***/
        }),

        /***/ 1562:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Web3ProviderDialog = Web3ProviderDialog;

            var _react = _interopRequireDefault(__webpack_require__(13));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {default: obj};
            }

            // eslint-disable-next-line no-use-before-define
            const thePath = '<path/to/local/folder/for/test/chain>';

            function Web3ProviderDialog(props) {
                const handleInputEndpoint = e => {
                    props.setWeb3Endpoint(e.target.value);
                };

                return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
                    className: ""
                }, "Note: To use Geth & https://remix.ethereum.org, configure it to allow requests from Remix:(see ", /*#__PURE__*/_react.default.createElement("a", {
                    href: "https://geth.ethereum.org/docs/rpc/server",
                    target: "_blank",
                    rel: "noreferrer"
                }, "Geth Docs on rpc server"), ")", /*#__PURE__*/_react.default.createElement("div", {
                    className: "border p-1"
                }, "geth --http --http.corsdomain https://remix.ethereum.org"), /*#__PURE__*/_react.default.createElement("br", null), "To run Remix & a local Geth test node, use this command: (see ", /*#__PURE__*/_react.default.createElement("a", {
                    href: "https://geth.ethereum.org/getting-started/dev-mode",
                    target: "_blank",
                    rel: "noreferrer"
                }, "Geth Docs on Dev mode"), ")", /*#__PURE__*/_react.default.createElement("div", {
                    className: "border p-1"
                }, "geth --http --http.corsdomain=\"", window.origin, "\" --http.api web3,eth,debug,personal,net --vmdebug --datadir ", thePath, " --dev console"), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("b", null, "WARNING:"), " It is not safe to use the --http.corsdomain flag with a wildcard: ", /*#__PURE__*/_react.default.createElement("b", null, "--http.corsdomain *"), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), "For more info: ", /*#__PURE__*/_react.default.createElement("a", {
                    href: "https://remix-ide.readthedocs.io/en/latest/run.html#more-about-web3-provider",
                    target: "_blank",
                    rel: "noreferrer"
                }, "Remix Docs on Web3 Provider"), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), "Web3 Provider Endpoint"), /*#__PURE__*/_react.default.createElement("input", {
                    onInput: handleInputEndpoint,
                    type: "text",
                    name: "prompt_text",
                    id: "prompt_text",
                    style: {
                        width: '100%'
                    },
                    className: "form-control",
                    defaultValue: props.externalEndpoint,
                    "data-id": "modalDialogCustomPromptText"
                }));
            }

            /***/
        }),

        /***/ 1563:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RecorderUI = RecorderUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _treeView = __webpack_require__(599);

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function RecorderUI(props) {
                const card = (title, recorderCount) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "d-flex justify-content-between align-items-center",
                        onClick: () => {
                        },
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "pr-1 d-flex flex-row",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: title
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "d-flex flex-column",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "ml-2 badge badge-pill badge-primary",
                                        title: "The number of recorded transactions",
                                        children: recorderCount
                                    })
                                })
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                    className: "udapp_arrow fas fa-angle-down",
                                    "data-id": "udapp_arrow"
                                })
                            })
                        })
                        ]
                    });
                };

                const triggerRecordButton = () => {
                    props.storeScenario(props.scenarioPrompt);
                };

                const handleClickRunButton = () => {
                    props.runCurrentScenario(props.gasEstimationPrompt, props.passphrasePrompt, props.mainnetPrompt, props.logBuilder);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "udapp_cardContainer list-group-item border-0",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                            label: card('Transactions recorded', props.count),
                            showIcon: false,
                            labelClass: "ml-n1",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex flex-column",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "udapp_recorderDescription mt-2",
                                    children: "All transactions (deployed contracts and function executions) in this environment can be saved and replayed in another environment. e.g Transactions created in Javascript VM can be replayed in the Injected Web3."
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "udapp_transactionActions",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        className: "fas fa-save savetransaction udapp_recorder udapp_icon",
                                        onClick: triggerRecordButton,
                                        title: "Save Transactions",
                                        "aria-hidden": "true"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        className: "fas fa-play runtransaction udapp_runTxs udapp_icon",
                                        title: "Run Transactions",
                                        "data-id": "runtransaction",
                                        "aria-hidden": "true",
                                        onClick: handleClickRunButton
                                    })
                                    ]
                                })
                                ]
                            })
                        })
                    })
                });
            }

            /***/
        }),

        /***/ 1564:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SettingsUI = SettingsUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _environment = __webpack_require__(1565);

            var _network = __webpack_require__(1566);

            var _account = __webpack_require__(1567);

            var _gasPrice = __webpack_require__(1568);

            var _value = __webpack_require__(1569);

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function SettingsUI(props) {
                //   this._deps.config.events.on('settings/personal-mode_changed', this.onPersonalChange.bind(this))
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_settings",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_environment.EnvironmentUI, {
                        selectedEnv: props.selectExEnv,
                        providers: props.providers,
                        setExecutionContext: props.setExecutionContext
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_network.NetworkUI, {
                        networkName: props.networkName
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_account.AccountUI, {
                        personalMode: props.personalMode,
                        selectExEnv: props.selectExEnv,
                        accounts: props.accounts,
                        setAccount: props.setAccount,
                        createNewBlockchainAccount: props.createNewBlockchainAccount,
                        setPassphrase: props.setPassphrase,
                        setMatchPassphrase: props.setMatchPassphrase,
                        tooltip: props.tooltip,
                        modal: props.modal,
                        signMessageWithAddress: props.signMessageWithAddress,
                        passphrase: props.passphrase
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_gasPrice.GasPriceUI, {
                        gasLimit: props.gasLimit,
                        setGasFee: props.setGasFee
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.ValueUI, {
                        setUnit: props.setUnit,
                        sendValue: props.sendValue,
                        sendUnit: props.sendUnit,
                        setSendValue: props.setSendValue
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1565:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.EnvironmentUI = EnvironmentUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function EnvironmentUI(props) {
                const handleChangeExEnv = env => {
                    const provider = props.providers.providerList.find(exEnv => exEnv.value === env);
                    const fork = provider.fork; // can be undefined if connected to an external source (web3 provider / injected)

                    let context = provider.value;
                    context = context.startsWith('vm') ? 'vm' : context; // context has to be 'vm', 'web3' or 'injected'

                    props.setExecutionContext({
                        context,
                        fork
                    });
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_crow",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                        id: "selectExEnv",
                        className: "udapp_settingsLabel",
                        children: "Environment"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_environment",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
                            id: "selectExEnvOptions",
                            "data-id": "settingsSelectEnvOptions",
                            className: "form-control udapp_select custom-select",
                            value: props.selectedEnv,
                            onChange: e => {
                                handleChangeExEnv(e.target.value);
                            },
                            children: props.providers.providerList.map((provider, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("option", {
                                id: provider.id,
                                "data-id": provider.dataId,
                                title: provider.title,
                                value: provider.value,
                                children: [" ", provider.content]
                            }, index))
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                            href: "https://remix-ide.readthedocs.io/en/latest/run.html#run-setup",
                            target: "_blank",
                            rel: "noreferrer",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: "udapp_infoDeployAction ml-2 fas fa-info",
                                title: "check out docs to setup Environment"
                            })
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1566:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.NetworkUI = NetworkUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function NetworkUI(props) {
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_crow",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "udapp_settingsLabel"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "udapp_environment",
                        "data-id": "settingsNetworkEnv",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            className: "udapp_network badge badge-secondary",
                            children: props.networkName
                        })
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1567:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.AccountUI = AccountUI;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _clipboard = __webpack_require__(574);

            var _passphrase = __webpack_require__(974);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            function AccountUI(props) {
                const {
                    selectedAccount,
                    loadedAccounts
                } = props.accounts;
                const accounts = Object.keys(loadedAccounts);
                const [plusOpt, setPlusOpt] = (0, _react.useState)({
                    classList: '',
                    title: ''
                });
                const messageRef = (0, _react.useRef)('');
                (0, _react.useEffect)(() => {
                    if (!selectedAccount && accounts.length > 0) {
                        props.setAccount(accounts[0]);
                    }
                }, [accounts, selectedAccount]);
                (0, _react.useEffect)(() => {

                    switch (props.selectExEnv) {
                        case 'injected':
                            setPlusOpt({
                                classList: 'udapp_disableMouseEvents',
                                title: "Unfortunately it's not possible to create an account using injected web3. Please create the account directly from your provider (i.e metamask or other of the same type)."
                            });
                            break;

                        case 'vm-london':
                            setPlusOpt({
                                classList: '',
                                title: 'Create a new account'
                            });
                            break;

                        case 'vm-berlin':
                            setPlusOpt({
                                classList: '',
                                title: 'Create a new account'
                            });
                            break;

                        case 'web3':
                            if (!props.personalMode) {
                                setPlusOpt({
                                    classList: 'disableMouseEvents',
                                    title: 'Creating an account is possible only in Personal mode. Please go to Settings to enable it.'
                                });
                            } else {
                                setPlusOpt({
                                    classList: '',
                                    title: 'Create a new account'
                                });
                            }

                            break;

                        default:
                            setPlusOpt({
                                classList: 'disableMouseEvents',
                                title: `Unfortunately it's not possible to create an account using an external wallet (${props.selectExEnv}).`
                            });
                    } // this._deps.config.get('settings/personal-mode')

                }, [props.selectExEnv, props.personalMode]);

                const newAccount = () => {
                    props.createNewBlockchainAccount(passphraseCreationPrompt());
                };

                const signMessage = () => {
                    if (!accounts[0]) {
                        return props.tooltip('Account list is empty, please make sure the current provider is properly connected to remix');
                    }

                    if (props.selectExEnv !== 'vm-london' && props.selectExEnv !== 'vm-berlin' && props.selectExEnv !== 'injected') {
                        return props.modal('Passphrase to sign a message', /*#__PURE__*/(0, _jsxRuntime.jsx)(_passphrase.PassphrasePrompt, {
                            message: "Enter your passphrase for this account to sign the message",
                            setPassphrase: props.setPassphrase
                        }), 'OK', () => {
                            props.modal('Sign a message', signMessagePrompt(), 'OK', () => {
                                props.signMessageWithAddress(selectedAccount, messageRef.current, signedMessagePrompt, props.passphrase);
                                props.setPassphrase('');
                            }, 'Cancel', null);
                        }, 'Cancel', () => {
                            props.setPassphrase('');
                        });
                    }

                    props.modal('Sign a message', signMessagePrompt(), 'OK', () => {
                        props.signMessageWithAddress(selectedAccount, messageRef.current, signedMessagePrompt);
                    }, 'Cancel', null);
                };

                const handlePassphrase = e => {
                    props.setPassphrase(e.target.value);
                };

                const handleMatchPassphrase = e => {
                    props.setMatchPassphrase(e.target.value);
                };

                const handleMessageInput = e => {
                    messageRef.current = e.target.value;
                };

                const passphraseCreationPrompt = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [
                            " Please provide a Passphrase for the account creation", /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    id: "prompt1",
                                    type: "password",
                                    name: "prompt_text",
                                    style: {
                                        width: '100%'
                                    },
                                    onInput: handlePassphrase
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    id: "prompt2",
                                    type: "password",
                                    name: "prompt_text",
                                    style: {
                                        width: '100%'
                                    },
                                    onInput: handleMatchPassphrase
                                })
                                ]
                            })
                        ]
                    });
                };

                const signMessagePrompt = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [
                            " Enter a message to sign", /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("textarea", {
                                    id: "prompt_text",
                                    "data-id": "signMessageTextarea",
                                    style: {
                                        width: '100%'
                                    },
                                    rows: 4,
                                    cols: 50,
                                    onInput: handleMessageInput,
                                    defaultValue: messageRef.current
                                })
                            })
                        ]
                    });
                };

                const signedMessagePrompt = (msgHash, signedData) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("b", {
                            children: "hash:"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            id: "remixRunSignMsgHash",
                            "data-id": "settingsRemixRunSignMsgHash",
                            children: msgHash
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("b", {
                            children: "signature:"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            id: "remixRunSignMsgSignature",
                            "data-id": "settingsRemixRunSignMsgSignature",
                            children: signedData
                        })
                        ]
                    });
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_crow",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                        className: "udapp_settingsLabel",
                        children: [
                            "Account", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                id: "remixRunPlusWraper",
                                title: plusOpt.title,
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                    id: "remixRunPlus",
                                    className: `fas fa-plus-circle udapp_icon ${plusOpt.classList}`,
                                    "aria-hidden": "true",
                                    onClick: newAccount
                                })
                            })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_account",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
                            id: "txorigin",
                            "data-id": "runTabSelectAccount",
                            name: "txorigin",
                            className: "form-control udapp_select custom-select pr-4",
                            value: selectedAccount,
                            onChange: e => {
                                props.setAccount(e.target.value);
                            },
                            children: accounts.map((value, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                value: value,
                                children: loadedAccounts[value]
                            }, index))
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            style: {
                                marginLeft: -5
                            },
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                content: selectedAccount,
                                direction: "top"
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                            id: "remixRunSignMsg",
                            "data-id": "settingsRemixRunSignMsg",
                            className: "mx-1 fas fa-edit udapp_icon",
                            "aria-hidden": "true",
                            onClick: signMessage,
                            title: "Sign a message using this account key"
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1568:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.GasPriceUI = GasPriceUI;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function GasPriceUI(props) {
                const handleGasLimit = e => {
                    props.setGasFee(e.target.value);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_crow",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                        className: "udapp_settingsLabel",
                        children: "Gas limit"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                        type: "number",
                        className: "form-control udapp_gasNval udapp_col2",
                        id: "gasLimit",
                        value: props.gasLimit,
                        onChange: handleGasLimit
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1569:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ValueUI = ValueUI;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _ethereumjsUtil = __webpack_require__(493);

            var _helper = __webpack_require__(543);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            function ValueUI(props) {
                const [sendValue, setSendValue] = (0, _react.useState)(props.sendValue);
                const inputValue = (0, _react.useRef)({});
                (0, _react.useEffect)(() => {
                    sendValue !== props.sendValue && props.setSendValue(sendValue);
                }, [sendValue]);

                const validateInputKey = e => {
                    // preventing not numeric keys
                    // preventing 000 case
                    if (!(0, _helper.isNumeric)(e.key) || e.key === '0' && !parseInt(inputValue.current.value) && inputValue.current.value.length > 0) {
                        e.preventDefault();
                    }
                };

                const validateValue = e => {
                    const value = e.target.value;

                    if (!value) {
                        // assign 0 if given value is
                        // - empty
                        return setSendValue('0');
                    }

                    let v;

                    try {
                        v = new _ethereumjsUtil.BN(value, 10);
                        setSendValue(v.toString(10));
                    } catch (e) {
                        // assign 0 if given value is
                        // - not valid (for ex 4345-54)
                        // - contains only '0's (for ex 0000) copy past or edit
                        setSendValue('0');
                    } // if giveen value is negative(possible with copy-pasting) set to 0


                    if (v.lt(0)) {
                        setSendValue('0');
                    }
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "udapp_crow",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                        className: "udapp_settingsLabel",
                        "data-id": "remixDRValueLabel",
                        children: "Value"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "udapp_gasValueContainer",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                            ref: inputValue,
                            type: "number",
                            min: "0",
                            pattern: "^[0-9]",
                            step: "1",
                            className: "form-control udapp_gasNval udapp_col2",
                            id: "value",
                            "data-id": "dandrValue",
                            title: "Enter the value and choose the unit",
                            onKeyPress: validateInputKey,
                            onChange: validateValue,
                            value: props.sendValue
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
                            name: "unit",
                            value: props.sendUnit,
                            className: "form-control p-1 udapp_gasNvalUnit udapp_col2_2 custom-select",
                            id: "unit",
                            onChange: e => {
                                props.setUnit(e.target.value);
                            },
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                "data-unit": "wei",
                                value: "wei",
                                children: "Wei"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                "data-unit": "gwei",
                                value: "gwei",
                                children: "Gwei"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                "data-unit": "finney",
                                value: "finney",
                                children: "Finney"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                "data-unit": "ether",
                                value: "ether",
                                children: "Ether"
                            })
                            ]
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1570:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.runTabReducer = exports.runTabInitialState = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const runTabInitialState = {
                accounts: {
                    loadedAccounts: {},
                    isRequesting: false,
                    isSuccessful: false,
                    error: null,
                    selectedAccount: ''
                },
                sendValue: '0',
                sendUnit: 'wei',
                gasLimit: 3000000,
                selectExEnv: 'vm-london',
                personalMode: false,
                networkName: 'VM',
                providers: {
                    providerList: [
                        {
                            id: 'vm-mode-london',
                            dataId: 'settingsVMLondonMode',
                            title: 'Execution environment does not connect to any node, everything is local and in memory only.',
                            value: 'vm-london',
                            fork: 'london',
                            content: 'JavaScript VM (London)'
                        }, {
                            id: 'vm-mode-berlin',
                            dataId: 'settingsVMBerlinMode',
                            title: 'Execution environment does not connect to any node, everything is local and in memory only.',
                            value: 'vm-berlin',
                            fork: 'berlin',
                            content: 'JavaScript VM (Berlin)'
                        }, {
                            id: 'injected-mode',
                            dataId: 'settingsInjectedMode',
                            title: 'Execution environment has been provided by Metamask or similar provider.',
                            value: 'injected',
                            content: 'Injected Web3'
                        }, {
                            id: 'web3-mode',
                            dataId: 'settingsWeb3Mode',
                            title: `Execution environment connects to node at localhost (or via IPC if available), transactions will be sent to the network and can cause loss of money or worse!
      If this page is served via https and you access your node via http, it might not work. In this case, try cloning the repository and serving it via http.`,
                            value: 'web3',
                            content: 'Web3 Provider'
                        }
                    ],
                    isRequesting: false,
                    isSuccessful: false,
                    error: null
                },
                notification: {
                    title: '',
                    message: '',
                    actionOk: () => {
                    },
                    actionCancel: () => {
                    },
                    labelOk: '',
                    labelCancel: ''
                },
                externalEndpoint: 'http://127.0.0.1:8545',
                popup: '',
                passphrase: '',
                matchPassphrase: '',
                contracts: {
                    contractList: [],
                    loadType: 'other',
                    currentFile: '',
                    compilationCount: 0,
                    isRequesting: false,
                    isSuccessful: false,
                    error: null
                },
                ipfsChecked: false,
                gasPriceStatus: false,
                confirmSettings: false,
                maxFee: '',
                maxPriorityFee: '1',
                baseFeePerGas: '',
                txFeeContent: '',
                gasPrice: '',
                instances: {
                    instanceList: [],
                    error: null
                },
                recorder: {
                    pathToScenario: 'scenario.json',
                    transactionCount: 0
                }
            };
            exports.runTabInitialState = runTabInitialState;

            const runTabReducer = (state = runTabInitialState, action) => {
                switch (action.type) {
                    case 'FETCH_ACCOUNTS_LIST_REQUEST': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            accounts: _objectSpread(_objectSpread({}, state.accounts), {}, {
                                isRequesting: true,
                                isSuccessful: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_ACCOUNTS_LIST_SUCCESS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            accounts: _objectSpread(_objectSpread({}, state.accounts), {}, {
                                loadedAccounts: payload,
                                isSuccessful: true,
                                isRequesting: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_ACCOUNTS_LIST_FAILED': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            accounts: _objectSpread(_objectSpread({}, state.accounts), {}, {
                                isRequesting: false,
                                isSuccessful: false,
                                error: payload
                            })
                        });
                    }

                    case 'SET_SEND_VALUE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            sendValue: payload
                        });
                    }

                    case 'SET_SELECTED_ACCOUNT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            accounts: _objectSpread(_objectSpread({}, state.accounts), {}, {
                                selectedAccount: payload
                            })
                        });
                    }

                    case 'SET_SEND_UNIT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            sendUnit: payload
                        });
                    }

                    case 'SET_GAS_LIMIT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            gasLimit: payload
                        });
                    }

                    case 'SET_EXECUTION_ENVIRONMENT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            selectExEnv: payload,
                            networkName: state.selectExEnv === 'vm-london' || state.selectExEnv === 'vm-berlin' ? 'VM' : state.networkName,
                            accounts: _objectSpread(_objectSpread({}, state.accounts), {}, {
                                selectedAccount: '',
                                loadedAccounts: {}
                            })
                        });
                    }

                    case 'SET_PERSONAL_MODE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            personalMode: payload
                        });
                    }

                    case 'SET_NETWORK_NAME': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            networkName: payload
                        });
                    }

                    case 'FETCH_PROVIDER_LIST_REQUEST': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            providers: _objectSpread(_objectSpread({}, state.providers), {}, {
                                isRequesting: true,
                                isSuccessful: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_PROVIDER_LIST_SUCCESS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            providers: _objectSpread(_objectSpread({}, state.providers), {}, {
                                providerList: payload,
                                isSuccessful: true,
                                isRequesting: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_PROVIDER_LIST_FAILED': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            providers: _objectSpread(_objectSpread({}, state.providers), {}, {
                                isRequesting: false,
                                isSuccessful: false,
                                error: payload
                            })
                        });
                    }

                    case 'ADD_PROVIDER': {
                        const payload = action.payload;
                        const id = action.payload.name;
                        state.providers.providerList.push({
                            content: payload.name,
                            dataId: id,
                            id,
                            title: payload.name,
                            value: id
                        });
                        return _objectSpread(_objectSpread({}, state), {}, {
                            providers: _objectSpread(_objectSpread({}, state.providers), {}, {
                                providerList: state.providers.providerList
                            })
                        });
                    }

                    case 'REMOVE_PROVIDER': {
                        const id = action.payload;
                        const providers = state.providers.providerList.filter(el => el.id !== id);
                        return _objectSpread(_objectSpread({}, state), {}, {
                            providers: _objectSpread(_objectSpread({}, state.providers), {}, {
                                providerList: providers
                            })
                        });
                    }

                    case 'DISPLAY_NOTIFICATION': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            notification: {
                                title: payload.title,
                                message: payload.message,
                                actionOk: payload.actionOk || runTabInitialState.notification.actionOk,
                                actionCancel: payload.actionCancel || runTabInitialState.notification.actionCancel,
                                labelOk: payload.labelOk,
                                labelCancel: payload.labelCancel
                            }
                        });
                    }

                    case 'HIDE_NOTIFICATION': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            notification: runTabInitialState.notification
                        });
                    }

                    case 'SET_EXTERNAL_WEB3_ENDPOINT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            externalEndpoint: payload
                        });
                    }

                    case 'DISPLAY_POPUP_MESSAGE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            popup: payload
                        });
                    }

                    case 'HIDE_POPUP_MESSAGE': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            popup: ''
                        });
                    }

                    case 'SET_PASSPHRASE': {
                        const passphrase = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            passphrase
                        });
                    }

                    case 'SET_MATCH_PASSPHRASE': {
                        const passphrase = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            matchPassphrase: passphrase
                        });
                    }

                    case 'FETCH_CONTRACT_LIST_REQUEST': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            contracts: _objectSpread(_objectSpread({}, state.contracts), {}, {
                                isRequesting: true,
                                isSuccessful: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_CONTRACT_LIST_SUCCESS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            contracts: _objectSpread(_objectSpread({}, state.contracts), {}, {
                                contractList: payload,
                                isSuccessful: true,
                                isRequesting: false,
                                error: null
                            })
                        });
                    }

                    case 'FETCH_CONTRACT_LIST_FAILED': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            contracts: _objectSpread(_objectSpread({}, state.contracts), {}, {
                                isRequesting: false,
                                isSuccessful: false,
                                error: payload
                            })
                        });
                    }

                    case 'SET_LOAD_TYPE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            contracts: _objectSpread(_objectSpread({}, state.contracts), {}, {
                                loadType: payload
                            })
                        });
                    }

                    case 'SET_CURRENT_FILE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            contracts: _objectSpread(_objectSpread({}, state.contracts), {}, {
                                currentFile: payload,
                                compilationCount: state.contracts.compilationCount + 1
                            })
                        });
                    }

                    case 'SET_IPFS_CHECKED_STATE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            ipfsChecked: payload
                        });
                    }

                    case 'SET_GAS_PRICE_STATUS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            gasPriceStatus: payload
                        });
                    }

                    case 'SET_CONFIRM_SETTINGS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            confirmSettings: payload
                        });
                    }

                    case 'SET_MAX_FEE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            maxFee: payload
                        });
                    }

                    case 'SET_MAX_PRIORITY_FEE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            maxPriorityFee: payload
                        });
                    }

                    case 'SET_BASE_FEE_PER_GAS': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            baseFeePerGas: payload
                        });
                    }

                    case 'SET_GAS_PRICE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            gasPrice: payload
                        });
                    }

                    case 'SET_TX_FEE_CONTENT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            txFeeContent: payload
                        });
                    }

                    case 'ADD_INSTANCE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            instances: _objectSpread(_objectSpread({}, state.instances), {}, {
                                instanceList: [...state.instances.instanceList, payload]
                            })
                        });
                    }

                    case 'REMOVE_INSTANCE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            instances: _objectSpread(_objectSpread({}, state.instances), {}, {
                                instanceList: state.instances.instanceList.filter((_, index) => index !== payload)
                            })
                        });
                    }

                    case 'CLEAR_INSTANCES': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            instances: {
                                instanceList: [],
                                error: null
                            }
                        });
                    }

                    case 'SET_DECODED_RESPONSE': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            instances: _objectSpread(_objectSpread({}, state.instances), {}, {
                                instanceList: state.instances.instanceList.map((instance, index) => {
                                    if (payload.instanceIndex === index) {
                                        instance.decodedResponse[payload.funcIndex] = payload.response;
                                    }
                                    return instance;
                                })
                            })
                        });
                    }

                    case 'SET_PATH_TO_SCENARIO': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            recorder: _objectSpread(_objectSpread({}, state.recorder), {}, {
                                pathToScenario: payload
                            })
                        });
                    }

                    case 'SET_RECORDER_COUNT': {
                        const payload = action.payload;
                        return _objectSpread(_objectSpread({}, state), {}, {
                            recorder: _objectSpread(_objectSpread({}, state.recorder), {}, {
                                transactionCount: payload
                            })
                        });
                    }

                    case 'CLEAR_RECORDER_COUNT': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            recorder: _objectSpread(_objectSpread({}, state.recorder), {}, {
                                transactionCount: 0
                            })
                        });
                    }

                    case 'RESET_STATE': {
                        return _objectSpread(_objectSpread({}, runTabInitialState), {}, {
                            ipfsChecked: state.ipfsChecked
                        });
                    }

                    default:
                        return state;
                }
            };

            exports.runTabReducer = runTabReducer;

            /***/
        }),

        /***/ 1571:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.updateTxFeeContent = exports.updateScenarioPath = exports.updateMaxPriorityFee = exports.updateMaxFee = exports.updateGasPriceStatus = exports.updateGasPrice = exports.updateConfirmSettings = exports.updateBaseFeePerGas = exports.storeScenario = exports.signMessageWithAddress = exports.setWeb3Endpoint = exports.setUnit = exports.setSendTransactionValue = exports.setPassphrasePrompt = exports.setNetworkNameFromProvider = exports.setMatchPassphrasePrompt = exports.setGasFee = exports.setExecutionContext = exports.setAccount = exports.runTransactions = exports.runCurrentScenario = exports.removeInstance = exports.loadAddress = exports.initRunTab = exports.getSelectedContract = exports.getFuncABIInputs = exports.getContext = exports.createNewBlockchainAccount = exports.createInstance = exports.clearPopUp = exports.clearInstances = void 0;

            var ethJSUtil = _interopRequireWildcard(__webpack_require__(493));

            var _web = _interopRequireDefault(__webpack_require__(521));

            var _helper = __webpack_require__(543);

            var _payload = __webpack_require__(975);

            var _remixSolidity = __webpack_require__(556);

            var remixLib = _interopRequireWildcard(__webpack_require__(508));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-unused-vars
            const txFormat = remixLib.execution.txFormat;

            const _paq = window._paq = window._paq || []; //eslint-disable-line


            const txHelper = remixLib.execution.txHelper;
            let plugin, dispatch;

            const initRunTab = udapp => async reducerDispatch => {
                plugin = udapp;
                dispatch = reducerDispatch;
                resetAndInit();
                setupEvents();
                setInterval(() => {
                    fillAccountsList();
                }, 1000);
            };

            exports.initRunTab = initRunTab;

            const setupEvents = () => {
                plugin.blockchain.events.on('newTransaction', (tx, receipt) => {
                    plugin.emit('newTransaction', tx, receipt);
                });
                plugin.blockchain.event.register('transactionExecuted', (error, from, to, data, lookupOnly, txResult) => {
                    if (!lookupOnly) {
                        dispatch((0, _payload.setSendValue)('0'));
                    }
                    if (error) {
                        return;
                    }
                    updateAccountBalances();
                });
                plugin.blockchain.event.register('contextChanged', (context, silent) => {
                    setFinalContext();
                });
                plugin.blockchain.event.register('networkStatus', ({
                                                                       error,
                                                                       network
                                                                   }) => {
                    if (error) {
                        const _netUI = 'can\'t detect network ';
                        setNetworkNameFromProvider(_netUI);
                        return;
                    }

                    const networkProvider = plugin.networkModule.getNetworkProvider.bind(plugin.networkModule);
                    const netUI = networkProvider() !== 'vm' ? `${network.name} (${network.id || '-'}) network` : 'VM';
                    setNetworkNameFromProvider(netUI);
                });
                plugin.blockchain.event.register('addProvider', provider => addExternalProvider(provider));
                plugin.blockchain.event.register('removeProvider', name => removeExternalProvider(name));
                plugin.on('manager', 'pluginActivated', addPluginProvider.bind(plugin));
                plugin.on('manager', 'pluginDeactivated', removePluginProvider.bind(plugin));
                plugin.on('solidity', 'compilationFinished', (file, source, languageVersion, data) => broadcastCompilationResult(file, source, languageVersion, data));
                plugin.on('vyper', 'compilationFinished', (file, source, languageVersion, data) => broadcastCompilationResult(file, source, languageVersion, data));
                plugin.on('lexon', 'compilationFinished', (file, source, languageVersion, data) => broadcastCompilationResult(file, source, languageVersion, data));
                plugin.on('yulp', 'compilationFinished', (file, source, languageVersion, data) => broadcastCompilationResult(file, source, languageVersion, data));
                plugin.on('udapp', 'setEnvironmentModeReducer', (env, from) => {
                    plugin.call('notification', 'toast', (0, _helper.envChangeNotification)(env, from));
                    setExecutionContext(env);
                });
                plugin.on('filePanel', 'setWorkspace', () => {
                    dispatch((0, _payload.resetUdapp)());
                    resetAndInit();
                });
                plugin.fileManager.events.on('currentFileChanged', currentFile => {
                    if (/.(.abi)$/.exec(currentFile)) {
                        dispatch((0, _payload.setLoadType)('abi'));
                    } else if (/.(.sol)$/.exec(currentFile) || /.(.vy)$/.exec(currentFile) || // vyper
                        /.(.lex)$/.exec(currentFile) || // lexon
                        /.(.contract)$/.exec(currentFile)) {
                        dispatch((0, _payload.setLoadType)('sol'));
                    } else {
                        dispatch((0, _payload.setLoadType)('other'));
                    }
                });
                plugin.recorder.event.register('recorderCountChange', count => {
                    dispatch((0, _payload.setRecorderCount)(count));
                });
                plugin.event.register('cleared', () => {
                    dispatch((0, _payload.clearRecorderCount)());
                });
            };

            const updateAccountBalances = () => {
                const accounts = plugin.REACT_API.accounts.loadedAccounts;
                Object.keys(accounts).map(value => {
                    plugin.blockchain.getBalanceInEther(value, (err, balance) => {
                        if (err) {
                            return;
                        }
                        const updated = (0, _helper.shortenAddress)(value, balance);
                        accounts[value] = updated;
                    });
                });
                dispatch((0, _payload.fetchAccountsListSuccess)(accounts));
            };

            const fillAccountsList = async () => {
                try {
                    dispatch((0, _payload.fetchAccountsListRequest)());
                    const promise = plugin.blockchain.getAccounts();
                    promise.then(async accounts => {
                        const loadedAccounts = {};
                        if (!accounts) {
                            accounts = [];
                        } // allSettled is undefined..
                        // so the current promise (all) will finish when:
                        // - all the promises resolve
                        // - at least one reject
                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all

                        await Promise.all(accounts.map(account => {
                            return new Promise((resolve, reject) => {
                                plugin.blockchain.getBalanceInEther(account, (err, balance) => {
                                    if (err) {
                                        return reject(err);
                                    }
                                    console.log(balance);
                                    const updated = (0, _helper.shortenAddress)(account, balance);
                                    loadedAccounts[account] = updated;
                                    resolve(account);
                                });
                            });
                        }));
                        const provider = plugin.blockchain.getProvider();

                        if (provider === 'injected') {
                            const selectedAddress = plugin.blockchain.getInjectedWeb3Address();
                            if (!Object.keys(loadedAccounts).includes(selectedAddress)) {
                                setAccount(null);
                            }
                        }

                        dispatch((0, _payload.fetchAccountsListSuccess)(loadedAccounts));
                    }).catch(e => {
                        dispatch((0, _payload.fetchAccountsListFailed)(e.message));
                    });
                } catch (e) {
                    dispatch((0, _payload.displayPopUp)(`Cannot get account list: ${e}`));
                }
            };

            const setAccount = account => {
                dispatch((0, _payload.setSelectedAccount)(account));
            };

            exports.setAccount = setAccount;

            const setUnit = unit => {
                dispatch((0, _payload.setSendUnit)(unit));
            };

            exports.setUnit = setUnit;

            const setGasFee = value => {
                dispatch((0, _payload.setGasLimit)(value));
            };

            exports.setGasFee = setGasFee;

            const addPluginProvider = profile => {
                if (profile.kind === 'provider') {
                    ((profile, app) => {
                        const web3Provider = {
                            async sendAsync(payload, callback) {
                                try {
                                    const result = await app.call(profile.name, 'sendAsync', payload);
                                    callback(null, result);
                                } catch (e) {
                                    callback(e);
                                }
                            }

                        };
                        app.blockchain.addProvider({
                            name: profile.displayName,
                            provider: web3Provider
                        });
                    })(profile, plugin);
                }
            };

            const removePluginProvider = profile => {
                if (profile.kind === 'provider') {
                    plugin.blockchain.removeProvider(profile.displayName);
                }
            };

            const setFinalContext = () => {
                // set the final context. Cause it is possible that this is not the one we've originaly selected
                const value = _getProviderDropdownValue();

                setExecEnv(value);
                clearInstances();
            };

            const _getProviderDropdownValue = () => {
                const provider = plugin.blockchain.getProvider();
                const fork = plugin.blockchain.getCurrentFork();
                return provider === 'vm' ? provider + '-' + fork : provider;
            };

            const setExecEnv = env => {
                dispatch((0, _payload.setExecutionEnvironment)(env));
            };

            const setNetworkNameFromProvider = networkName => {
                dispatch((0, _payload.setNetworkName)(networkName));
            };

            exports.setNetworkNameFromProvider = setNetworkNameFromProvider;

            const addExternalProvider = network => {
                dispatch((0, _payload.addProvider)(network));
                dispatch((0, _payload.displayPopUp)(`${network.name} provider added`));
            };

            const removeExternalProvider = name => {
                dispatch((0, _payload.removeProvider)(name));
            };

            const setExecutionContext = executionContext => {

                const displayContent = (0, _helper.web3Dialog)(plugin.REACT_API.externalEndpoint, setWeb3Endpoint);

                plugin.blockchain.changeExecutionContext(executionContext, () => {
                    plugin.call('notification', 'modal', {
                        id: 'envNotification',
                        title: 'External node request',
                        message: displayContent,
                        okLabel: 'OK',
                        cancelLabel: 'Cancel',
                        okFn: () => {
                            plugin.blockchain.setProviderFromEndpoint(plugin.REACT_API.externalEndpoint, executionContext, alertMsg => {
                                if (alertMsg) {
                                    plugin.call('notification', 'toast', alertMsg);
                                }
                                setFinalContext();
                            });
                        },
                        cancelFn: () => {
                            setFinalContext();
                        }
                    });
                }, alertMsg => {
                    plugin.call('notification', 'toast', alertMsg);
                }, () => {
                    setFinalContext();
                });
            };

            exports.setExecutionContext = setExecutionContext;

            const setWeb3Endpoint = endpoint => {
                dispatch((0, _payload.setExternalEndpoint)(endpoint));
            };

            exports.setWeb3Endpoint = setWeb3Endpoint;

            const clearPopUp = async () => {
                dispatch((0, _payload.hidePopUp)());
            };

            exports.clearPopUp = clearPopUp;

            const createNewBlockchainAccount = async cbMessage => {
                plugin.blockchain.newAccount('', cb => {
                    dispatch((0, _payload.displayNotification)('Enter Passphrase', cbMessage, 'OK', 'Cancel', async () => {
                        if (plugin.REACT_API.passphrase === plugin.REACT_API.matchPassphrase) {
                            cb(plugin.REACT_API.passphrase);
                        } else {
                            dispatch((0, _payload.displayNotification)('Error', 'Passphase does not match', 'OK', null));
                        }

                        (0, _payload.setPassphrase)('');
                        (0, _payload.setMatchPassphrase)('');
                    }, () => {
                    }));
                }, async (error, address) => {
                    if (error) {
                        return dispatch((0, _payload.displayPopUp)('Cannot create an account: ' + error));
                    }

                    dispatch((0, _payload.displayPopUp)(`account ${address} created`));
                    await fillAccountsList();
                });
            };

            exports.createNewBlockchainAccount = createNewBlockchainAccount;

            const setPassphrasePrompt = passphrase => {
                dispatch((0, _payload.setPassphrase)(passphrase));
            };

            exports.setPassphrasePrompt = setPassphrasePrompt;

            const setMatchPassphrasePrompt = passphrase => {
                dispatch((0, _payload.setMatchPassphrase)(passphrase));
            };

            exports.setMatchPassphrasePrompt = setMatchPassphrasePrompt;

            const signMessageWithAddress = (account, message, modalContent, passphrase) => {
                plugin.blockchain.signMessage(message, account, passphrase, (err, msgHash, signedData) => {
                    if (err) {
                        return (0, _payload.displayPopUp)(err);
                    }

                    dispatch((0, _payload.displayNotification)('Signed Message', modalContent(msgHash, signedData), 'OK', null, () => {
                    }, null));
                });
            };

            exports.signMessageWithAddress = signMessageWithAddress;

            const broadcastCompilationResult = (file, source, languageVersion, data) => {
                // TODO check whether the tab is configured
                const compiler = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                plugin.compilersArtefacts[languageVersion] = compiler;
                plugin.compilersArtefacts.__last = compiler;
                const contracts = getCompiledContracts(compiler).map(contract => {
                    return {
                        name: languageVersion,
                        alias: contract.name,
                        file: contract.file
                    };
                });
                dispatch((0, _payload.fetchContractListSuccess)(contracts));
                dispatch((0, _payload.setCurrentFile)(file));
            };

            const loadContractFromAddress = (address, confirmCb, cb) => {
                if (/.(.abi)$/.exec(plugin.config.get('currentFile'))) {
                    confirmCb(() => {
                        let abi;

                        try {
                            abi = JSON.parse(plugin.editor.currentContent());
                        } catch (e) {
                            return cb('Failed to parse the current file as JSON ABI.');
                        }

                        _paq.push(['trackEvent', 'udapp', 'AtAddressLoadWithABI']);

                        cb(null, 'abi', abi);
                    });
                } else {
                    _paq.push(['trackEvent', 'udapp', 'AtAddressLoadWithArtifacts']);

                    cb(null, 'instance');
                }
            };

            const getCompiledContracts = compiler => {
                const contracts = [];
                compiler.visitContracts(contract => {
                    contracts.push(contract);
                });
                return contracts;
            };

            const getSelectedContract = (contractName, compilerAtributeName) => {
                if (!contractName) {
                    return null;
                }
                const compiler = plugin.compilersArtefacts[compilerAtributeName];
                if (!compiler) {
                    return null;
                }
                const contract = compiler.getContract(contractName);
                return {
                    name: contractName,
                    contract: contract,
                    compiler: compiler,
                    abi: contract.object.abi,
                    bytecodeObject: contract.object.evm.bytecode.object,
                    bytecodeLinkReferences: contract.object.evm.bytecode.linkReferences,
                    object: contract.object,
                    deployedBytecode: contract.object.evm.deployedBytecode,
                    getConstructorInterface: () => {
                        return txHelper.getConstructorInterface(contract.object.abi);
                    },
                    getConstructorInputs: () => {
                        const constructorInteface = txHelper.getConstructorInterface(contract.object.abi);
                        return txHelper.inputParametersDeclarationToString(constructorInteface.inputs);
                    },
                    isOverSizeLimit: () => {
                        const deployedBytecode = contract.object.evm.deployedBytecode;
                        return deployedBytecode && deployedBytecode.object.length / 2 > 24576;
                    },
                    metadata: contract.object.metadata
                };
            };

            exports.getSelectedContract = getSelectedContract;

            const getCompilerContracts = () => {
                return plugin.compilersArtefacts.__last.getData().contracts;
            };

            const terminalLogger = view => {
                plugin.call('terminal', 'logHtml', view);
            };

            const confirmationHandler = (confirmDialogContent, network, tx, gasEstimation, continueTxExecution, cancelCb) => {
                if (network.name !== 'Main') {
                    return continueTxExecution(null);
                }

                const amount = plugin.blockchain.fromWei(tx.value, true, 'ether');
                const content = confirmDialogContent(tx, network, amount, gasEstimation, plugin.blockchain.determineGasFees(tx), plugin.blockchain.determineGasPrice.bind(plugin.blockchain));
                dispatch((0, _payload.displayNotification)('Confirm transaction', content, 'Confirm', 'Cancel', () => {
                    plugin.blockchain.config.setUnpersistedProperty('doNotShowTransactionConfirmationAgain', plugin.REACT_API.confirmSettings); // TODO: check if this is check is still valid given the refactor

                    if (!plugin.REACT_API.gasPriceStatus) {
                        cancelCb('Given transaction fee is not correct');
                    } else {
                        continueTxExecution({
                            maxFee: plugin.REACT_API.maxFee,
                            maxPriorityFee: plugin.REACT_API.maxPriorityFee,
                            baseFeePerGas: plugin.REACT_API.baseFeePerGas,
                            gasPrice: plugin.REACT_API.gasPrice
                        });
                    }
                }, () => {
                    return cancelCb('Transaction canceled by user.');
                }));
            };

            const getConfirmationCb = confirmDialogContent => {
                // this code is the same as in recorder.js. TODO need to be refactored out
                return (network, tx, gasEstimation, continueTxExecution, cancelCb) => {
                    confirmationHandler(confirmDialogContent, network, tx, gasEstimation, continueTxExecution, cancelCb);
                };
            };

            const continueHandler = (gasEstimationPrompt, error, continueTxExecution, cancelCb) => {
                if (error) {
                    const msg = typeof error !== 'string' ? error.message : error;
                    dispatch((0, _payload.displayNotification)('Gas estimation failed', gasEstimationPrompt(msg), 'Send Transaction', 'Cancel Transaction', () => {
                        continueTxExecution();
                    }, () => {
                        cancelCb();
                    }));
                } else {
                    continueTxExecution();
                }
            };

            const promptHandler = (passphrasePrompt, okCb, cancelCb) => {
                dispatch((0, _payload.displayNotification)('Passphrase requested', passphrasePrompt('Personal mode is enabled. Please provide passphrase of account'), 'OK', 'Cancel', okCb, cancelCb));
            };

            const createInstance = async (selectedContract, gasEstimationPrompt, passphrasePrompt, logBuilder, publishToStorage, mainnetPrompt, isOverSizePrompt, args) => {
                const statusCb = msg => {
                    const log = logBuilder(msg);
                    return terminalLogger(log);
                };

                const finalCb = (error, contractObject, address) => {
                    if (error) {
                        const log = logBuilder(error);
                        return terminalLogger(log);
                    }

                    addInstance({
                        contractData: contractObject,
                        address,
                        name: contractObject.name
                    });
                    const data = plugin.compilersArtefacts.getCompilerAbstract(contractObject.contract.file);
                    plugin.compilersArtefacts.addResolvedContract((0, _helper.addressToString)(address), data);

                    if (plugin.REACT_API.ipfsChecked) {
                        _paq.push(['trackEvent', 'udapp', 'DeployAndPublish', plugin.REACT_API.networkName]);

                        publishToStorage('ipfs', selectedContract);
                    } else {
                        _paq.push(['trackEvent', 'udapp', 'DeployOnly', plugin.REACT_API.networkName]);
                    }
                };

                let contractMetadata;

                try {
                    contractMetadata = await plugin.call('compilerMetadata', 'deployMetadataOf', selectedContract.name, selectedContract.contract.file);
                } catch (error) {
                    return statusCb(`creation of ${selectedContract.name} errored: ${error.message ? error.message : error}`);
                }

                const compilerContracts = getCompilerContracts();
                const confirmationCb = getConfirmationCb(mainnetPrompt);

                if (selectedContract.isOverSizeLimit()) {
                    return dispatch((0, _payload.displayNotification)('Contract code size over limit', isOverSizePrompt(), 'Force Send', 'Cancel', () => {
                        deployContract(selectedContract, args, contractMetadata, compilerContracts, {
                            continueCb: (error, continueTxExecution, cancelCb) => {
                                continueHandler(gasEstimationPrompt, error, continueTxExecution, cancelCb);
                            },
                            promptCb: (okCb, cancelCb) => {
                                promptHandler(passphrasePrompt, okCb, cancelCb);
                            },
                            statusCb,
                            finalCb
                        }, confirmationCb);
                    }, () => {
                        const log = logBuilder(`creation of ${selectedContract.name} canceled by user.`);
                        return terminalLogger(log);
                    }));
                }

                deployContract(selectedContract, args, contractMetadata, compilerContracts, {
                    continueCb: (error, continueTxExecution, cancelCb) => {
                        continueHandler(gasEstimationPrompt, error, continueTxExecution, cancelCb);
                    },
                    promptCb: (okCb, cancelCb) => {
                        promptHandler(passphrasePrompt, okCb, cancelCb);
                    },
                    statusCb,
                    finalCb
                }, confirmationCb);
            };

            exports.createInstance = createInstance;

            const deployContract = (selectedContract, args, contractMetadata, compilerContracts, callbacks, confirmationCb) => {
                _paq.push(['trackEvent', 'udapp', 'DeployContractTo', plugin.REACT_API.networkName]);

                const {
                    statusCb
                } = callbacks;

                if (!contractMetadata || contractMetadata && contractMetadata.autoDeployLib) {
                    return plugin.blockchain.deployContractAndLibraries(selectedContract, args, contractMetadata, compilerContracts, callbacks, confirmationCb);
                }

                if (Object.keys(selectedContract.bytecodeLinkReferences).length) {
                    statusCb(`linking ${JSON.stringify(selectedContract.bytecodeLinkReferences, null, '\t')} using ${JSON.stringify(contractMetadata.linkReferences, null, '\t')}`);
                }
                plugin.blockchain.deployContractWithLibrary(selectedContract, args, contractMetadata, compilerContracts, callbacks, confirmationCb);
            };

            const updateGasPriceStatus = status => {
                dispatch((0, _payload.setGasPriceStatus)(status));
            };

            exports.updateGasPriceStatus = updateGasPriceStatus;

            const updateConfirmSettings = confirmation => {
                dispatch((0, _payload.setConfirmSettings)(confirmation));
            };

            exports.updateConfirmSettings = updateConfirmSettings;

            const updateMaxFee = fee => {
                dispatch((0, _payload.setMaxFee)(fee));
            };

            exports.updateMaxFee = updateMaxFee;

            const updateMaxPriorityFee = fee => {
                dispatch((0, _payload.setMaxPriorityFee)(fee));
            };

            exports.updateMaxPriorityFee = updateMaxPriorityFee;

            const updateBaseFeePerGas = baseFee => {
                dispatch((0, _payload.setBaseFeePerGas)(baseFee));
            };

            exports.updateBaseFeePerGas = updateBaseFeePerGas;

            const updateGasPrice = price => {
                dispatch((0, _payload.setGasPrice)(price));
            };

            exports.updateGasPrice = updateGasPrice;

            const updateTxFeeContent = content => {
                dispatch((0, _payload.setTxFeeContent)(content));
            };

            exports.updateTxFeeContent = updateTxFeeContent;

            const addInstance = instance => {
                instance.decodedResponse = {};
                dispatch((0, _payload.addNewInstance)(instance));
            };

            const removeInstance = index => {
                dispatch((0, _payload.removeExistingInstance)(index));
            };

            exports.removeInstance = removeInstance;

            const clearInstances = () => {
                dispatch((0, _payload.clearAllInstances)());
                dispatch((0, _payload.clearRecorderCount)());
            };

            exports.clearInstances = clearInstances;

            const loadAddress = (contract, address) => {
                loadContractFromAddress(address, cb => {
                    dispatch((0, _payload.displayNotification)('At Address', `Do you really want to interact with ${address} using the current ABI definition?`, 'OK', 'Cancel', cb, null));
                }, (error, loadType, abi) => {
                    if (error) {
                        return dispatch((0, _payload.displayNotification)('Alert', error, 'OK', null));
                    }

                    if (loadType === 'abi') {
                        return addInstance({
                            abi,
                            address,
                            name: '<at address>'
                        });
                    } else if (loadType === 'instance') {
                        if (!contract) {
                            return dispatch((0, _payload.displayPopUp)('No compiled contracts found.'));
                        }
                        const compiler = plugin.REACT_API.contracts.contractList.find(item => item.alias === contract.name);
                        const contractData = getSelectedContract(contract.name, compiler.name);
                        return addInstance({
                            contractData,
                            address,
                            name: contract.name
                        });
                    }
                });
            };

            exports.loadAddress = loadAddress;

            const getContext = () => {
                return plugin.blockchain.context();
            };

            exports.getContext = getContext;

            const runTransactions = (instanceIndex, lookupOnly, funcABI, inputsValues, contractName, contractABI, contract, address, logMsg, logBuilder, mainnetPrompt, gasEstimationPrompt, passphrasePrompt, funcIndex) => {
                let callinfo = '';
                if (lookupOnly) {
                    callinfo = 'call';
                } else if (funcABI.type === 'fallback' || funcABI.type === 'receive') {
                    callinfo = 'lowLevelInteracions';
                } else {
                    callinfo = 'transact';
                }

                _paq.push(['trackEvent', 'udapp', callinfo, plugin.blockchain.getCurrentNetworkStatus().network.name]);

                const params = funcABI.type !== 'fallback' ? inputsValues : '';
                plugin.blockchain.runOrCallContractMethod(contractName, contractABI, funcABI, contract, inputsValues, address, params, lookupOnly, logMsg, msg => {
                    const log = logBuilder(msg);
                    return terminalLogger(log);
                }, returnValue => {
                    const response = txFormat.decodeResponse(returnValue, funcABI);
                    dispatch((0, _payload.setDecodedResponse)(instanceIndex, response, funcIndex));
                }, (network, tx, gasEstimation, continueTxExecution, cancelCb) => {
                    confirmationHandler(mainnetPrompt, network, tx, gasEstimation, continueTxExecution, cancelCb);
                }, (error, continueTxExecution, cancelCb) => {
                    continueHandler(gasEstimationPrompt, error, continueTxExecution, cancelCb);
                }, (okCb, cancelCb) => {
                    promptHandler(passphrasePrompt, okCb, cancelCb);
                });
            };

            exports.runTransactions = runTransactions;

            const saveScenario = (newPath, provider, promptCb, cb) => {
                const txJSON = JSON.stringify(plugin.recorder.getAll(), null, 2);
                promptCb(() => {
                    try {
                        if (!provider.set(newPath, txJSON)) {
                            return cb('Failed to create file ' + newPath);
                        }
                        plugin.fileManager.open(newPath);
                    } catch (error) {
                        if (error) {
                            return cb('Failed to create file. ' + newPath + ' ' + error);
                        }
                    }
                });
            };

            const storeScenario = async prompt => {
                const path = plugin.fileManager.currentPath();
                const fileProvider = plugin.fileManager.fileProviderOf(path);
                if (!fileProvider) {
                    return (0, _payload.displayNotification)('Alert', 'Invalid File Provider', 'OK', null);
                }
                const newPath = await (0, _helper.createNonClashingNameAsync)(path + '/' + plugin.REACT_API.recorder.pathToScenario, plugin.fileManager);
                const newName = (0, _helper.extractNameFromKey)(newPath);
                saveScenario(newPath, fileProvider, cb => {
                    dispatch((0, _payload.displayNotification)('Save transactions as scenario', prompt('Transactions will be saved in a file under ' + path, newName), 'OK', 'Cancel', cb, null));
                }, error => {
                    if (error) {
                        return dispatch((0, _payload.displayNotification)('Alert', error, 'OK', null));
                    }
                });
            };

            exports.storeScenario = storeScenario;

            const runScenario = (file, gasEstimationPrompt, passphrasePrompt, confirmDialogContent, logBuilder) => {
                if (!file) {
                    return dispatch((0, _payload.displayNotification)('Alert', 'Unable to run scenerio, no specified scenario file', 'OK', null));
                }
                plugin.fileManager.readFile(file).then(json => {
                    // TODO: there is still a UI dependency to remove here, it's still too coupled at this point to remove easily
                    plugin.recorder.runScenario(json, (error, continueTxExecution, cancelCb) => {
                        continueHandler(gasEstimationPrompt, error, continueTxExecution, cancelCb);
                    }, (okCb, cancelCb) => {
                        promptHandler(passphrasePrompt, okCb, cancelCb);
                    }, msg => {
                        dispatch((0, _payload.displayNotification)('Alert', msg, 'OK', null));
                    }, (network, tx, gasEstimation, continueTxExecution, cancelCb) => {
                        confirmationHandler(confirmDialogContent, network, tx, gasEstimation, continueTxExecution, cancelCb);
                    }, msg => {
                        const log = logBuilder(msg);
                        return terminalLogger(log);
                    }, (error, abi, address, contractName) => {
                        if (error) {
                            return dispatch((0, _payload.displayNotification)('Alert', error, 'OK', null));
                        }

                        addInstance({
                            name: contractName,
                            address,
                            abi
                        });
                    });
                }).catch(error => dispatch((0, _payload.displayNotification)('Alert', error, 'OK', null)));
            };

            const runCurrentScenario = (gasEstimationPrompt, passphrasePrompt, confirmDialogContent, logBuilder) => {
                const file = plugin.config.get('currentFile');
                if (!file) {
                    return dispatch((0, _payload.displayNotification)('Alert', 'A scenario file has to be selected', 'Ok', null));
                }
                runScenario(file, gasEstimationPrompt, passphrasePrompt, confirmDialogContent, logBuilder);
            };

            exports.runCurrentScenario = runCurrentScenario;

            const updateScenarioPath = path => {
                dispatch((0, _payload.setPathToScenario)(path));
            };

            exports.updateScenarioPath = updateScenarioPath;

            const getFuncABIInputs = funcABI => {
                return plugin.blockchain.getInputs(funcABI);
            };

            exports.getFuncABIInputs = getFuncABIInputs;

            const setSendTransactionValue = value => {
                dispatch((0, _payload.setSendValue)(value));
            };

            exports.setSendTransactionValue = setSendTransactionValue;

            const resetAndInit = () => {
                plugin.blockchain.resetAndInit(plugin.config, {
                    getAddress: cb => {
                        cb(null, plugin.REACT_API.accounts.selectedAccount);
                    },
                    getValue: cb => {
                        try {
                            const number = plugin.REACT_API.sendValue;
                            const unit = plugin.REACT_API.sendUnit;
                            cb(null, _web.default.utils.toWei(number, unit));
                        } catch (e) {
                            cb(e);
                        }
                    },
                    getGasLimit: cb => {
                        try {
                            cb(null, '0x' + new ethJSUtil.BN(plugin.REACT_API.gasLimit, 10).toString(16));
                        } catch (e) {
                            cb(e.message);
                        }
                    }
                });
            };

            /***/
        }),

        /***/ 1599:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            class EventManager {
                constructor() {
                    this.registered = {}; // eslint-disable-line

                    this.anonymous = {}; // eslint-disable-line
                }

                /*
   * Unregister a listener.
   * Note that if obj is a function. the unregistration will be applied to the dummy obj {}.
   *
   * @param {String} eventName  - the event name
   * @param {Object or Func} obj - object that will listen on this event
   * @param {Func} func         - function of the listeners that will be executed
  */


                unregister(eventName, obj, func) {
                    if (!this.registered[eventName]) {
                        return;
                    }

                    if (obj instanceof Function) {
                        func = obj;
                        obj = this.anonymous;
                    }

                    for (const reg in this.registered[eventName]) {
                        if (this.registered[eventName][reg].obj === obj && this.registered[eventName][reg].func.toString() === func.toString()) {
                            this.registered[eventName].splice(reg, 1);
                        }
                    }
                }

                /*
   * Register a new listener.
   * Note that if obj is a function, the function registration will be associated with the dummy object {}
   *
   * @param {String} eventName  - the event name
   * @param {Object or Func} obj - object that will listen on this event
   * @param {Func} func         - function of the listeners that will be executed
  */


                register(eventName, obj, func) {
                    if (!this.registered[eventName]) {
                        this.registered[eventName] = [];
                    }

                    if (obj instanceof Function) {
                        func = obj;
                        obj = this.anonymous;
                    }

                    this.registered[eventName].push({
                        obj: obj,
                        func: func
                    });
                }

                /*
   * trigger event.
   * Every listener have their associated function executed
   *
   * @param {String} eventName  - the event name
   * @param {Array}j - argument that will be passed to the executed function.
  */


                trigger(eventName, args) {
                    if (!this.registered[eventName]) {
                        return;
                    }

                    for (const listener in this.registered[eventName]) {
                        const l = this.registered[eventName][listener];
                        if (l.func) {
                            l.func.apply(l.obj === this.anonymous ? {} : l.obj, args);
                        }
                    }
                }

            }

            exports.default = EventManager;

            /***/
        }),

        /***/ 1606:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const solc = __webpack_require__(755);

            let compileJSON = input => {
                return '';
            };

            const missingInputs = []; // 'DedicatedWorkerGlobalScope' object (the Worker global scope) is accessible through the self keyword
            // 'dom' and 'webworker' library files can't be included together https://github.com/microsoft/TypeScript/issues/20595

            function default_1(self) {
                self.addEventListener('message', e => {
                    const data = e.data;

                    switch (data.cmd) {
                        case 'loadVersion': {
                            delete self.Module; // NOTE: workaround some browsers?

                            self.Module = undefined;
                            compileJSON = null; // importScripts() method of synchronously imports one or more scripts into the worker's scope

                            self.importScripts(data.data);
                            const compiler = solc(self.Module);

                            compileJSON = input => {
                                try {
                                    const missingInputsCallback = path => {
                                        missingInputs.push(path);
                                        return {
                                            error: 'Deferred import'
                                        };
                                    };

                                    return compiler.compile(input, {
                                        import: missingInputsCallback
                                    });
                                } catch (exception) {
                                    return JSON.stringify({
                                        error: 'Uncaught JavaScript exception:\n' + exception
                                    });
                                }
                            };

                            self.postMessage({
                                cmd: 'versionLoaded',
                                data: compiler.version()
                            });
                            break;
                        }

                        case 'compile':
                            missingInputs.length = 0;

                            if (data.input && compileJSON) {
                                self.postMessage({
                                    cmd: 'compiled',
                                    job: data.job,
                                    data: compileJSON(data.input),
                                    missingInputs: missingInputs
                                });
                            }

                            break;
                    }
                }, false);
            }

            exports.default = default_1;

            /***/
        }),

        /***/ 1607:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compile = void 0;

            const tslib_1 = __webpack_require__(494);

            const compiler_utils_1 = __webpack_require__(986);

            const compiler_abstract_1 = __webpack_require__(987);

            const compiler_1 = __webpack_require__(976);

            const compile = (compilationTargets, settings, contentResolverCallback) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
                const res = yield (() => {
                    return new Promise((resolve, reject) => {
                        const compiler = new compiler_1.Compiler(contentResolverCallback);
                        compiler.set('evmVersion', settings.evmVersion);
                        compiler.set('optimize', settings.optimize);
                        compiler.set('language', settings.language);
                        compiler.set('runs', settings.runs);
                        compiler.loadVersion((0, compiler_utils_1.canUseWorker)(settings.version), (0, compiler_utils_1.urlFromVersion)(settings.version));
                        compiler.event.register('compilationFinished', (success, compilationData, source) => {
                            resolve(new compiler_abstract_1.CompilerAbstract(settings.version, compilationData, source));
                        });
                        compiler.event.register('compilerLoaded', _ => compiler.compile(compilationTargets, ''));
                    });
                })();
                return res;
            });

            exports.compile = compile;

            /***/
        }),

        /***/ 1609:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1610);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1610:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".udapp_runTabView {\n  display: flex;\n  flex-direction: column;\n}\n.udapp_runTabView::-webkit-scrollbar {\n  display: none;\n}\n.udapp_settings {\n  padding: 0 24px 16px;\n}\n.udapp_crow {\n  display: block;\n  margin-top: 8px;\n}\n.udapp_col1 {\n  width: 30%;\n  float: left;\n  align-self: center;\n}\n.udapp_settingsLabel {\n  font-size: 11px;\n  margin-bottom: 4px;\n  text-transform: uppercase;\n}\n.udapp_environment {\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n}\n.udapp_environment a {\n  margin-left: 7px;\n}\n.udapp_account {\n  display: flex;\n  align-items: center;\n}\n.udapp_account i {\n  margin-left: 12px;\n}\n.udapp_col2 {\n  border-radius: 3px;\n}\n.udapp_col2_1 {\n  width: 164px;\n  min-width: 164px;\n}\n.udapp_col2_2 {\n}\n.udapp_select {\n  font-weight: normal;\n  width: 100%;\n  overflow: hidden;\n}\n.udapp_instanceContainer {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 2%;\n  border: none;\n  text-align: center;\n  padding: 0 14px 16px;\n}\n.udapp_pendingTxsContainer  {\n  display: flex;\n  flex-direction: column;\n  margin-top: 2%;\n  border: none;\n  text-align: center;\n}\n.udapp_container {\n  padding: 0 24px 16px;\n}\n.udapp_recorderDescription {\n  margin: 0 15px 15px 0;\n  }\n.udapp_contractNames {\n  width: 100%;\n  border: 1px solid\n}\n.udapp_subcontainer {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 8px;\n}\n.udapp_subcontainer i {\n  width: 16px;\n  display: flex;\n  justify-content: center;\n  margin-left: 1px;\n}\n.udapp_button button{\n  flex: none;\n}\n.udapp_button {\n  display: flex;\n  align-items: center;\n  margin-top: 13px;\n}\n.udapp_transaction {\n}\n.udapp_atAddress {\n  margin: 0;\n  min-width: 100px;\n  width: 100px;\n  height: 100%;\n  word-break: inherit;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: 0;\n}\n.udapp_atAddressSect {\n  margin-top: 8px;\n  height: 32px;\n}\n.udapp_atAddressSect input {\n  height: 32px;\n  border-top-left-radius: 0 !important;\n  border-bottom-left-radius: 0 !important;\n}\n.udapp_ataddressinput {\n  padding: .25rem;\n}\n.udapp_create {\n}\n.udapp_input {\n  font-size: 10px !important;\n}\n.udapp_noInstancesText {\n  font-style: italic;\n  text-align: left;\n  padding-left: 15px;\n}\n.udapp_pendingTxsText {\n  font-style: italic;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.udapp_item {\n  margin-right: 1em;\n  display: flex;\n  align-items: center;\n}\n.udapp_pendingContainer {\n  display: flex;\n  align-items: baseline;\n}\n.udapp_pending {\n  height: 25px;\n  text-align: center;\n  padding-left: 10px;\n  border-radius: 3px;\n  margin-left: 5px;\n}\n.udapp_disableMouseEvents {\n  pointer-events: none;\n}\n.udapp_icon {\n  cursor: pointer;\n  font-size: 12px;\n  cursor: pointer;\n  margin-left: 5px;\n}\n.udapp_icon:hover {\n  font-size: 12px;\n  color: var(--warning);\n}\n.udapp_errorIcon {\n  color: var(--warning);\n  margin-left: 15px;\n}\n.udapp_failDesc {\n  color: var(--warning);\n  padding-left: 10px;\n  display: inline;\n}\n.udapp_network {\n  margin-left: 8px;\n  pointer-events: none;\n}\n.udapp_networkItem {\n  margin-right: 5px;\n}\n.udapp_transactionActions {\n  display: flex;\n  justify-content: space-evenly;\n  width: 145px;\n}\n.udapp_orLabel {\n  text-align: center;\n  text-transform: uppercase;\n}\n.udapp_infoDeployAction {\n  margin-left: 1px;\n  font-size: 13px;\n  color: var(--info);\n}\n.udapp_gasValueContainer {\n  flex-direction: row;\n  display: flex;\n}\n.udapp_gasNval {\n  width: 55%;\n  font-size: 0.8rem;\n}\n.udapp_gasNvalUnit {\n  width: 41%;\n  margin-left: 10px;\n  font-size: 0.8rem;\n}\n.udapp_deployDropdown {\n  text-align: center;\n  text-transform: uppercase;\n}\n.udapp_checkboxAlign {\n  padding-top: 2px;\n}\n.udapp_instanceTitleContainer {\n  display: flex;\n  align-items: center;\n}\n.udapp_calldataInput{\n  height: 32px;\n}\n.udapp_title {\n  display: flex;\n  justify-content: space-between;\n  font-size: 11px;\n  width: 100%;\n  overflow: hidden;\n  word-break: break-word;\n  line-height: initial;\n  overflow: visible;\n  padding: 0 0 8px;\n  margin: 0;\n  background: none;\n  border: none;\n}\n.udapp_title button {\n  background: none;\n  border: none;\n}\n.udapp_titleLine {\n  display: flex;\n  align-items: baseline;\n}\n.udapp_titleText {\n  word-break: break-word;\n  width: 100%;\n  border: none;\n  overflow: hidden;\n}\n.udapp_spanTitleText {\n  line-height: 12px;\n  padding: 0;\n  font-size: 11px;\n  width:100%;\n  border: none;\n  background: none;\n  text-transform: uppercase;\n  overflow: hidden;\n}\n.udapp_inputGroupText {\n  width: 100%;\n}\n.udapp_title .udapp_copy {\n  color: var(--primary);\n}\n.udapp_titleExpander {\n  padding: 5px 7px;\n}\n.udapp_nameNbuts {\n  display: contents;\n  flex-wrap: nowrap;\n  width: 100%;\n}\n.udapp_instance {\n  display: block;\n  flex-direction: column;\n  margin-bottom: 12px;\n  background: none;\n  border-radius: 2px;\n}\n.udapp_instance.udapp_hidesub {\n  border-bottom: 1px solid;\n}\n.udapp_instance.udapp_hidesub .udapp_title {\n    display: flex;\n}\n.udapp_instance.udapp_hidesub .udapp_udappClose {\n    display: flex;\n}\n.udapp_instance.udapp_hidesub > * {\n  display: none;\n}\n.udapp_methCaret {\n  min-width: 12px;\n  width: 12px;\n  margin-left: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  line-height: 0.6;\n  vertical-align: middle;\n  padding: 0;\n}\n.udapp_cActionsWrapper {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0.25rem;\n  border-top-rightt-radius: 0;\n  border-bottom-right-radius: 0.25rem;\n  padding: 8px 10px 7px;\n}\n.udapp_group:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n.udapp_buttonsContainer {\n  margin-top: 2%;\n  display: flex;\n  overflow: hidden;\n}\n.udapp_instanceButton {\n  height: 32px;\n  border-radius: 3px;\n  white-space: nowrap;\n  font-size: 11px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.udapp_closeIcon {\n  font-size: 12px;\n  cursor: pointer;\n  margin-left: 5px;\n}\n.udapp_udappClose {\n  display: flex;\n  justify-content: flex-end;\n}\n.udapp_contractProperty {\n  width:100%;\n}\n.udapp_contractProperty.udapp_hasArgs input {\n  padding: .36em;\n  border-radius: 5px;\n}\n.udapp_contractProperty .udapp_contractActionsContainerSingle input{\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.udapp_contractProperty button {\n  min-width: 100px;\n  width: 100px;\n  margin:0;\n  word-break: inherit;\n}\n.udapp_contractProperty button:disabled {\n  cursor: not-allowed;\n  background-color: white;\n  border-color: lightgray;\n}\n.udapp_contractProperty.udapp_constant button {\n  min-width: 100px;\n  width: 100px;\n  margin:0;\n  word-break: inherit;\n  outline: none;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.udapp_contractProperty > .udapp_value {\n  box-sizing: border-box;\n  float: left;\n  align-self: center;\n  margin-left: 4px;\n}\n.udapp_contractActionsContainer {\n  width: 100%;\n  margin-bottom: 8px;\n}\n.udapp_contractActionsContainerSingle {\n  display: flex;\n  width: 100%;\n}\n.udapp_contractActionsContainerSingle i {\n  line-height: 2;\n}\n.udapp_contractActionsContainerMulti {\n  display:none;\n  width: 100%;\n}\n.udapp_contractActionsContainerMultiInner {\n  width: 100%;\n  padding: 16px 8px 16px 14px;\n  border-radius: 3px;\n  margin-bottom: 8px;\n}\n.udapp_multiHeader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  text-align: left;\n  font-size: 10px;\n  font-weight: bold;\n}\n.udapp_contractActionsContainerMultiInner .udapp_multiTitle {\n  padding-left: 10px;\n}\n.udapp_contractProperty .udapp_multiTitle {\n  padding: 0;\n  line-height: 16px;\n  display: inline-block;\n  font-size: 12px;\n  font-weight: bold;\n  cursor: default;\n}\n.udapp_contractProperty .udapp_contractActionsContainerMultiInner .udapp_multiArg label{\n  text-align: right;\n}\n.udapp_multiHeader .udapp_methCaret {\n  float: right;\n  margin-right: 0;\n}\n.udapp_contractProperty.udapp_constant .udapp_multiTitle {\n  display: inline-block;\n  width: 90%;\n  /* font-size: 10px; */\n  height: 25px;\n  padding-left: 20px;\n  font-weight: bold;\n  line-height: 25px;\n  cursor: default;\n}\n.udapp_multiArg {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin-top: 4px;\n}\n.udapp_multiArg input{\n  padding: 5px;\n}\n.udapp_multiArg label {\n  width: auto;\n  padding: 0;\n  margin: 0 4px 0 0;\n  font-size: 10px;\n  line-height: 12px;\n  text-align: right;\n  word-break: initial;\n}\n.udapp_multiArg button {\n  max-width: 100px;\n  border-radius: 3px;\n  border-width: 1px;\n  width: inherit;\n}\n.udapp_multiHeader button {\n  display: inline-block;\n  width: 94%;\n}\n.udapp_hasArgs .udapp_multiArg input {\n  border-left: 1px solid #dddddd;\n  width: 67%;\n}\n.udapp_hasArgs input {\n  display: block;\n  height: 32px;\n  border: 1px solid #dddddd;\n  padding: .36em;\n  border-left: none;\n  padding: 8px 8px 8px 10px;\n  font-size: 10px !important;\n}\n.udapp_hasArgs button {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 11px;\n}\n.udapp_hasArgs .udapp_contractActionsContainerMulti button {\n  border-radius: 3px;\n}\n.udapp_contractActionsContainerMultiInner .udapp_multiArg i {\n  padding-right: 10px;\n}\n.udapp_hideWarningsContainer {\n  display: flex;\n  align-items: center;\n  margin-left: 2%\n}\n#confirmsetting {\n  z-index: 1;\n}\n.udapp_wrapword {\n  white-space: pre-wrap;       /* Since CSS 2.1 */\n  white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\n  white-space: -pre-wrap;      /* Opera 4-6 */\n  white-space: -o-pre-wrap;    /* Opera 7 */\n  word-wrap: break-word;       /* Internet Explorer 5.5+ */\n}\n\n\n/*# sourceMappingURL=data:application/json;base64, */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 1611:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.PublishToStorage = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _modalDialog = __webpack_require__(141);

            var _publishToIPFS = __webpack_require__(1612);

            var _publishOnSwarm = __webpack_require__(1615);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const PublishToStorage = props => {
                const {
                    api,
                    storage,
                    contract,
                    resetStorage
                } = props;
                const [state, setState] = (0, _react.useState)({
                    modal: {
                        title: '',
                        message: null,
                        hide: true,
                        okLabel: '',
                        okFn: null,
                        cancelLabel: '',
                        cancelFn: null
                    }
                });
                (0, _react.useEffect)(() => {
                    const storageService = async () => {
                        if (contract.metadata === undefined || contract.metadata.length === 0) {
                            modal('Publish To Storage', 'This contract may be abstract, may not implement an abstract parent\'s methods completely or not invoke an inherited contract\'s constructor correctly.');
                        } else {
                            if (storage === 'swarm') {
                                try {
                                    const result = await (0, _publishOnSwarm.publishToSwarm)(contract, api);
                                    modal(`Published ${contract.name}'s Metadata`, publishMessage(result.uploaded)); // triggered each time there's a new verified publish (means hash correspond)

                                    api.writeFile('swarm/' + result.item.hash, result.item.content);
                                } catch (err) {
                                    let parseError = err;

                                    try {
                                        parseError = JSON.stringify(err);
                                    } catch (e) {
                                    }

                                    modal('Swarm Publish Failed', publishMessageFailed(storage, parseError));
                                }
                            } else {
                                try {
                                    const result = await (0, _publishToIPFS.publishToIPFS)(contract, api);
                                    modal(`Published ${contract.name}'s Metadata`, publishMessage(result.uploaded)); // triggered each time there's a new verified publish (means hash correspond)

                                    api.writeFile('ipfs/' + result.item.hash, result.item.content);
                                } catch (err) {
                                    modal('IPFS Publish Failed', publishMessageFailed(storage, err));
                                }
                            }
                        }
                    };

                    if (storage) {
                        storageService();
                    }
                }, [storage]);

                const publishMessage = uploaded => /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    children: [
                        " Metadata of \"", contract.name.toLowerCase(), "\" was published successfully. ", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: uploaded.map((value, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("b", {
                                        children: value.filename
                                    }), " : ", /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                                        children: value.output.url
                                    })
                                    ]
                                }, index))
                            })
                        })
                    ]
                });

                const publishMessageFailed = (storage, err) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    children: ["Failed to publish metadata file to ", storage, ", please check the ", storage, " gateways is available. ", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), err]
                });

                const handleHideModal = () => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            modal: _objectSpread(_objectSpread({}, prevState.modal), {}, {
                                hide: true,
                                message: null
                            })
                        });
                    });
                    resetStorage();
                };

                const modal = async (title, message) => {
                    await setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            modal: _objectSpread(_objectSpread({}, prevState.modal), {}, {
                                hide: false,
                                message,
                                title
                            })
                        });
                    });
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalDialog.ModalDialog, {
                    id: props.id || 'publishToStorage',
                    title: state.modal.title,
                    message: state.modal.message,
                    hide: state.modal.hide,
                    okLabel: "OK",
                    okFn: () => {
                    },
                    handleHide: handleHideModal,
                    children: typeof state.modal.message !== 'string' && state.modal.message
                });
            };

            exports.PublishToStorage = PublishToStorage;
            var _default = PublishToStorage;
            exports.default = _default;

            /***/
        }),

        /***/ 1612:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.publishToIPFS = void 0;

            var _ipfsMini = _interopRequireDefault(__webpack_require__(1613));

            const ipfsNodes = [
                new _ipfsMini.default({
                    host: 'ipfs.remixproject.org',
                    port: 443,
                    protocol: 'https'
                }), new _ipfsMini.default({
                    host: 'ipfs.infura.io',
                    port: 5001,
                    protocol: 'https'
                }), new _ipfsMini.default({
                    host: '127.0.0.1',
                    port: 5001,
                    protocol: 'http'
                })
            ];

            const publishToIPFS = async (contract, api) => {
                // gather list of files to publish
                const sources = [];
                let metadata;
                const item = {
                    content: null,
                    hash: null
                };
                const uploaded = [];

                try {
                    metadata = JSON.parse(contract.metadata);
                } catch (e) {
                    throw new Error(e);
                }

                if (metadata === undefined) {
                    throw new Error('No metadata');
                }

                await Promise.all(Object.keys(metadata.sources).map(fileName => {
                    // find hash
                    let hash = null;

                    try {
                        // we try extract the hash defined in the metadata.json
                        // in order to check if the hash that we get after publishing is the same as the one located in metadata.json
                        // if it's not the same, we throw "hash mismatch between solidity bytecode and uploaded content"
                        // if we don't find the hash in the metadata.json, the check is not done.
                        //
                        // TODO: refactor this with publishOnSwarm
                        if (metadata.sources[fileName].urls) {
                            metadata.sources[fileName].urls.forEach(url => {
                                if (url.includes('ipfs')) {
                                    hash = url.match('dweb:/ipfs/(.+)')[1];
                                }
                            });
                        }
                    } catch (e) {
                        throw new Error('Error while extracting the hash from metadata.json');
                    }

                    api.readFile(fileName).then(content => {
                        sources.push({
                            content: content,
                            hash: hash,
                            filename: fileName
                        });
                    }).catch(error => {
                        console.log(error);
                    });
                })); // publish the list of sources in order, fail if any failed

                await Promise.all(sources.map(async item => {
                    try {
                        const result = await ipfsVerifiedPublish(item.content, item.hash);

                        try {
                            item.hash = result.url.match('dweb:/ipfs/(.+)')[1];
                        } catch (e) {
                            item.hash = '<Metadata inconsistency> - ' + item.fileName;
                        }

                        item.output = result;
                        uploaded.push(item);
                    } catch (error) {
                        throw new Error(error);
                    }
                }));
                const metadataContent = JSON.stringify(metadata);

                try {
                    const result = await ipfsVerifiedPublish(metadataContent, '');

                    try {
                        contract.metadataHash = result.url.match('dweb:/ipfs/(.+)')[1];
                    } catch (e) {
                        contract.metadataHash = '<Metadata inconsistency> - metadata.json';
                    }

                    item.content = metadataContent;
                    item.hash = contract.metadataHash;
                    uploaded.push({
                        content: contract.metadata,
                        hash: contract.metadataHash,
                        filename: 'metadata.json',
                        output: result
                    });
                } catch (error) {
                    throw new Error(error);
                }

                return {
                    uploaded,
                    item
                };
            };

            exports.publishToIPFS = publishToIPFS;

            const ipfsVerifiedPublish = async (content, expectedHash) => {
                try {
                    const results = await severalGatewaysPush(content);

                    if (expectedHash && results !== expectedHash) {
                        return {
                            message: 'hash mismatch between solidity bytecode and uploaded content.',
                            url: 'dweb:/ipfs/' + results,
                            hash: results
                        };
                    } else {
                        return {
                            message: 'ok',
                            url: 'dweb:/ipfs/' + results,
                            hash: results
                        };
                    }
                } catch (error) {
                    throw new Error(error);
                }
            };

            const severalGatewaysPush = content => {
                const invert = p => new Promise((resolve, reject) => p.then(reject).catch(resolve)); // Invert res and rej


                const promises = ipfsNodes.map(node => invert(node.add(content)));
                return invert(Promise.all(promises));
            };

            /***/
        }),

        /***/ 1615:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.publishToSwarm = void 0;

            var _swarmgw = _interopRequireDefault(__webpack_require__(1616));

            const swarmgw = (0, _swarmgw.default)();

            const publishToSwarm = async (contract, api) => {
                // gather list of files to publish
                const sources = [];
                let metadata;
                const item = {
                    content: null,
                    hash: null
                };
                const uploaded = [];

                try {
                    metadata = JSON.parse(contract.metadata);
                } catch (e) {
                    throw new Error(e);
                }

                if (metadata === undefined) {
                    throw new Error('No metadata');
                }

                await Promise.all(Object.keys(metadata.sources).map(fileName => {
                    // find hash
                    let hash = null;

                    try {
                        // we try extract the hash defined in the metadata.json
                        // in order to check if the hash that we get after publishing is the same as the one located in metadata.json
                        // if it's not the same, we throw "hash mismatch between solidity bytecode and uploaded content"
                        // if we don't find the hash in the metadata.json, the check is not done.
                        //
                        // TODO: refactor this with publishOnIpfs
                        if (metadata.sources[fileName].urls) {
                            metadata.sources[fileName].urls.forEach(url => {
                                if (url.includes('bzz')) {
                                    hash = url.match('(bzzr|bzz-raw)://(.+)')[1];
                                }
                            });
                        }
                    } catch (e) {
                        throw new Error('Error while extracting the hash from metadata.json');
                    }

                    api.readFile(fileName).then(content => {
                        sources.push({
                            content: content,
                            hash: hash,
                            filename: fileName
                        });
                    }).catch(error => {
                        console.log(error);
                    });
                })); // publish the list of sources in order, fail if any failed

                await Promise.all(sources.map(async item => {
                    try {
                        const result = await swarmVerifiedPublish(item.content, item.hash);

                        try {
                            item.hash = result.url.match('bzz-raw://(.+)')[1];
                        } catch (e) {
                            item.hash = '<Metadata inconsistency> - ' + item.fileName;
                        }

                        item.output = result;
                        uploaded.push(item); // TODO this is a fix cause Solidity metadata does not contain the right swarm hash (poc 0.3)

                        metadata.sources[item.filename].urls[0] = result.url;
                    } catch (error) {
                        throw new Error(error);
                    }
                }));
                const metadataContent = JSON.stringify(metadata);

                try {
                    const result = await swarmVerifiedPublish(metadataContent, '');

                    try {
                        contract.metadataHash = result.url.match('bzz-raw://(.+)')[1];
                    } catch (e) {
                        contract.metadataHash = '<Metadata inconsistency> - metadata.json';
                    }

                    item.content = metadataContent;
                    item.hash = contract.metadataHash;
                    uploaded.push({
                        content: contract.metadata,
                        hash: contract.metadataHash,
                        filename: 'metadata.json',
                        output: result
                    });
                } catch (error) {
                    throw new Error(error);
                }

                return {
                    uploaded,
                    item
                };
            };

            exports.publishToSwarm = publishToSwarm;

            const swarmVerifiedPublish = async (content, expectedHash) => {
                return new Promise((resolve, reject) => {
                    swarmgw.put(content, function (err, ret) {
                        if (err) {
                            reject(err);
                        } else if (expectedHash && ret !== expectedHash) {
                            resolve({
                                message: 'hash mismatch between solidity bytecode and uploaded content.',
                                url: 'bzz-raw://' + ret,
                                hash: ret
                            });
                        } else {
                            resolve({
                                message: 'ok',
                                url: 'bzz-raw://' + ret,
                                hash: ret
                            });
                        }
                    });
                });
            };

            /***/
        }),

        /***/ 1617:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.MainnetPrompt = MainnetPrompt;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _clipboard = __webpack_require__(574);

            var _web = _interopRequireDefault(__webpack_require__(521));

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            function MainnetPrompt(props) {
                const [baseFee, setBaseFee] = (0, _react.useState)('');
                (0, _react.useEffect)(() => {
                    props.init((txFeeText, gasPriceValue, gasPriceStatus) => {
                        if (txFeeText) {
                            props.setTxFeeContent(txFeeText);
                        }
                        if (gasPriceValue) {
                            onGasPriceChange(gasPriceValue);
                        }

                        if (props.network && props.network.lastBlock && props.network.lastBlock.baseFeePerGas) {
                            const baseFee = _web.default.utils.fromWei(_web.default.utils.toBN(parseInt(props.network.lastBlock.baseFeePerGas, 16)), 'Gwei');

                            setBaseFee(baseFee);
                            onMaxFeeChange(baseFee);
                        }

                        if (gasPriceStatus !== undefined) {
                            props.updateGasPriceStatus(gasPriceStatus);
                        }
                    });
                }, []);

                const onMaxFeeChange = value => {
                    console.log('value: ', value);
                    const maxFee = value; // @ts-ignore

                    if (parseInt(props.network.lastBlock.baseFeePerGas, 16) > _web.default.utils.toWei(maxFee, 'Gwei')) {
                        props.setTxFeeContent('Transaction is invalid. Max fee should not be less than Base fee');
                        props.updateGasPriceStatus(false);
                        props.updateConfirmSettings(true);
                        return;
                    } else {
                        props.updateGasPriceStatus(true);
                        props.updateConfirmSettings(false);
                    }

                    props.setNewGasPrice(maxFee, (txFeeText, priceStatus) => {
                        props.setTxFeeContent(txFeeText);

                        if (priceStatus) {
                            props.updateConfirmSettings(false);
                        } else {
                            props.updateConfirmSettings(true);
                        }

                        props.updateGasPriceStatus(priceStatus);
                        props.updateMaxFee(maxFee);
                        props.updateBaseFeePerGas(props.network.lastBlock.baseFeePerGas);
                    });
                };

                const onGasPriceChange = value => {
                    const gasPrice = value;
                    props.setNewGasPrice(gasPrice, (txFeeText, priceStatus) => {
                        props.setTxFeeContent(txFeeText);
                        props.updateGasPriceStatus(priceStatus);
                        props.updateGasPrice(gasPrice);
                    });
                };

                const onMaxPriorityFeeChange = value => {
                    props.updateMaxPriorityFee(value);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "text-dark",
                        children: ["You are about to create a transaction on ", props.network.name, " Network. Confirm the details to send the info to your provider.", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "The provider for many users is MetaMask. The provider will ask you to sign the transaction before it is sent to ", props.network.name, " Network."]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "mt-3",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "From:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                children: props.tx.from
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "To:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                children: props.tx.to ? props.tx.to : '(Contract Creation)'
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex align-items-center",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "Data:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("pre", {
                                className: "udapp_wrapword mb-0",
                                children: [
                                    props.tx.data && props.tx.data.length > 50 ? props.tx.data.substring(0, 49) + '...' : props.tx.data, /*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                        content: props.tx.data
                                    })
                                ]
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "mb-3",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "Amount:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                children: [props.amount, " Ether"]
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "Gas estimation:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                children: props.gasEstimation
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "Gas limit:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                children: ["$", props.tx.gas]
                            })
                            ]
                        }), props.network.lastBlock.baseFeePerGas ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "align-items-center my-1",
                                title: "Represents the part of the tx fee that goes to the miner.",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        className: "text-dark mr-2 text-nowrap",
                                        children: "Max Priority fee:"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-control mr-1 text-right",
                                        style: {
                                            height: '1.2rem',
                                            width: '6rem'
                                        },
                                        id: "maxpriorityfee",
                                        onInput: e => onMaxPriorityFeeChange(e.target.value),
                                        defaultValue: props.maxPriorityFee
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        title: "visit https://ethgasstation.info for current gas price info.",
                                        children: "Gwei"
                                    })
                                    ]
                                })
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "align-items-center my-1",
                                title: "Represents the maximum amount of fee that you will pay for this transaction. The minimun needs to be set to base fee.",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                        className: "text-dark mr-2 text-nowrap",
                                        children: ["Max fee (Not less than base fee ", _web.default.utils.fromWei(_web.default.utils.toBN(parseInt(props.network.lastBlock.baseFeePerGas, 16)), 'Gwei'), " Gwei):"]
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-control mr-1 text-right",
                                        style: {
                                            height: '1.2rem',
                                            width: '6rem'
                                        },
                                        id: "maxfee",
                                        onInput: e => onMaxFeeChange(e.target.value),
                                        defaultValue: baseFee
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        children: "Gwei"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        className: "text-dark ml-2"
                                    })
                                    ]
                                })
                            })
                            ]
                        }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex align-items-center my-1",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2 text-nowrap",
                                children: "Gas price:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                className: "form-control mr-1 text-right",
                                style: {
                                    width: '40px',
                                    height: '28px'
                                },
                                id: "gasprice",
                                onInput: e => onGasPriceChange(e.target.value)
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                children: [
                                    "Gwei (visit ", /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                        target: "_blank",
                                        href: "https://ethgasstation.info",
                                        rel: "noreferrer",
                                        children: "ethgasstation.info"
                                    }), " for current gas price info.)"
                                ]
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "mb-3",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-dark mr-2",
                                children: "Max transaction fee:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "text-warning",
                                id: "txfee",
                                children: props.txFeeContent
                            })
                            ]
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "d-flex py-1 align-items-center custom-control custom-checkbox remixui_checkbox",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                            className: "form-check-input custom-control-input",
                            id: "confirmsetting",
                            type: "checkbox"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                            className: "m-0 form-check-label custom-control-label",
                            htmlFor: "confirmsetting",
                            children: "Do not show this warning again."
                        })
                        ]
                    })
                    ]
                });
            }

            /***/
        }),

        /***/ 1618:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ScenarioPrompt = ScenarioPrompt;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-use-before-define
            function ScenarioPrompt(props) {
                const handleScenarioPath = e => {
                    props.setScenarioPath(e.target.value);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    children: [
                        " ", props.message, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                id: "prompt_text",
                                type: "text",
                                name: "prompt_text",
                                className: "form-control",
                                style: {
                                    width: '100%'
                                },
                                onInput: handleScenarioPath,
                                "data-id": "modalDialogCustomPromptText",
                                defaultValue: props.defaultValue
                            })
                        })
                    ]
                });
            }

            /***/
        }),

        /***/ 1690:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            var async = __webpack_require__(541);

            var ethutil = __webpack_require__(493);

            var remixLib = __webpack_require__(508);

            var EventManager = remixLib.EventManager;
            var format = remixLib.execution.txFormat;
            var txHelper = remixLib.execution.txHelper;

            var helper = __webpack_require__(575);
            /**
             * Record transaction as long as the user create them.
             */


            var Recorder = /*#__PURE__*/function () {
                function Recorder(blockchain) {
                    var _this = this;

                    _classCallCheck(this, Recorder);

                    var self = this;
                    self.event = new EventManager();
                    self.blockchain = blockchain;
                    self.data = {
                        _listen: true,
                        _replay: false,
                        journal: [],
                        _createdContracts: {},
                        _createdContractsReverse: {},
                        _usedAccounts: {},
                        _abis: {},
                        _contractABIReferences: {},
                        _linkReferences: {}
                    };
                    this.blockchain.event.register('initiatingTransaction', function (timestamp, tx, payLoad) {
                        if (tx.useCall) {
                            return;
                        }
                        var from = tx.from,
                            to = tx.to,
                            value = tx.value; // convert to and from to tokens

                        if (_this.data._listen) {
                            var record = {
                                value: value,
                                parameters: payLoad.funArgs
                            };

                            if (!to) {
                                var abi = payLoad.contractABI;
                                var keccak = ethutil.bufferToHex(ethutil.keccakFromString(JSON.stringify(abi)));
                                record.abi = keccak;
                                record.contractName = payLoad.contractName;
                                record.bytecode = payLoad.contractBytecode;
                                record.linkReferences = payLoad.linkReferences;

                                if (record.linkReferences && Object.keys(record.linkReferences).length) {
                                    for (var file in record.linkReferences) {
                                        for (var lib in record.linkReferences[file]) {
                                            self.data._linkReferences[lib] = '<address>';
                                        }
                                    }
                                }

                                self.data._abis[keccak] = abi;
                                _this.data._contractABIReferences[timestamp] = keccak;
                            } else {
                                var creationTimestamp = _this.data._createdContracts[to];
                                record.to = "created{".concat(creationTimestamp, "}");
                                record.abi = _this.data._contractABIReferences[creationTimestamp];
                            }

                            record.name = payLoad.funAbi.name;
                            record.inputs = txHelper.serializeInputs(payLoad.funAbi);
                            record.type = payLoad.funAbi.type;

                            for (var p in record.parameters) {
                                var thisarg = record.parameters[p];
                                var thistimestamp = _this.data._createdContracts[thisarg];
                                if (thistimestamp) {
                                    record.parameters[p] = "created{".concat(thistimestamp, "}");
                                }
                            }

                            _this.blockchain.getAccounts(function (error, accounts) {
                                if (error) {
                                    return console.log(error);
                                }
                                record.from = "account{".concat(accounts.indexOf(from), "}");
                                self.data._usedAccounts[record.from] = from;
                                self.append(timestamp, record);
                            });
                        }
                    });
                    this.blockchain.event.register('transactionExecuted', function (error, from, to, data, call, txResult, timestamp, _payload) {
                        if (error) {
                            return console.log(error);
                        }
                        if (call) {
                            return;
                        }
                        var rawAddress = txResult.receipt.contractAddress;
                        if (!rawAddress) {
                            return;
                        } // not a contract creation

                        var address = helper.addressToString(rawAddress); // save back created addresses for the convertion from tokens to real adresses

                        _this.data._createdContracts[address] = timestamp;
                        _this.data._createdContractsReverse[timestamp] = address;
                    });
                    this.blockchain.event.register('contextChanged', this.clearAll.bind(this));
                    this.event.register('newTxRecorded', function (count) {
                        _this.event.trigger('recorderCountChange', [count]);
                    });
                    this.event.register('cleared', function () {
                        _this.event.trigger('recorderCountChange', [0]);
                    });
                }

                /**
                 * stop/start saving txs. If not listenning, is basically in replay mode
                 *
                 * @param {Bool} listen
                 */


                _createClass(Recorder, [
                    {
                        key: "setListen",
                        value: function setListen(listen) {
                            this.data._listen = listen;
                            this.data._replay = !listen;
                        }
                    }, {
                        key: "extractTimestamp",
                        value: function extractTimestamp(value) {
                            var stamp = /created{(.*)}/g.exec(value);

                            if (stamp) {
                                return stamp[1];
                            }

                            return null;
                        }
                        /**
                         * convert back from/to from tokens to real addresses
                         *
                         * @param {Object} record
                         * @param {Object} accounts
                         * @param {Object} options
                         *
                         */

                    }, {
                        key: "resolveAddress",
                        value: function resolveAddress(record, accounts, options) {
                            if (record.to) {
                                var stamp = this.extractTimestamp(record.to);

                                if (stamp) {
                                    record.to = this.data._createdContractsReverse[stamp];
                                }
                            }

                            record.from = accounts[record.from]; // @TODO: writing browser test

                            return record;
                        }
                        /**
                         * save the given @arg record
                         *
                         * @param {Number/String} timestamp
                         * @param {Object} record
                         *
                         */

                    }, {
                        key: "append",
                        value: function append(timestamp, record) {
                            var self = this;
                            self.data.journal.push({
                                timestamp: timestamp,
                                record: record
                            });
                            self.event.trigger('newTxRecorded', [self.data.journal.length]);
                        }
                        /**
                         * basically return the records + associate values (like abis / accounts)
                         *
                         */

                    }, {
                        key: "getAll",
                        value: function getAll() {
                            var self = this;
                            var records = [].concat(self.data.journal);
                            return {
                                accounts: self.data._usedAccounts,
                                linkReferences: self.data._linkReferences,
                                transactions: records.sort(function (A, B) {
                                    var stampA = A.timestamp;
                                    var stampB = B.timestamp;
                                    return stampA - stampB;
                                }),
                                abis: self.data._abis
                            };
                        }
                        /**
                         * delete the seen transactions
                         *
                         */

                    }, {
                        key: "clearAll",
                        value: function clearAll() {
                            var self = this;
                            self.data._listen = true;
                            self.data._replay = false;
                            self.data.journal = [];
                            self.data._createdContracts = {};
                            self.data._createdContractsReverse = {};
                            self.data._usedAccounts = {};
                            self.data._abis = {};
                            self.data._contractABIReferences = {};
                            self.data._linkReferences = {};
                            self.event.trigger('cleared', []);
                        }
                        /**
                         * run the list of records
                         *
                         * @param {Object} accounts
                         * @param {Object} options
                         * @param {Object} abis
                         * @param {Function} newContractFn
                         *
                         */

                    }, {
                        key: "run",
                        value: function run(records, accounts, options, abis, linkReferences, confirmationCb, continueCb, promptCb, alertCb, logCallBack, newContractFn) {
                            var self = this;
                            self.setListen(false);
                            logCallBack("Running ".concat(records.length, " transaction(s) ..."));
                            async.eachOfSeries(records, function (tx, index, cb) {
                                var record = self.resolveAddress(tx.record, accounts, options);
                                var abi = abis[tx.record.abi];

                                if (!abi) {
                                    return alertCb('cannot find ABI for ' + tx.record.abi + '.  Execution stopped at ' + index);
                                }
                                /* Resolve Library */


                                if (record.linkReferences && Object.keys(record.linkReferences).length) {
                                    for (var k in linkReferences) {
                                        var link = linkReferences[k];
                                        var timestamp = self.extractTimestamp(link);

                                        if (timestamp && self.data._createdContractsReverse[timestamp]) {
                                            link = self.data._createdContractsReverse[timestamp];
                                        }

                                        tx.record.bytecode = format.linkLibraryStandardFromlinkReferences(k, link.replace('0x', ''), tx.record.bytecode, tx.record.linkReferences);
                                    }
                                }
                                /* Encode params */


                                var fnABI;

                                if (tx.record.type === 'constructor') {
                                    fnABI = txHelper.getConstructorInterface(abi);
                                } else if (tx.record.type === 'fallback') {
                                    fnABI = txHelper.getFallbackInterface(abi);
                                } else if (tx.record.type === 'receive') {
                                    fnABI = txHelper.getReceiveInterface(abi);
                                } else {
                                    fnABI = txHelper.getFunction(abi, record.name + record.inputs);
                                }

                                if (!fnABI) {
                                    alertCb('cannot resolve abi of ' + JSON.stringify(record, null, '\t') + '. Execution stopped at ' + index);
                                    return cb('cannot resolve abi');
                                }

                                if (tx.record.parameters) {
                                    /* check if we have some params to resolve */
                                    try {
                                        tx.record.parameters.forEach(function (value, index) {
                                            var isString = true;

                                            if (typeof value !== 'string') {
                                                isString = false;
                                                value = JSON.stringify(value);
                                            }

                                            for (var timestamp in self.data._createdContractsReverse) {
                                                value = value.replace(new RegExp('created\\{' + timestamp + '\\}', 'g'), self.data._createdContractsReverse[timestamp]);
                                            }

                                            if (!isString) {
                                                value = JSON.parse(value);
                                            }
                                            tx.record.parameters[index] = value;
                                        });
                                    } catch (e) {
                                        return alertCb('cannot resolve input parameters ' + JSON.stringify(tx.record.parameters) + '. Execution stopped at ' + index);
                                    }
                                }

                                var data = format.encodeData(fnABI, tx.record.parameters, tx.record.bytecode);

                                if (data.error) {
                                    alertCb(data.error + '. Record:' + JSON.stringify(record, null, '\t') + '. Execution stopped at ' + index);
                                    return cb(data.error);
                                }

                                logCallBack("(".concat(index, ") ").concat(JSON.stringify(record, null, '\t')));
                                logCallBack("(".concat(index, ") data: ").concat(data.data));
                                record.data = {
                                    dataHex: data.data,
                                    funArgs: tx.record.parameters,
                                    funAbi: fnABI,
                                    contractBytecode: tx.record.bytecode,
                                    contractName: tx.record.contractName,
                                    timestamp: tx.timestamp
                                };
                                self.blockchain.runTx(record, confirmationCb, continueCb, promptCb, function (err, txResult, rawAddress) {
                                    if (err) {
                                        console.error(err);
                                        return logCallBack(err + '. Execution failed at ' + index);
                                    }

                                    if (rawAddress) {
                                        var address = helper.addressToString(rawAddress); // save back created addresses for the convertion from tokens to real adresses

                                        self.data._createdContracts[address] = tx.timestamp;
                                        self.data._createdContractsReverse[tx.timestamp] = address;
                                        newContractFn(abi, address, record.contractName);
                                    }

                                    cb(err);
                                });
                            }, function () {
                                self.setListen(true);
                            });
                        }
                    }, {
                        key: "runScenario",
                        value: function runScenario(json, continueCb, promptCb, alertCb, confirmationCb, logCallBack, cb) {
                            if (!json) {
                                return cb('a json content must be provided');
                            }

                            if (typeof json === 'string') {
                                try {
                                    json = JSON.parse(json);
                                } catch (e) {
                                    return cb('A scenario file is required. It must be json formatted');
                                }
                            }

                            try {
                                var txArray = json.transactions || [];
                                var accounts = json.accounts || [];
                                var options = json.options || {};
                                var abis = json.abis || {};
                                var linkReferences = json.linkReferences || {};
                            } catch (e) {
                                return cb('Invalid Scenario File. Please try again');
                            }

                            if (!txArray.length) {
                                return;
                            }

                            this.run(txArray, accounts, options, abis, linkReferences, confirmationCb, continueCb, promptCb, alertCb, logCallBack, function (abi, address, contractName) {
                                cb(null, abi, address, contractName);
                            });
                        }
                    }
                ]);

                return Recorder;
            }();

            module.exports = Recorder;

            /***/
        }),

        /***/ 1691:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.makeUdapp = makeUdapp;

            var _registry = _interopRequireDefault(__webpack_require__(576));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            var remixLib = __webpack_require__(508);

            var EventsDecoder = remixLib.execution.EventsDecoder;

            function makeUdapp(blockchain, compilersArtefacts, logHtmlCallback) {
                // ----------------- Tx listener -----------------
                var _transactionReceipts = {};

                var transactionReceiptResolver = function transactionReceiptResolver(tx, cb) {
                    if (_transactionReceipts[tx.hash]) {
                        return cb(null, _transactionReceipts[tx.hash]);
                    }

                    blockchain.web3().eth.getTransactionReceipt(tx.hash, function (error, receipt) {
                        if (error) {
                            return cb(error);
                        }

                        _transactionReceipts[tx.hash] = receipt;
                        cb(null, receipt);
                    });
                };

                var txlistener = blockchain.getTxListener({
                    api: {
                        contracts: function contracts() {
                            if (compilersArtefacts.__last) {
                                return compilersArtefacts.getAllContractDatas();
                            }
                            return null;
                        },
                        resolveReceipt: transactionReceiptResolver
                    }
                });

                _registry["default"].getInstance().put({
                    api: txlistener,
                    name: 'txlistener'
                });

                blockchain.startListening(txlistener);
                var eventsDecoder = new EventsDecoder({
                    resolveReceipt: transactionReceiptResolver
                });
                txlistener.startListening();

                _registry["default"].getInstance().put({
                    api: eventsDecoder,
                    name: 'eventsDecoder'
                });
            }

            /***/
        }),

        /***/ 1692:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixEngine = void 0;

            var _engine = __webpack_require__(509);

            var _events = __webpack_require__(510);

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var RemixEngine = /*#__PURE__*/function (_Engine) {
                _inherits(RemixEngine, _Engine);

                var _super = _createSuper(RemixEngine);

                function RemixEngine() {
                    var _this;

                    _classCallCheck(this, RemixEngine);

                    _this = _super.call(this);
                    _this.event = new _events.EventEmitter();
                    return _this;
                }

                _createClass(RemixEngine, [
                    {
                        key: "setPluginOption",
                        value: function setPluginOption(_ref) {
                            var name = _ref.name,
                                kind = _ref.kind;
                            if (kind === 'provider') {
                                return {
                                    queueTimeout: 60000 * 2
                                };
                            }
                            if (name === 'LearnEth') {
                                return {
                                    queueTimeout: 60000
                                };
                            }
                            if (name === 'dGitProvider') {
                                return {
                                    queueTimeout: 60000 * 4
                                };
                            }
                            if (name === 'slither') {
                                return {
                                    queueTimeout: 60000 * 4
                                };
                            } // Requires when a solc version is installed

                            if (name === 'hardhat') {
                                return {
                                    queueTimeout: 60000 * 4
                                };
                            }
                            if (name === 'localPlugin') {
                                return {
                                    queueTimeout: 60000 * 4
                                };
                            }
                            if (name === 'notification') {
                                return {
                                    queueTimeout: 60000 * 4
                                };
                            }
                            return {
                                queueTimeout: 10000
                            };
                        }
                    }, {
                        key: "onRegistration",
                        value: function onRegistration(plugin) {
                            this.event.emit('onRegistration', plugin);
                        }
                    }
                ]);

                return RemixEngine;
            }(_engine.Engine);

            exports.RemixEngine = RemixEngine;

            /***/
        }),

        /***/ 1693:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixAppManager = void 0;
            exports.canActivate = canActivate;
            exports.isNative = isNative;

            var _engine = __webpack_require__(509);

            var _events = __webpack_require__(510);

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            var _engineWeb = __webpack_require__(531);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var _paq = window._paq = window._paq || [];

            var requiredModules = [// services + layout views + system views
                'manager', 'config', 'compilerArtefacts', 'compilerMetadata', 'contextualListener', 'editor', 'offsetToLineColumnConverter', 'network', 'theme', 'fileManager', 'contentImport', 'blockchain', 'web3Provider', 'scriptRunner', 'fetchAndCompile', 'mainPanel', 'hiddenPanel', 'sidePanel', 'menuicons', 'filePanel', 'terminal', 'settings', 'pluginManager', 'tabs', 'udapp', 'dGitProvider', 'solidity-logic', 'gistHandler', 'layout', 'notification', 'permissionhandler', 'walkthrough'
            ];
            var dependentModules = ['git', 'hardhat', 'slither']; // module which shouldn't be manually activated (e.g git is activated by remixd)

            function isNative(name) {
                var nativePlugins = ['vyper', 'workshops', 'debugger', 'remixd', 'menuicons', 'solidity', 'hardhat-provider', 'solidityStaticAnalysis', 'solidityUnitTesting', 'layout', 'notification'];
                return nativePlugins.includes(name) || requiredModules.includes(name);
            }

            /**
             * Checks if plugin caller 'from' is allowed to activate plugin 'to'
             * The caller can have 'canActivate' as a optional property in the plugin profile.
             * This is an array containing the 'name' property of the plugin it wants to call.
             * canActivate = ['plugin1-to-call','plugin2-to-call',....]
             * or the plugin is allowed by default because it is native
             *
             * @param {any, any}
             * @returns {boolean}
             */


            function canActivate(from, to) {
                return ['ethdoc'].includes(from.name) || isNative(from.name) || to && from && from.canActivate && from.canActivate.includes(to.name);
            }

            var RemixAppManager = /*#__PURE__*/function (_PluginManager) {
                _inherits(RemixAppManager, _PluginManager);

                var _super = _createSuper(RemixAppManager);

                function RemixAppManager() {
                    var _this;

                    _classCallCheck(this, RemixAppManager);

                    _this = _super.call(this);
                    _this.event = new _events.EventEmitter();
                    _this.pluginsDirectory = 'https://raw.githubusercontent.com/ethereum/remix-plugins-directory/master/build/metadata.json';
                    _this.pluginLoader = new PluginLoader();
                    return _this;
                }

                _createClass(RemixAppManager, [
                    {
                        key: "canActivatePlugin",
                        value: function () {
                            var _canActivatePlugin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(from, to) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                return _context.abrupt("return", canActivate(from, to));

                                            case 1:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee);
                            }));

                            function canActivatePlugin(_x, _x2) {
                                return _canActivatePlugin.apply(this, arguments);
                            }

                            return canActivatePlugin;
                        }()
                    }, {
                        key: "canDeactivatePlugin",
                        value: function () {
                            var _canDeactivatePlugin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(from, to) {
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                if (!requiredModules.includes(to.name)) {
                                                    _context2.next = 2;
                                                    break;
                                                }

                                                return _context2.abrupt("return", false);

                                            case 2:
                                                return _context2.abrupt("return", isNative(from.name));

                                            case 3:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2);
                            }));

                            function canDeactivatePlugin(_x3, _x4) {
                                return _canDeactivatePlugin.apply(this, arguments);
                            }

                            return canDeactivatePlugin;
                        }()
                    }, {
                        key: "canDeactivate",
                        value: function () {
                            var _canDeactivate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(from, to) {
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                return _context3.abrupt("return", this.canDeactivatePlugin(from, to));

                                            case 1:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function canDeactivate(_x5, _x6) {
                                return _canDeactivate.apply(this, arguments);
                            }

                            return canDeactivate;
                        }()
                    }, {
                        key: "deactivatePlugin",
                        value: function () {
                            var _deactivatePlugin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(name) {
                                var to, from;
                                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                        switch (_context4.prev = _context4.next) {
                                            case 0:
                                                _context4.next = 2;
                                                return this.getProfile(name);

                                            case 2:
                                                to = _context4.sent;
                                                _context4.next = 5;
                                                return this.getProfile(this.requestFrom);

                                            case 5:
                                                from = _context4.sent;

                                                if (!this.canDeactivatePlugin(from, to)) {
                                                    _context4.next = 9;
                                                    break;
                                                }

                                                _context4.next = 9;
                                                return this.toggleActive(name);

                                            case 9:
                                            case "end":
                                                return _context4.stop();
                                        }
                                    }
                                }, _callee4, this);
                            }));

                            function deactivatePlugin(_x7) {
                                return _deactivatePlugin.apply(this, arguments);
                            }

                            return deactivatePlugin;
                        }()
                    }, {
                        key: "canCall",
                        value: function () {
                            var _canCall = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(from, to, method, message) {
                                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                if (!(to !== this.currentRequest.from)) {
                                                    _context5.next = 2;
                                                    break;
                                                }

                                                return _context5.abrupt("return", false);

                                            case 2:
                                                if (!isNative(from)) {
                                                    _context5.next = 4;
                                                    break;
                                                }

                                                return _context5.abrupt("return", true);

                                            case 4:
                                                _context5.next = 6;

                                                return this.call('permissionhandler', 'askPermission', this.profiles[from], this.profiles[to], method, message);

                                            case 6:
                                                return _context5.abrupt("return", _context5.sent);

                                            case 7:
                                            case "end":
                                                return _context5.stop();
                                        }
                                    }
                                }, _callee5, this);
                            }));

                            function canCall(_x8, _x9, _x10, _x11) {
                                return _canCall.apply(this, arguments);
                            }

                            return canCall;
                        }()
                    }, {
                        key: "onPluginActivated",
                        value: function onPluginActivated(plugin) {
                            this.pluginLoader.set(plugin, this.actives);
                            this.event.emit('activate', plugin);
                            this.emit('activate', plugin);
                            if (!requiredModules.includes(plugin.name)) {
                                _paq.push(['trackEvent', 'pluginManager', 'activate', plugin.name]);
                            }
                        }
                    }, {
                        key: "getAll",
                        value: function getAll() {
                            var _this2 = this;

                            return Object.keys(this.profiles).map(function (p) {
                                return _this2.profiles[p];
                            });
                        }
                    }, {
                        key: "getIds",
                        value: function getIds() {
                            return Object.keys(this.profiles);
                        }
                    }, {
                        key: "onPluginDeactivated",
                        value: function onPluginDeactivated(plugin) {
                            this.pluginLoader.set(plugin, this.actives);
                            this.event.emit('deactivate', plugin);

                            _paq.push(['trackEvent', 'pluginManager', 'deactivate', plugin.name]);
                        }
                    }, {
                        key: "isDependent",
                        value: function isDependent(name) {
                            return dependentModules.includes(name);
                        }
                    }, {
                        key: "isRequired",
                        value: function isRequired(name) {
                            // excluding internal use plugins
                            return requiredModules.includes(name);
                        }
                    }, {
                        key: "registeredPlugins",
                        value: function () {
                            var _registeredPlugins = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                                var plugins, res, savedPlugins;
                                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                    while (1) {
                                        switch (_context6.prev = _context6.next) {
                                            case 0:
                                                _context6.prev = 0;
                                                _context6.next = 3;
                                                return fetch(this.pluginsDirectory);

                                            case 3:
                                                res = _context6.sent;
                                                _context6.next = 6;
                                                return res.json();

                                            case 6:
                                                plugins = _context6.sent;
                                                plugins = plugins.filter(function (plugin) {
                                                    if (plugin.targets && Array.isArray(plugin.targets) && plugin.targets.length > 0) {
                                                        return plugin.targets.includes('remix');
                                                    }

                                                    return true;
                                                });
                                                localStorage.setItem('plugins-directory', JSON.stringify(plugins));
                                                _context6.next = 16;
                                                break;

                                            case 11:
                                                _context6.prev = 11;
                                                _context6.t0 = _context6["catch"](0);
                                                console.log('getting plugins list from localstorage...');
                                                savedPlugins = localStorage.getItem('plugins-directory');

                                                if (savedPlugins) {
                                                    try {
                                                        plugins = JSON.parse(savedPlugins);
                                                    } catch (e) {
                                                        console.error(e);
                                                    }
                                                }

                                            case 16:
                                                return _context6.abrupt("return", plugins.map(function (plugin) {
                                                    return new _engineWeb.IframePlugin(plugin); // return new IframeReactPlugin(plugin)
                                                }));

                                            case 17:
                                            case "end":
                                                return _context6.stop();
                                        }
                                    }
                                }, _callee6, this, [[0, 11]]);
                            }));

                            function registeredPlugins() {
                                return _registeredPlugins.apply(this, arguments);
                            }

                            return registeredPlugins;
                        }()
                    }, {
                        key: "registerContextMenuItems",
                        value: function () {
                            var _registerContextMenuItems = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                    while (1) {
                                        switch (_context7.prev = _context7.next) {
                                            case 0:
                                                _context7.next = 2;
                                                return this.call('filePanel', 'registerContextMenuItem', {
                                                    id: 'flattener',
                                                    name: 'flattenFileCustomAction',
                                                    label: 'Flatten',
                                                    type: [],
                                                    extension: ['.sol'],
                                                    path: [],
                                                    pattern: [],
                                                    sticky: true
                                                });

                                            case 2:
                                            case "end":
                                                return _context7.stop();
                                        }
                                    }
                                }, _callee7, this);
                            }));

                            function registerContextMenuItems() {
                                return _registerContextMenuItems.apply(this, arguments);
                            }

                            return registerContextMenuItems;
                        }()
                    }
                ]);

                return RemixAppManager;
            }(_engine.PluginManager);
            /** @class Reference loaders.
             *  A loader is a get,set based object which load a workspace from a defined sources.
             *  (localStorage, queryParams)
             **/


            exports.RemixAppManager = RemixAppManager;

            var PluginLoader = /*#__PURE__*/function () {
                function PluginLoader() {
                    var _this3 = this;

                    _classCallCheck(this, PluginLoader);

                    var queryParams = new _queryParams["default"]();
                    this.donotAutoReload = ['remixd', 'git']; // that would be a bad practice to force loading some plugins at page load.

                    this.loaders = {};
                    this.loaders.localStorage = {
                        set: function set(plugin, actives) {
                            var saved = actives.filter(function (name) {
                                return !_this3.donotAutoReload.includes(name);
                            });
                            localStorage.setItem('workspace', JSON.stringify(saved));
                        },
                        get: function get() {
                            return JSON.parse(localStorage.getItem('workspace'));
                        }
                    };
                    this.loaders.queryParams = {
                        set: function set() {
                        },
                        get: function get() {
                            var _queryParams$get = queryParams.get(),
                                activate = _queryParams$get.activate;

                            if (!activate) {
                                return [];
                            }
                            return activate.split(',');
                        }
                    };
                    this.current = queryParams.get().activate ? 'queryParams' : 'localStorage';
                }

                _createClass(PluginLoader, [
                    {
                        key: "currentLoader",
                        get: function get() {
                            return this.loaders[this.current];
                        }
                    }, {
                        key: "set",
                        value: function set(plugin, actives) {
                            this.currentLoader.set(plugin, actives);
                        }
                    }, {
                        key: "get",
                        value: function get() {
                            return this.currentLoader.get();
                        }
                    }
                ]);

                return PluginLoader;
            }();

            /***/
        }),

        /***/ 1694:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ThemeModule = void 0;

            var _engine = __webpack_require__(509);

            var _events = __webpack_require__(510);

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _registry = _interopRequireDefault(__webpack_require__(576));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            _defineProperty(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var _paq = window._paq = window._paq || [];

            var themes = [
                {
                    name: 'Dark',
                    quality: 'dark',
                    url: 'assets/css/themes/remix-dark_tvx1s2.css'
                }, {
                    name: 'Light',
                    quality: 'light',
                    url: 'assets/css/themes/remix-light_powaqg.css'
                }, {
                    name: 'Midcentury',
                    quality: 'light',
                    url: 'assets/css/themes/remix-midcentury_hrzph3.css'
                }, {
                    name: 'Black',
                    quality: 'dark',
                    url: 'assets/css/themes/remix-black_undtds.css'
                }, {
                    name: 'Candy',
                    quality: 'light',
                    url: 'assets/css/themes/remix-candy_ikhg4m.css'
                }, {
                    name: 'Cerulean',
                    quality: 'light',
                    url: 'assets/css/themes/bootstrap-cerulean.min.css'
                }, {
                    name: 'Flatly',
                    quality: 'light',
                    url: 'assets/css/themes/bootstrap-flatly.min.css'
                }, {
                    name: 'Spacelab',
                    quality: 'light',
                    url: 'assets/css/themes/bootstrap-spacelab.min.css'
                }, {
                    name: 'Cyborg',
                    quality: 'dark',
                    url: 'assets/css/themes/bootstrap-cyborg.min.css'
                }
            ];
            var profile = {
                name: 'theme',
                events: ['themeChanged'],
                methods: ['switchTheme', 'getThemes', 'currentTheme', 'fixInvert'],
                version: packageJson.version,
                kind: 'theme'
            };

            var ThemeModule = /*#__PURE__*/function (_Plugin) {
                _inherits(ThemeModule, _Plugin);

                var _super = _createSuper(ThemeModule);

                function ThemeModule() {
                    var _this;

                    _classCallCheck(this, ThemeModule);

                    _this = _super.call(this, profile);
                    _this.events = new _events.EventEmitter();
                    _this._deps = {
                        config: _registry["default"].getInstance().get('config').api
                    };
                    _this.themes = themes.reduce(function (acc, theme) {
                        theme.url = window.location.origin + window.location.pathname + theme.url;
                        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, theme.name.toLocaleLowerCase(), theme));
                    }, {});
                    _this._paq = _paq;
                    var queryTheme = new _queryParams["default"]().get().theme;
                    queryTheme = queryTheme && queryTheme.toLocaleLowerCase();
                    queryTheme = _this.themes[queryTheme] ? queryTheme : null;

                    var currentTheme = _this._deps.config.get('settings/theme');

                    currentTheme = currentTheme && currentTheme.toLocaleLowerCase();
                    currentTheme = _this.themes[currentTheme] ? currentTheme : null;
                    _this.currentThemeState = {
                        queryTheme: queryTheme,
                        currentTheme: currentTheme
                    };
                    _this.active = queryTheme || currentTheme || 'dark';
                    _this.forced = !!queryTheme;
                    return _this;
                }

                /** Return the active theme */


                _createClass(ThemeModule, [
                    {
                        key: "currentTheme",
                        value: function currentTheme() {
                            return this.themes[this.active];
                        }
                        /** Returns all themes as an array */

                    }, {
                        key: "getThemes",
                        value: function getThemes() {
                            var _this2 = this;

                            return Object.keys(this.themes).map(function (key) {
                                return _this2.themes[key];
                            });
                        }
                        /**
                         * Init the theme
                         */

                    }, {
                        key: "initTheme",
                        value: function initTheme(callback) {
                            // callback is setTimeOut in app.js which is always passed
                            if (callback) {
                                this.initCallback = callback;
                            }

                            if (this.active) {
                                var nextTheme = this.themes[this.active]; // Theme

                                document.documentElement.style.setProperty('--theme', nextTheme.quality);
                                var theme = document.createElement('link');
                                theme.setAttribute('rel', 'stylesheet');
                                theme.setAttribute('href', nextTheme.url);
                                theme.setAttribute('id', 'theme-link');
                                theme.addEventListener('load', function () {
                                    if (callback) {
                                        callback();
                                    }
                                });
                                document.head.insertBefore(theme, document.head.firstChild);
                            }
                        }
                        /**
                         * Change the current theme
                         * @param {string} [themeName] - The name of the theme
                         */

                    }, {
                        key: "switchTheme",
                        value: function switchTheme(themeName) {
                            var _this3 = this;

                            themeName = themeName && themeName.toLocaleLowerCase();

                            if (themeName && !Object.keys(this.themes).includes(themeName)) {
                                throw new Error("Theme ".concat(themeName, " doesn't exist"));
                            }

                            var next = themeName || this.active; // Name

                            if (next === this.active) {
                                return;
                            } // --> exit out of this method

                            _paq.push(['trackEvent', 'themeModule', 'switchTo', next]);

                            var nextTheme = this.themes[next]; // Theme

                            if (!this.forced) {
                                this._deps.config.set('settings/theme', next);
                            }
                            document.getElementById('theme-link').remove();
                            var theme = document.createElement('link');
                            theme.setAttribute('rel', 'stylesheet');
                            theme.setAttribute('href', nextTheme.url);
                            theme.setAttribute('id', 'theme-link');
                            theme.addEventListener('load', function () {
                                _this3.emit('themeLoaded', nextTheme);

                                _this3.events.emit('themeLoaded', nextTheme);
                            });
                            document.head.insertBefore(theme, document.head.firstChild);
                            document.documentElement.style.setProperty('--theme', nextTheme.quality);
                            if (themeName) {
                                this.active = themeName;
                            } // TODO: Only keep `this.emit` (issue#2210)

                            this.emit('themeChanged', nextTheme);
                            this.events.emit('themeChanged', nextTheme);
                        }
                        /**
                         * fixes the invertion for images since this should be adjusted when we switch between dark/light qualified themes
                         * @param {element} [image] - the dom element which invert should be fixed to increase visibility
                         */

                    }, {
                        key: "fixInvert",
                        value: function fixInvert(image) {
                            var invert = this.currentTheme().quality === 'dark' ? 1 : 0;

                            if (image) {
                                image.style.filter = "invert(".concat(invert, ")");
                            }
                        }
                    }
                ]);

                return ThemeModule;
            }(_engine.Plugin);

            exports.ThemeModule = ThemeModule;

            /***/
        }),

        /***/ 1695:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.profile = exports.NetworkModule = void 0;

            var _engine = __webpack_require__(509);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _web = __webpack_require__(521);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var profile = {
                name: 'network',
                description: 'Manage the network (mainnet, ropsten, goerli...) and the provider (web3, vm, injected)',
                methods: ['getNetworkProvider', 'getEndpoint', 'detectNetwork', 'addNetwork', 'removeNetwork'],
                version: packageJson.version,
                kind: 'network'
            }; // Network API has :
            // - events: ['providerChanged']
            // - methods: ['getNetworkProvider', 'getEndpoint', 'detectNetwork', 'addNetwork', 'removeNetwork']

            exports.profile = profile;

            var NetworkModule = /*#__PURE__*/function (_Plugin) {
                _inherits(NetworkModule, _Plugin);

                var _super = _createSuper(NetworkModule);

                function NetworkModule(blockchain) {
                    var _this;

                    _classCallCheck(this, NetworkModule);

                    _this = _super.call(this, profile);
                    _this.blockchain = blockchain; // TODO: See with remix-lib to make sementic coherent

                    _this.blockchain.event.register('contextChanged', function (provider) {
                        _this.emit('providerChanged', provider);
                    });

                    return _this;
                }

                /** Return the current network provider (web3, vm, injected) */


                _createClass(NetworkModule, [
                    {
                        key: "getNetworkProvider",
                        value: function getNetworkProvider() {
                            return this.blockchain.getProvider();
                        }
                        /** Return the current network */

                    }, {
                        key: "detectNetwork",
                        value: function detectNetwork() {
                            var _this2 = this;

                            return new Promise(function (resolve, reject) {
                                _this2.blockchain.detectNetwork(function (error, network) {
                                    error ? reject(error) : resolve(network);
                                });
                            });
                        }
                        /** Return the url only if network provider is 'web3' */

                    }, {
                        key: "getEndpoint",
                        value: function getEndpoint() {
                            var provider = this.blockchain.getProvider();

                            if (provider !== 'web3') {
                                throw new Error('no endpoint: current provider is either injected or vm');
                            }

                            return this.blockchain.web3().currentProvider.host;
                        }
                        /** Add a custom network to the list of available networks */

                    }, {
                        key: "addNetwork",
                        value: function addNetwork(network) {
                            // { name, url }
                            var provider = network.url === 'ipc' ? new _web.Web3.providers.IpcProvider() : new _web.Web3.providers.HttpProvider(network.url);
                            this.blockchain.addProvider({
                                name: network.name,
                                provider: provider
                            });
                        }
                        /** Remove a network to the list of availble networks */

                    }, {
                        key: "removeNetwork",
                        value: function removeNetwork(name) {
                            this.blockchain.removeProvider(name);
                        }
                    }
                ]);

                return NetworkModule;
            }(_engine.Plugin);

            exports.NetworkModule = NetworkModule;

            /***/
        }),

        /***/ 1696:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.profile = exports.Web3ProviderModule = void 0;

            var _engine = __webpack_require__(509);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var profile = {
                name: 'web3Provider',
                displayName: 'Global Web3 Provider',
                description: 'Represent the current web3 provider used by the app at global scope',
                methods: ['sendAsync'],
                version: packageJson.version,
                kind: 'provider'
            };
            exports.profile = profile;

            var Web3ProviderModule = /*#__PURE__*/function (_Plugin) {
                _inherits(Web3ProviderModule, _Plugin);

                var _super = _createSuper(Web3ProviderModule);

                function Web3ProviderModule(blockchain) {
                    var _this;

                    _classCallCheck(this, Web3ProviderModule);

                    _this = _super.call(this, profile);
                    _this.blockchain = blockchain;
                    return _this;
                }

                /*
    that is used by plugins to call the current ethereum provider.
    Should be taken carefully and probably not be release as it is now.
  */


                _createClass(Web3ProviderModule, [
                    {
                        key: "sendAsync",
                        value: function sendAsync(payload) {
                            var _this2 = this;

                            return new Promise(function (resolve, reject) {
                                var provider = _this2.blockchain.web3().currentProvider; // see https://github.com/ethereum/web3.js/pull/1018/files#diff-d25786686c1053b786cc2626dc6e048675050593c0ebaafbf0814e1996f22022R129


                                provider[provider.sendAsync ? 'sendAsync' : 'send'](payload, function (error, message) {
                                    if (error) {
                                        return reject(error);
                                    }
                                    resolve(message);
                                });
                            });
                        }
                    }
                ]);

                return Web3ProviderModule;
            }(_engine.Plugin);

            exports.Web3ProviderModule = Web3ProviderModule;

            /***/
        }),

        /***/ 1697:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SidePanel = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _panel = __webpack_require__(765);

            var _panel2 = __webpack_require__(197);

            var _package = _interopRequireDefault(__webpack_require__(194));

            var _panelHeader = _interopRequireDefault(__webpack_require__(1698));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                    _get = Reflect.get;
                } else {
                    _get = function _get(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) {
                            return;
                        }
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                            return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                    };
                }
                return _get.apply(this, arguments);
            }

            function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                    object = _getPrototypeOf(object);
                    if (object === null) {
                        break;
                    }
                }
                return object;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            // const csjs = require('csjs-inject')
            var sidePanel = {
                name: 'sidePanel',
                displayName: 'Side Panel',
                description: '',
                version: _package["default"].version,
                methods: ['addView', 'removeView']
            };

            var SidePanel = /*#__PURE__*/function (_AbstractPanel) {
                _inherits(SidePanel, _AbstractPanel);

                var _super = _createSuper(SidePanel);

                function SidePanel() {
                    var _this;

                    _classCallCheck(this, SidePanel);

                    _this = _super.call(this, sidePanel);

                    _defineProperty(_assertThisInitialized(_this), "sideelement", void 0);

                    _this.sideelement = document.createElement('section');

                    _this.sideelement.setAttribute('class', 'panel plugin-manager');

                    return _this;
                }

                _createClass(SidePanel, [
                    {
                        key: "onActivation",
                        value: function onActivation() {
                            var _this2 = this;

                            this.renderComponent(); // Toggle content

                            this.on('menuicons', 'toggleContent', function (name) {
                                if (!_this2.plugins[name]) {
                                    return;
                                }

                                if (_this2.plugins[name].active) {
                                    // TODO: Only keep `this.emit` (issue#2210)
                                    _this2.emit('toggle', name);

                                    _this2.events.emit('toggle', name);

                                    return;
                                }

                                _this2.showContent(name); // TODO: Only keep `this.emit` (issue#2210)


                                _this2.emit('showing', name);

                                _this2.events.emit('showing', name);
                            }); // Force opening

                            this.on('menuicons', 'showContent', function (name) {
                                if (!_this2.plugins[name]) {
                                    return;
                                }

                                _this2.showContent(name); // TODO: Only keep `this.emit` (issue#2210)


                                _this2.emit('showing', name);

                                _this2.events.emit('showing', name);
                            });
                        }
                    }, {
                        key: "focus",
                        value: function focus(name) {
                            this.emit('focusChanged', name);

                            _get(_getPrototypeOf(SidePanel.prototype), "focus", this).call(this, name);
                        }
                    }, {
                        key: "removeView",
                        value: function removeView(profile) {
                            if (this.plugins[profile.name].active) {
                                this.call('menuicons', 'select', 'filePanel');
                            }

                            _get(_getPrototypeOf(SidePanel.prototype), "removeView", this).call(this, profile);

                            this.emit('pluginDisabled', profile.name);
                            this.call('menuicons', 'unlinkContent', profile);
                            this.renderComponent();
                        }
                    }, {
                        key: "addView",
                        value: function addView(profile, view) {
                            _get(_getPrototypeOf(SidePanel.prototype), "addView", this).call(this, profile, view);

                            this.call('menuicons', 'linkContent', profile);
                            this.renderComponent();
                        }
                        /**
                         * Display content and update the header
                         * @param {String} name The name of the plugin to display
                         */

                    }, {
                        key: "showContent",
                        value: function () {
                            var _showContent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _get(_getPrototypeOf(SidePanel.prototype), "showContent", this).call(this, name);

                                                this.emit('focusChanged', name);
                                                this.renderComponent();

                                            case 3:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function showContent(_x) {
                                return _showContent.apply(this, arguments);
                            }

                            return showContent;
                        }()
                    }, {
                        key: "render",
                        value: function render() {
                            return this.sideelement;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_panel2.RemixPluginPanel, {
                                header: /*#__PURE__*/_react["default"].createElement(_panelHeader["default"], {
                                    plugins: this.plugins
                                }),
                                plugins: this.plugins
                            }), this.sideelement);
                        }
                    }
                ]);

                return SidePanel;
            }(_panel.AbstractPanel);

            exports.SidePanel = SidePanel;

            /***/
        }),

        /***/ 1698:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(142);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable jsx-a11y/anchor-has-content */
            const RemixUIPanelHeader = props => {
                const [plugin, setPlugin] = (0, _react.useState)();
                (0, _react.useEffect)(() => {
                    if (props.plugins) {
                        const p = Object.values(props.plugins).find(pluginRecord => {
                            return pluginRecord.active === true;
                        });
                        setPlugin(p);
                    }
                }, [props]);
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("header", {
                    className: "swapitHeader",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                        "data-id": "sidePanelSwapitTitle",
                        children: (plugin === null || plugin === void 0 ? void 0 : plugin.profile.displayName) || (plugin === null || plugin === void 0 ? void 0 : plugin.profile.name)
                    }), plugin !== null && plugin !== void 0 && plugin.profile.documentation ? /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                        href: plugin.profile.documentation,
                        className: "titleInfo mb-2",
                        title: "link to documentation",
                        target: "_blank",
                        rel: "noreferrer",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                            "aria-hidden": "true",
                            className: "fas fa-book"
                        })
                    }) : ''
                    ]
                });
            };

            var _default = RemixUIPanelHeader;
            exports.default = _default;

            /***/
        }),

        /***/ 1699:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.HiddenPanel = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _panel = __webpack_require__(765);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _panel2 = __webpack_require__(197);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                    _get = Reflect.get;
                } else {
                    _get = function _get(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) {
                            return;
                        }
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                            return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                    };
                }
                return _get.apply(this, arguments);
            }

            function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                    object = _getPrototypeOf(object);
                    if (object === null) {
                        break;
                    }
                }
                return object;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'hiddenPanel',
                displayName: 'Hidden Panel',
                description: '',
                version: packageJson.version,
                methods: ['addView', 'removeView']
            };

            var HiddenPanel = /*#__PURE__*/function (_AbstractPanel) {
                _inherits(HiddenPanel, _AbstractPanel);

                var _super = _createSuper(HiddenPanel);

                function HiddenPanel() {
                    var _this;

                    _classCallCheck(this, HiddenPanel);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "el", void 0);

                    _this.el = document.createElement('div');

                    _this.el.setAttribute('class', 'pluginsContainer');

                    return _this;
                }

                _createClass(HiddenPanel, [
                    {
                        key: "addView",
                        value: function addView(profile, view) {
                            _get(_getPrototypeOf(HiddenPanel.prototype), "removeView", this).call(this, profile);

                            _get(_getPrototypeOf(HiddenPanel.prototype), "addView", this).call(this, profile, view);

                            this.renderComponent();
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            return this.el;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_panel2.RemixPluginPanel, {
                                header: /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null),
                                plugins: this.plugins
                            }), this.el);
                        }
                    }
                ]);

                return HiddenPanel;
            }(_panel.AbstractPanel);

            exports.HiddenPanel = HiddenPanel;

            /***/
        }),

        /***/ 1700:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VerticalIcons = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _package = _interopRequireDefault(__webpack_require__(194));

            var _engine = __webpack_require__(509);

            var _events = __webpack_require__(510);

            var _verticalIconsPanel = __webpack_require__(1701);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
            }

            function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) {
                    return;
                }
                if (typeof o === "string") {
                    return _arrayLikeToArray(o, minLen);
                }
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor) {
                    n = o.constructor.name;
                }
                if (n === "Map" || n === "Set") {
                    return Array.from(o);
                }
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
                    return _arrayLikeToArray(o, minLen);
                }
            }

            function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
                    return Array.from(iter);
                }
            }

            function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr)) {
                    return _arrayLikeToArray(arr);
                }
            }

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) {
                    len = arr.length;
                }
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            _defineProperty(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'menuicons',
                displayName: 'Vertical Icons',
                description: '',
                version: _package["default"].version,
                methods: ['select', 'unlinkContent', 'linkContent'],
                events: ['toggleContent', 'showContent']
            };

            var VerticalIcons = /*#__PURE__*/function (_Plugin) {
                _inherits(VerticalIcons, _Plugin);

                var _super = _createSuper(VerticalIcons);

                function VerticalIcons() {
                    var _this;

                    _classCallCheck(this, VerticalIcons);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "events", void 0);

                    _defineProperty(_assertThisInitialized(_this), "htmlElement", void 0);

                    _defineProperty(_assertThisInitialized(_this), "icons", {});

                    _this.events = new _events.EventEmitter();
                    _this.htmlElement = document.createElement('div');

                    _this.htmlElement.setAttribute('id', 'icon-panel');

                    return _this;
                }

                _createClass(VerticalIcons, [
                    {
                        key: "renderComponent",
                        value: function renderComponent() {
                            var fixedOrder = ['filePanel', 'solidity', 'udapp', 'debugger', 'solidityStaticAnalysis', 'solidityUnitTesting', 'pluginManager'];
                            var divived = Object.values(this.icons).map(function (value) {
                                return _objectSpread(_objectSpread({}, value), {}, {
                                    isRequired: fixedOrder.indexOf(value.profile.name) > -1
                                });
                            }).sort(function (a, b) {
                                return a.timestamp - b.timestamp;
                            });
                            var required = divived.filter(function (value) {
                                return value.isRequired;
                            }).sort(function (a, b) {
                                return fixedOrder.indexOf(a.profile.name) - fixedOrder.indexOf(b.profile.name);
                            });
                            var sorted = [].concat(_toConsumableArray(required), _toConsumableArray(divived.filter(function (value) {
                                return !value.isRequired;
                            })));

                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_verticalIconsPanel.RemixUiVerticalIconsPanel, {
                                verticalIconsPlugin: this,
                                icons: sorted
                            }), this.htmlElement);
                        }
                    }, {
                        key: "onActivation",
                        value: function onActivation() {
                            var _this2 = this;

                            this.renderComponent();
                            this.on('sidePanel', 'focusChanged', function (name) {
                                Object.keys(_this2.icons).map(function (o) {
                                    _this2.icons[o].active = false;
                                });
                                _this2.icons[name].active = true;

                                _this2.renderComponent();
                            });
                        }
                    }, {
                        key: "linkContent",
                        value: function () {
                            var _linkContent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(profile) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                if (profile.icon) {
                                                    _context.next = 2;
                                                    break;
                                                }

                                                return _context.abrupt("return");

                                            case 2:
                                                if (!profile.kind) {
                                                    profile.kind = 'none';
                                                }
                                                _context.t0 = profile;
                                                _context.next = 6;
                                                return this.call('manager', 'canDeactivate', this.profile, profile);

                                            case 6:
                                                _context.t1 = _context.sent;
                                                _context.t2 = Date.now();
                                                this.icons[profile.name] = {
                                                    profile: _context.t0,
                                                    active: false,
                                                    canbeDeactivated: _context.t1,
                                                    timestamp: _context.t2
                                                };
                                                this.renderComponent();

                                            case 10:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function linkContent(_x) {
                                return _linkContent.apply(this, arguments);
                            }

                            return linkContent;
                        }()
                    }, {
                        key: "unlinkContent",
                        value: function unlinkContent(profile) {
                            delete this.icons[profile.name];
                            this.renderComponent();
                        }
                    }, {
                        key: "activateHome",
                        value: function () {
                            var _activateHome = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _context2.next = 2;
                                                return this.call('manager', 'activatePlugin', 'home');

                                            case 2:
                                                _context2.next = 4;
                                                return this.call('tabs', 'focus', 'home');

                                            case 4:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function activateHome() {
                                return _activateHome.apply(this, arguments);
                            }

                            return activateHome;
                        }()
                        /**
                         * Set an icon as active
                         * @param {string} name Name of profile of the module to activate
                         */

                    }, {
                        key: "select",
                        value: function select(name) {
                            // TODO: Only keep `this.emit` (issue#2210)
                            this.emit('showContent', name);
                            this.events.emit('showContent', name);
                        }
                        /**
                         * Toggles the side panel for plugin
                         * @param {string} name Name of profile of the module to activate
                         */

                    }, {
                        key: "toggle",
                        value: function toggle(name) {
                            // TODO: Only keep `this.emit` (issue#2210)
                            this.emit('toggleContent', name);
                            this.events.emit('toggleContent', name);
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            return this.htmlElement;
                        }
                    }
                ]);

                return VerticalIcons;
            }(_engine.Plugin);

            exports.VerticalIcons = VerticalIcons;

            /***/
        }),

        /***/ 1701:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            Object.defineProperty(exports, "IconRecord", {
                enumerable: true,
                get: function () {
                    return _types.IconRecord;
                }
            });
            Object.defineProperty(exports, "RemixUiVerticalIconsPanel", {
                enumerable: true,
                get: function () {
                    return _remixUiVerticalIconsPanel.default;
                }
            });

            var _remixUiVerticalIconsPanel = _interopRequireDefault(__webpack_require__(1702));

            var _types = __webpack_require__(1714);

            /***/
        }),

        /***/ 1702:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(1703);

            var _IconList = _interopRequireDefault(__webpack_require__(1705));

            var _Home = _interopRequireDefault(__webpack_require__(1710));

            var _verticalScrollReducer = __webpack_require__(1712);

            var _Chevron = __webpack_require__(1713);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            const initialState = {
                scrollHeight: 0,
                clientHeight: 0,
                scrollState: false
            };

            const RemixUiVerticalIconsPanel = ({
                                                   verticalIconsPlugin,
                                                   icons
                                               }) => {
                const scrollableRef = (0, _react.useRef)();
                const iconPanelRef = (0, _react.useRef)();
                const [activateScroll, dispatchScrollAction] = (0, _react.useReducer)(_verticalScrollReducer.verticalScrollReducer, initialState);
                const [theme, setTheme] = (0, _react.useState)('dark');

                const evaluateScrollability = () => {
                    var _scrollableRef$curren, _scrollableRef$curren2;

                    dispatchScrollAction({
                        type: 'resize',
                        payload: {
                            scrollHeight: (_scrollableRef$curren = scrollableRef.current) === null || _scrollableRef$curren === void 0 ? void 0 : _scrollableRef$curren.scrollHeight,
                            clientHeight: (_scrollableRef$curren2 = scrollableRef.current) === null || _scrollableRef$curren2 === void 0 ? void 0 : _scrollableRef$curren2.clientHeight,
                            scrollState: false
                        }
                    });
                };

                (0, _react.useEffect)(() => {
                    window.addEventListener('resize', evaluateScrollability);
                    evaluateScrollability();
                    return () => {
                        window.removeEventListener('resize', evaluateScrollability);
                    };
                }, []);
                (0, _react.useEffect)(() => {
                    evaluateScrollability();
                }, [icons, theme]);
                (0, _react.useEffect)(() => {
                    verticalIconsPlugin.call('theme', 'currentTheme').then(th => {
                        setTheme(th.quality);
                    });
                    verticalIconsPlugin.on('theme', 'themeChanged', th => {
                        setTheme(th.quality);
                    });
                    return () => {
                        verticalIconsPlugin.off('theme', 'themeChanged');
                    };
                }, []);

                async function itemContextAction(e, name, documentation) {
                    verticalIconsPlugin.call('manager', 'deactivatePlugin', name);
                }

                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    id: "iconsP",
                    className: "h-100",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "remixui_icons d-flex flex-column vh-100",
                        ref: iconPanelRef,
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {
                            verticalIconPlugin: verticalIconsPlugin
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: scrollableRef.current && scrollableRef.current.scrollHeight > scrollableRef.current.clientHeight ? 'remixui_default-icons-container remixui_requiredSection' : activateScroll && activateScroll.scrollState ? 'remixui_default-icons-container remixui_requiredSection' : 'remixui_requiredSection',
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_IconList.default, {
                                theme: theme,
                                icons: icons.filter(p => p.isRequired && p.profile.name !== 'pluginManager'),
                                verticalIconsPlugin: verticalIconsPlugin,
                                itemContextAction: itemContextAction
                            }), scrollableRef.current && scrollableRef.current.scrollHeight > scrollableRef.current.clientHeight ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Chevron.Chevron, {
                                direction: "up",
                                divElementRef: scrollableRef,
                                cssRule: 'fa fa-chevron-up remixui_icon-chevron my-0'
                            }) : null
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            id: "remixuiScrollable",
                            className: scrollableRef.current && scrollableRef.current.scrollHeight > scrollableRef.current.clientHeight ? 'remixui_default-icons-container remixui_scrollable-container remixui_scrollbar remixui_hide-scroll' : activateScroll && activateScroll.scrollState ? 'remixui_default-icons-container remixui_scrollable-container remixui_scrollbar remixui_hide-scroll' : 'remixui_scrollable-container remixui_scrollbar remixui_hide-scroll',
                            ref: scrollableRef,
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconList.default, {
                                theme: theme,
                                icons: icons.filter(p => {
                                    return !p.isRequired && p.profile.name !== 'settings';
                                }),
                                verticalIconsPlugin: verticalIconsPlugin,
                                itemContextAction: itemContextAction
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "remixui_default-icons-container border-0",
                            children: [
                                scrollableRef.current && scrollableRef.current.scrollHeight > scrollableRef.current.clientHeight ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Chevron.Chevron, {
                                    divElementRef: scrollableRef,
                                    direction: "down",
                                    cssRule: 'fa fa-chevron-down remixui_icon-chevron my-0'
                                }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconList.default, {
                                    theme: theme,
                                    icons: icons.filter(p => p.profile.name === 'settings' || p.profile.name === 'pluginManager'),
                                    verticalIconsPlugin: verticalIconsPlugin,
                                    itemContextAction: itemContextAction
                                })
                            ]
                        })
                        ]
                    })
                });
            };

            var _default = RemixUiVerticalIconsPanel;
            exports.default = _default;

            /***/
        }),

        /***/ 1703:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1704);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1704:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".remixui_homeIcon {\n    /* display: block; */\n    width: 42px;\n    height: 42px;\n    cursor: pointer;\n  }\n  .remixui_homeIcon:hover {\n    box-shadow: 0px 0px 14px -7px;\n  }\n  .remixui_homeIcon svg path {\n    fill: var(--primary);\n  }\n  .remixui_homeIcon svg polygon {\n    fill: var(--primary);\n  }\n  .remixui_icons {\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .remixui_icon:hover {\n    box-shadow: 0px 0px 14px -7px;\n  }\n  .remixui_icon {\n    cursor: pointer;\n    width: 36px;\n    height: 36px;\n    border-radius: 8px;\n    align-items: center;\n  }\n  .remixui_icon img {\n    width: 28px;\n    height: 28px;\n    padding: 4px;\n    filter: invert(0.5);\n  }\n  .remixui_icon .selected-dark {\n    filter: invert(1) grayscale(1);\n  }\n  .remixui_icon .selected-light {\n    filter: invert(0) grayscale(1);\n  }\n  .remixui_icon svg {\n    width: 28px;\n    height: 28px;\n    padding: 4px;\n  }\n  .remixui_icon[title='Settings'] {\n    order: 5;\n    align-self: center;\n    bottom: 0;\n  }\n  .remixui_status {\n    position: relative;\n    bottom: 0;\n    right: 0;\n    left: 12px;\n    top: -13px;\n  }\n  .remixui_statusCheck {\n    font-size: 1.2em;\n  }\n  .remixui_statusWithBG {\n    border-radius: 8px;\n    background-color: var(--danger);\n    color: var(--light);\n    font-size: 12px;\n    height: 15px;\n    text-align: center;\n    font-weight: bold;\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n  .remixui_verticalIconContextcontainer {\n    display: block;\n    position: fixed;\n    border-radius: 2px;\n    z-index: 1000;\n    box-shadow: 0 0 4px var(--dark);\n  }\n  .remixui_verticalIconContextcontainer:focus {\n    outline: 0;\n  }\n  .remixui_liitem {\n    padding: 2px;\n    padding-left: 6px;\n    cursor: pointer;\n    color: var(--text-dark);\n    background-color: var(--light);\n  }\n  .remixui_liitem:hover {\n    background-color: var(--secondary);\n  }\n  .remixui_scrollbar {\n    overflow-y: scroll;\n    scrollbar-width: none; /* Firefox hide scrollbar */\n    -ms-overflow-style: none;\n  }\n  .remixui_requiredSection {\n    text-align: center;\n  }\n  .remixui_scrollable-container {\n    flex-basis: 510px;\n    flex-grow: 2;\n    text-align: center;\n    /* border-bottom: 3px solid #3f4455; */\n  }\n  .remixui_scrollbar::-webkit-scrollbar { /* Chrome, Safari and other Webkit browsers*/\n    display: none;\n  }\n  .remixui_hide-scroll {\n    overflow-x: 'hidden';\n  }\n  .remixui_default-icons-container {\n    border-bottom: 2px solid #3f4455;\n    text-align: center;\n  }\n  .remixui_icon-chevron {\n    z-index: 1000;\n    cursor: pointer;\n    align-items: center;\n  }\n  .remixui_settings {\n    flex-basis: 50px;\n  }\n  #menuitems {\n    list-style: none;\n    margin: 0px;\n  }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbWl4LXVpLXZlcnRpY2FsLWljb25zLXBhbmVsLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG9CQUFvQjtJQUNwQixXQUFXO0lBQ1gsWUFBWTtJQUNaLGVBQWU7RUFDakI7RUFDQTtJQUNFLDZCQUE2QjtFQUMvQjtFQUVBO0lBQ0Usb0JBQW9CO0VBQ3RCO0VBQ0E7SUFDRSxvQkFBb0I7RUFDdEI7RUFDQTtJQUNFLGFBQWE7SUFDYix3QkFBd0I7SUFDeEIsOEJBQThCO0lBQzlCLG1CQUFtQjtFQUNyQjtFQUNBO0lBQ0UsNkJBQTZCO0VBQy9CO0VBRUE7SUFDRSxlQUFlO0lBQ2YsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsbUJBQW1CO0VBQ3JCO0VBQ0E7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7SUFDWixtQkFBbUI7RUFDckI7RUFFQTtJQUNFLDhCQUE4QjtFQUNoQztFQUVBO0lBQ0UsOEJBQThCO0VBQ2hDO0VBRUE7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7RUFDZDtFQUNBO0lBQ0UsUUFBUTtJQUNSLGtCQUFrQjtJQUNsQixTQUFTO0VBQ1g7RUFDQTtJQUNFLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0VBQ1o7RUFDQTtJQUNFLGdCQUFnQjtFQUNsQjtFQUNBO0lBQ0Usa0JBQWtCO0lBQ2xCLCtCQUErQjtJQUMvQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7RUFFQTtJQUNFLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYiwrQkFBK0I7RUFDakM7RUFDQTtJQUNFLFVBQVU7RUFDWjtFQUNBO0lBQ0UsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsdUJBQXVCO0lBQ3ZCLDhCQUE4QjtFQUNoQztFQUNBO0lBQ0Usa0NBQWtDO0VBQ3BDO0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIscUJBQXFCLEVBQUUsMkJBQTJCO0lBQ2xELHdCQUF3QjtFQUMxQjtFQUNBO0lBQ0Usa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQ0FBc0M7RUFDeEM7RUFDQSx3Q0FBd0MsNENBQTRDO0lBQ2xGLGFBQWE7RUFDZjtFQUNBO0lBQ0Usb0JBQW9CO0VBQ3RCO0VBQ0E7SUFDRSxnQ0FBZ0M7SUFDaEMsa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxhQUFhO0lBQ2IsZUFBZTtJQUNmLG1CQUFtQjtFQUNyQjtFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCO0VBRUE7SUFDRSxnQkFBZ0I7SUFDaEIsV0FBVztFQUNiIiwiZmlsZSI6InJlbWl4LXVpLXZlcnRpY2FsLWljb25zLXBhbmVsLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yZW1peHVpX2hvbWVJY29uIHtcbiAgICAvKiBkaXNwbGF5OiBibG9jazsgKi9cbiAgICB3aWR0aDogNDJweDtcbiAgICBoZWlnaHQ6IDQycHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5yZW1peHVpX2hvbWVJY29uOmhvdmVyIHtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDE0cHggLTdweDtcbiAgfVxuXG4gIC5yZW1peHVpX2hvbWVJY29uIHN2ZyBwYXRoIHtcbiAgICBmaWxsOiB2YXIoLS1wcmltYXJ5KTtcbiAgfVxuICAucmVtaXh1aV9ob21lSWNvbiBzdmcgcG9seWdvbiB7XG4gICAgZmlsbDogdmFyKC0tcHJpbWFyeSk7XG4gIH1cbiAgLnJlbWl4dWlfaWNvbnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG4gIC5yZW1peHVpX2ljb246aG92ZXIge1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTRweCAtN3B4O1xuICB9XG5cbiAgLnJlbWl4dWlfaWNvbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAucmVtaXh1aV9pY29uIGltZyB7XG4gICAgd2lkdGg6IDI4cHg7XG4gICAgaGVpZ2h0OiAyOHB4O1xuICAgIHBhZGRpbmc6IDRweDtcbiAgICBmaWx0ZXI6IGludmVydCgwLjUpO1xuICB9XG5cbiAgLnJlbWl4dWlfaWNvbiAuc2VsZWN0ZWQtZGFyayB7XG4gICAgZmlsdGVyOiBpbnZlcnQoMSkgZ3JheXNjYWxlKDEpO1xuICB9XG5cbiAgLnJlbWl4dWlfaWNvbiAuc2VsZWN0ZWQtbGlnaHQge1xuICAgIGZpbHRlcjogaW52ZXJ0KDApIGdyYXlzY2FsZSgxKTtcbiAgfVxuXG4gIC5yZW1peHVpX2ljb24gc3ZnIHtcbiAgICB3aWR0aDogMjhweDtcbiAgICBoZWlnaHQ6IDI4cHg7XG4gICAgcGFkZGluZzogNHB4O1xuICB9XG4gIC5yZW1peHVpX2ljb25bdGl0bGU9J1NldHRpbmdzJ10ge1xuICAgIG9yZGVyOiA1O1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICBib3R0b206IDA7XG4gIH1cbiAgLnJlbWl4dWlfc3RhdHVzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm90dG9tOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGxlZnQ6IDEycHg7XG4gICAgdG9wOiAtMTNweDtcbiAgfVxuICAucmVtaXh1aV9zdGF0dXNDaGVjayB7XG4gICAgZm9udC1zaXplOiAxLjJlbTtcbiAgfVxuICAucmVtaXh1aV9zdGF0dXNXaXRoQkcge1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYW5nZXIpO1xuICAgIGNvbG9yOiB2YXIoLS1saWdodCk7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGhlaWdodDogMTVweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xuICB9XG4gIFxuICAucmVtaXh1aV92ZXJ0aWNhbEljb25Db250ZXh0Y29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgIHotaW5kZXg6IDEwMDA7XG4gICAgYm94LXNoYWRvdzogMCAwIDRweCB2YXIoLS1kYXJrKTtcbiAgfVxuICAucmVtaXh1aV92ZXJ0aWNhbEljb25Db250ZXh0Y29udGFpbmVyOmZvY3VzIHtcbiAgICBvdXRsaW5lOiAwO1xuICB9XG4gIC5yZW1peHVpX2xpaXRlbSB7XG4gICAgcGFkZGluZzogMnB4O1xuICAgIHBhZGRpbmctbGVmdDogNnB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1kYXJrKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodCk7XG4gIH1cbiAgLnJlbWl4dWlfbGlpdGVtOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkpO1xuICB9XG4gIFxuICAucmVtaXh1aV9zY3JvbGxiYXIge1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7IC8qIEZpcmVmb3ggaGlkZSBzY3JvbGxiYXIgKi9cbiAgICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XG4gIH1cbiAgLnJlbWl4dWlfcmVxdWlyZWRTZWN0aW9uIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbiAgLnJlbWl4dWlfc2Nyb2xsYWJsZS1jb250YWluZXIge1xuICAgIGZsZXgtYmFzaXM6IDUxMHB4O1xuICAgIGZsZXgtZ3JvdzogMjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgLyogYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMzZjQ0NTU7ICovXG4gIH1cbiAgLnJlbWl4dWlfc2Nyb2xsYmFyOjotd2Via2l0LXNjcm9sbGJhciB7IC8qIENocm9tZSwgU2FmYXJpIGFuZCBvdGhlciBXZWJraXQgYnJvd3NlcnMqL1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgLnJlbWl4dWlfaGlkZS1zY3JvbGwge1xuICAgIG92ZXJmbG93LXg6ICdoaWRkZW4nO1xuICB9XG4gIC5yZW1peHVpX2RlZmF1bHQtaWNvbnMtY29udGFpbmVyIHtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzNmNDQ1NTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbiAgLnJlbWl4dWlfaWNvbi1jaGV2cm9uIHtcbiAgICB6LWluZGV4OiAxMDAwO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5cbiAgLnJlbWl4dWlfc2V0dGluZ3Mge1xuICAgIGZsZXgtYmFzaXM6IDUwcHg7XG4gIH1cblxuICAjbWVudWl0ZW1zIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIG1hcmdpbjogMHB4O1xuICB9XG4iXX0= */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 1705:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _Icon = _interopRequireDefault(__webpack_require__(1706));

            var _jsxRuntime = __webpack_require__(21);

            /* eslint-disable no-use-before-define */

            /* eslint-disable @typescript-eslint/no-unused-vars */
            function IconList({
                                  verticalIconsPlugin,
                                  itemContextAction,
                                  icons,
                                  theme
                              }) {
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    id: "otherIcons",
                    children: icons.map(p => /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
                        theme: theme,
                        iconRecord: p,
                        verticalIconPlugin: verticalIconsPlugin,
                        contextMenuAction: itemContextAction
                    }, p.profile.name))
                });
            }

            var _default = IconList;
            exports.default = _default;

            /***/
        }),

        /***/ 1706:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _verticalIconsContextMenu = _interopRequireDefault(__webpack_require__(1707));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _Badge = _interopRequireDefault(__webpack_require__(1708));

            var _iconBadgeReducer = __webpack_require__(1709);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-next-line no-use-before-define
            const initialState = {
                text: '',
                key: '',
                title: '',
                type: '',
                pluginName: ''
            };

            const Icon = ({
                              iconRecord,
                              verticalIconPlugin,
                              contextMenuAction,
                              theme
                          }) => {
                const {
                    displayName,
                    name,
                    icon,
                    documentation
                } = iconRecord.profile;
                const [title] = (0, _react.useState)(() => {
                    const temp = false || displayName || name;
                    return temp.replace(/^\w/, word => word.toUpperCase());
                });
                const [links, setLinks] = (0, _react.useState)({});
                const [badgeStatus, dispatchStatusUpdate] = (0, _react.useReducer)(_iconBadgeReducer.iconBadgeReducer, initialState); // @ts-ignore

                const [pageX, setPageX] = (0, _react.useState)(null); // @ts-ignore

                const [pageY, setPageY] = (0, _react.useState)(null);
                const [showContext, setShowContext] = (0, _react.useState)(false);
                const [canDeactivate] = (0, _react.useState)(false);
                const iconRef = (0, _react.useRef)(null);

                const handleContextMenu = e => {
                    const deactivationState = iconRecord.canbeDeactivated;

                    if (documentation && documentation.length > 0 && deactivationState) {
                        setLinks({
                            Documentation: documentation,
                            CanDeactivate: deactivationState
                        });
                    } else {
                        setLinks({
                            Documentation: documentation,
                            CanDeactivate: deactivationState
                        });
                    }

                    setShowContext(false);
                    setPageX(e.pageX);
                    setPageY(e.pageY);
                    setShowContext(true);
                };

                function closeContextMenu() {
                    setShowContext(false);
                }

                (0, _react.useEffect)(() => {
                    verticalIconPlugin.on(name, 'statusChanged', iconStatus => {
                        iconStatus.pluginName = name;
                        const action = {
                            type: name,
                            payload: {
                                status: iconStatus,
                                verticalIconPlugin: verticalIconPlugin
                            }
                        };
                        dispatchStatusUpdate(action);
                    });
                    return () => {
                        verticalIconPlugin.off(name, 'statusChanged');
                    };
                }, []);
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: `remixui_icon m-2  pt-1`,
                        onClick: () => {
                            verticalIconPlugin.toggle(name);
                        },
                        plugin: name,
                        title: title,
                        onContextMenu: e => {
                            e.preventDefault();
                            e.stopPropagation();
                            handleContextMenu(e);
                        },
                        "data-id": `verticalIconsKind${name}`,
                        id: `verticalIconsKind${name}`,
                        ref: iconRef,
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                            className: `${theme === 'dark' ? 'invert' : ''} ${theme} remixui_image ${iconRecord.active ? `selected-${theme}` : ''}`,
                            src: icon,
                            alt: name
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Badge.default, {
                            badgeStatus: badgeStatus
                        })
                        ]
                    }), showContext ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_verticalIconsContextMenu.default, {
                        pageX: pageX,
                        pageY: pageY,
                        links: links,
                        profileName: name,
                        hideContextMenu: closeContextMenu,
                        canBeDeactivated: canDeactivate,
                        verticalIconPlugin: verticalIconPlugin,
                        contextMenuAction: contextMenuAction
                    }) : null
                    ]
                });
            };

            var _default = Icon;
            exports.default = _default;

            /***/
        }),

        /***/ 1707:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            const VerticalIconsContextMenu = props => {
                const menuRef = (0, _react.useRef)(null);
                ClickOutside(menuRef, props.hideContextMenu);
                (0, _react.useEffect)(() => {
                    // @ts-ignore
                    menuRef.current.focus();
                }, []);
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    id: "menuItemsContainer",
                    className: "p-1 remixui_verticalIconContextcontainer bg-light shadow border",
                    style: {
                        left: props.pageX,
                        top: props.pageY,
                        display: 'block'
                    },
                    ref: menuRef,
                    tabIndex: 1,
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("ul", {
                        id: "menuitems",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(MenuForLinks, {
                            hide: props.hideContextMenu,
                            listItems: props.links,
                            profileName: props.profileName,
                            canBeDeactivated: props.canBeDeactivated,
                            verticalIconPlugin: props.verticalIconPlugin,
                            toggle: props.verticalIconPlugin.toggle,
                            contextMenuAction: props.contextMenuAction
                        })
                    })
                });
            }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


            const MenuForLinks = ({
                                      listItems,
                                      hide,
                                      profileName,
                                      contextMenuAction
                                  }) => {
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
                    children: [
                        listItems.CanDeactivate ? /*#__PURE__*/(0, _jsxRuntime.jsx)("li", {
                            id: "menuitemdeactivate",
                            onClick: evt => {
                                contextMenuAction(evt, profileName, listItems.Documentation);
                                hide();
                            },
                            className: "remixui_liitem",
                            children: "Deactivate"
                        }) : null, listItems.Documentation && listItems.Documentation.length > 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("li", {
                            id: "menuitemdocumentation",
                            className: "remixui_liitem",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                onClick: hide,
                                href: listItems.Documentation,
                                target: "_blank",
                                children: "Documentation"
                            })
                        })
                    ]
                });
            };

            function ClickOutside(ref, hideFn) {
                (0, _react.useEffect)(() => {
                    function handleClickOutside(event) {
                        if (ref.current && !ref.current.contains(event.target)) {
                            hideFn();
                        }
                    }

                    document.addEventListener("mousedown", handleClickOutside);
                    return () => {
                        document.removeEventListener("mousedown", handleClickOutside);
                    };
                }, [ref]);
            }

            var _default = VerticalIconsContextMenu;
            exports.default = _default;

            /***/
        }),

        /***/ 1708:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line no-undef
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            function Badge({
                               badgeStatus
                           }) {
                /**
                 * resolve a classes list for @arg key
                 * @param {Object} key
                 * @param {Object} type
                 */
                function resolveClasses(key, type) {
                    let classes = 'remixui_status';

                    switch (key) {
                        case 'succeed':
                            classes += ' fas fa-check-circle text-' + type + ' ' + 'remixui_statusCheck';
                            break;

                        case 'edited':
                            classes += ' fas fa-sync text-' + type + ' ' + 'remixui_statusCheck';
                            break;

                        case 'loading':
                            classes += ' fas fa-spinner text-' + type + ' ' + 'remixui_statusCheck';
                            break;

                        case 'failed':
                            classes += ' fas fa-exclamation-triangle text-' + type + ' ' + 'remixui_statusCheck';
                            break;

                        default: {
                            classes += ' badge badge-pill badge-' + type;
                        }
                    }

                    return classes;
                }

                function checkStatusKeyValue(value, type) {
                    if (value === 'succeed' || value === 'edited' || value === 'loading' || value === 'failed' || typeof value === 'number' || type === 'warning' || type === 'error' || type === 'success' || type === 'info' || type === 'danger') {
                        return true;
                    }

                    return false;
                }

                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
                    children: badgeStatus && checkStatusKeyValue(badgeStatus.key, badgeStatus.type) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                        title: badgeStatus.title,
                        className: resolveClasses(badgeStatus.key, badgeStatus.type),
                        "aria-hidden": "true",
                        children: badgeStatus.text
                    }) : null
                });
            }

            var _default = Badge;
            exports.default = _default;

            /***/
        }),

        /***/ 1709:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.iconBadgeReducer = iconBadgeReducer;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _helper = __webpack_require__(543);

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            /**
             * Set a new status for the @arg name
             * @param {String} name
             * @param {Object} status
             */
            function setIconStatus(name, status) {
                if (status.key === 'none') {
                    return _objectSpread(_objectSpread({}, status), {}, {
                        text: ''
                    });
                } // remove status

                let text = '';
                let key = '';

                if (typeof status.key === 'number') {
                    key = status.key;
                    text = key;
                } else {
                    key = (0, _helper.checkSpecialChars)(status.key) ? '' : status.key;
                }

                let thisType = '';

                if (status.type === 'error') {
                    thisType = 'danger'; // to use with bootstrap
                } else {
                    thisType = (0, _helper.checkSpecialChars)(status.type) ? '' : status.type;
                }

                const title = (0, _helper.checkSpecialChars)(status.title) ? '' : status.title;
                const pluginName = status.pluginName;
                return {
                    title,
                    type: thisType,
                    key,
                    text,
                    pluginName
                };
            }

            function iconBadgeReducer(state, action) {
                const {
                    status
                } = action.payload;
                const setStatus = setIconStatus(action.type, status);
                return setStatus;
            }

            /***/
        }),

        /***/ 1710:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _BasicLogo = _interopRequireDefault(__webpack_require__(1711));

            var _jsxRuntime = __webpack_require__(21);

            function Home({
                              verticalIconPlugin
                          }) {
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "mt-2 my-1 remixui_homeIcon",
                    onClick: async () => await verticalIconPlugin.activateHome(),
                    plugin: 'home',
                    title: "Home",
                    "data-id": "verticalIconsHomeIcon",
                    id: "verticalIconsHomeIcon",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_BasicLogo.default, {})
                });
            }

            var _default = Home;
            exports.default = _default;

            /***/
        }),

        /***/ 1711:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            function BasicLogo() {
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("svg", {
                    id: "Ebene_2",
                    "data-name": "Ebene 2",
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 105 100",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                        d: "M91.84,35a.09.09,0,0,1-.1-.07,41,41,0,0,0-79.48,0,.09.09,0,0,1-.1.07C9.45,35,1,35.35,1,42.53c0,8.56,1,16,6,20.32,2.16,1.85,5.81,2.3,9.27,2.22a44.4,44.4,0,0,0,6.45-.68.09.09,0,0,0,.06-.15A34.81,34.81,0,0,1,17,45c0-.1,0-.21,0-.31a35,35,0,0,1,70,0c0,.1,0,.21,0,.31a34.81,34.81,0,0,1-5.78,19.24.09.09,0,0,0,.06.15,44.4,44.4,0,0,0,6.45.68c3.46.08,7.11-.37,9.27-2.22,5-4.27,6-11.76,6-20.32C103,35.35,94.55,35,91.84,35Z"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                        d: "M52,74,25.4,65.13a.1.1,0,0,0-.1.17L51.93,91.93a.1.1,0,0,0,.14,0L78.7,65.3a.1.1,0,0,0-.1-.17L52,74A.06.06,0,0,1,52,74Z"
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                        d: "M75.68,46.9,82,45a.09.09,0,0,0,.08-.09,29.91,29.91,0,0,0-.87-6.94.11.11,0,0,0-.09-.08l-6.43-.58a.1.1,0,0,1-.06-.18l4.78-4.18a.13.13,0,0,0,0-.12,30.19,30.19,0,0,0-3.65-6.07.09.09,0,0,0-.11,0l-5.91,2a.1.1,0,0,1-.12-.14L72.19,23a.11.11,0,0,0,0-.12,29.86,29.86,0,0,0-5.84-4.13.09.09,0,0,0-.11,0l-4.47,4.13a.1.1,0,0,1-.17-.07l.09-6a.1.1,0,0,0-.07-.1,30.54,30.54,0,0,0-7-1.47.1.1,0,0,0-.1.07l-2.38,5.54a.1.1,0,0,1-.18,0l-2.37-5.54a.11.11,0,0,0-.11-.06,30,30,0,0,0-7,1.48.12.12,0,0,0-.07.1l.08,6.05a.09.09,0,0,1-.16.07L37.8,18.76a.11.11,0,0,0-.12,0,29.75,29.75,0,0,0-5.83,4.13.11.11,0,0,0,0,.12l2.59,5.6a.11.11,0,0,1-.13.14l-5.9-2a.11.11,0,0,0-.12,0,30.23,30.23,0,0,0-3.62,6.08.11.11,0,0,0,0,.12l4.79,4.19a.1.1,0,0,1-.06.17L23,37.91a.1.1,0,0,0-.09.07A29.9,29.9,0,0,0,22,44.92a.1.1,0,0,0,.07.1L28.4,47a.1.1,0,0,1,0,.18l-5.84,3.26a.16.16,0,0,0,0,.11,30.17,30.17,0,0,0,2.1,6.76c.32.71.67,1.4,1,2.08a.1.1,0,0,0,.06,0L52,68.16H52l26.34-8.78a.1.1,0,0,0,.06-.05,30.48,30.48,0,0,0,3.11-8.88.1.1,0,0,0-.05-.11l-5.83-3.26A.1.1,0,0,1,75.68,46.9Z"
                    })
                    ]
                });
            }

            var _default = BasicLogo;
            exports.default = _default;

            /***/
        }),

        /***/ 1712:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.verticalScrollReducer = verticalScrollReducer;

            function verticalScrollReducer(prevState, actionPayload) {
                if (actionPayload.type === 'resize') {
                    const {
                        scrollHeight,
                        clientHeight
                    } = actionPayload.payload;
                    let {
                        scrollState
                    } = actionPayload.payload;
                    if (scrollHeight > clientHeight) {
                        scrollState = true;
                    }
                    return {
                        scrollHeight,
                        clientHeight,
                        scrollState
                    };
                }

                return prevState;
            }

            /***/
        }),

        /***/ 1713:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Chevron = Chevron;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            /* eslint-disable no-use-before-define */
            function Chevron(props) {
                const click = () => {
                    if (props.direction === 'down') {
                        props.divElementRef.current.scrollBy({
                            top: 40,
                            behavior: 'smooth'
                        });
                    } else {
                        props.divElementRef.current.scrollBy({
                            top: -40,
                            behavior: 'smooth'
                        });
                    }
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
                    children: props.divElementRef.current && props.divElementRef.current.scrollHeight > props.divElementRef.current.clientHeight ? /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                        onClick: click,
                        className: props.cssRule
                    }) : null
                });
            }

            /***/
        }),

        /***/ 1714:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            /***/
        }),

        /***/ 1715:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.LandingPage = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _engineWeb = __webpack_require__(531);

            var _homeTab = __webpack_require__(1716);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            // eslint-disable-line
            var profile = {
                name: 'home',
                displayName: 'Home',
                methods: [],
                events: [],
                description: ' - ',
                icon: 'assets/img/remixLogo.webp',
                location: 'mainPanel',
                version: packageJson.version
            };

            var LandingPage = /*#__PURE__*/function (_ViewPlugin) {
                _inherits(LandingPage, _ViewPlugin);

                var _super = _createSuper(LandingPage);

                function LandingPage(appManager, verticalIcons, fileManager, filePanel, contentImport) {
                    var _this;

                    _classCallCheck(this, LandingPage);

                    _this = _super.call(this, profile);
                    _this.profile = profile;
                    _this.fileManager = fileManager;
                    _this.filePanel = filePanel;
                    _this.contentImport = contentImport;
                    _this.appManager = appManager;
                    _this.verticalIcons = verticalIcons;
                    _this.el = document.createElement('div');

                    _this.el.setAttribute('id', 'landingPageHomeContainer');

                    _this.el.setAttribute('class', 'remixui_homeContainer justify-content-between bg-light d-flex');

                    _this.el.setAttribute('data-id', 'landingPageHomeContainer');

                    return _this;
                }

                _createClass(LandingPage, [
                    {
                        key: "render",
                        value: function render() {
                            this.renderComponent();
                            return this.el;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_homeTab.RemixUiHomeTab, {
                                plugin: this
                            }), this.el);
                        }
                    }
                ]);

                return LandingPage;
            }(_engineWeb.ViewPlugin);

            exports.LandingPage = LandingPage;

            /***/
        }),

        /***/ 1716:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiHomeTab = __webpack_require__(1717);

            Object.keys(_remixUiHomeTab).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiHomeTab[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiHomeTab[key];
                    }
                });
            });

            /***/
        }),

        /***/ 1717:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.RemixUiHomeTab = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(1718);

            var _jszip = _interopRequireDefault(__webpack_require__(998));

            var _modalDialog = __webpack_require__(141);

            var _toaster = __webpack_require__(195);

            var _pluginButton = _interopRequireDefault(__webpack_require__(1720));

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            var _themeContext = __webpack_require__(999);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const _paq = window._paq = window._paq || []; //eslint-disable-line

            /* eslint-disable-next-line */


            const loadingInitialState = {
                tooltip: '',
                showModalDialog: false,
                importSource: ''
            };

            const loadingReducer = (state = loadingInitialState, action) => {
                return _objectSpread(_objectSpread({}, state), {}, {
                    tooltip: action.tooltip,
                    showModalDialog: false,
                    importSource: ''
                });
            };

            const RemixUiHomeTab = props => {
                const {
                    plugin
                } = props;
                const fileManager = plugin.fileManager;
                const [state, setState] = (0, _react.useState)({
                    themeQuality: _themeContext.themes.light,
                    showMediaPanel: 'none',
                    showModalDialog: false,
                    modalInfo: {
                        title: '',
                        loadItem: '',
                        examples: []
                    },
                    importSource: '',
                    toasterMsg: ''
                });

                const processLoading = () => {
                    const contentImport = plugin.contentImport;
                    const workspace = fileManager.getProvider('workspace');
                    contentImport.import(state.importSource, loadingMsg => dispatch({
                        tooltip: loadingMsg
                    }), (error, content, cleanUrl, type, url) => {
                        if (error) {
                            toast(error.message || error);
                        } else {
                            try {
                                workspace.addExternal(type + '/' + cleanUrl, content, url);
                                plugin.call('menuicons', 'select', 'filePanel');
                            } catch (e) {
                                toast(e.message);
                            }
                        }
                    });
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            showModalDialog: false,
                            importSource: ''
                        });
                    });
                };

                const [, dispatch] = (0, _react.useReducer)(loadingReducer, loadingInitialState);

                const playRemi = async () => {
                    remiAudioEl.current.play();
                };

                const remiAudioEl = (0, _react.useRef)(null);
                const inputValue = (0, _react.useRef)(null);
                const rightPanel = (0, _react.useRef)(null);
                (0, _react.useEffect)(() => {
                    plugin.call('theme', 'currentTheme').then(theme => {
                        // update theme quality. To be used for for images
                        setState(prevState => {
                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                themeQuality: theme.quality === 'dark' ? _themeContext.themes.dark : _themeContext.themes.light
                            });
                        });
                    });
                    plugin.on('theme', 'themeChanged', theme => {
                        // update theme quality. To be used for for images
                        setState(prevState => {
                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                themeQuality: theme.quality === 'dark' ? _themeContext.themes.dark : _themeContext.themes.light
                            });
                        });
                    });
                    window.addEventListener('click', event => {
                        const target = event.target;
                        const id = target.id;

                        if (id !== 'remixIDEHomeTwitterbtn' && id !== 'remixIDEHomeMediumbtn' && !rightPanel.current.contains(event.target)) {
                            // todo check event.target
                            setState(prevState => {
                                return _objectSpread(_objectSpread({}, prevState), {}, {
                                    showMediaPanel: 'none'
                                });
                            });
                        }
                    }); // to retrieve twitter feed

                    const scriptTwitter = document.createElement('script');
                    scriptTwitter.src = 'https://platform.twitter.com/widgets.js';
                    scriptTwitter.async = true;
                    document.body.appendChild(scriptTwitter); // to retrieve medium publications

                    const scriptMedium = document.createElement('script');
                    scriptMedium.src = 'https://www.twilik.com/assets/retainable/rss-embed/retainable-rss-embed.js';
                    scriptMedium.async = true;
                    document.body.appendChild(scriptMedium);
                    return () => {
                        document.body.removeChild(scriptTwitter);
                        document.body.removeChild(scriptMedium);
                    };
                }, []);

                const toast = message => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            toasterMsg: message
                        });
                    });
                };

                const createNewFile = async () => {
                    plugin.verticalIcons.select('filePanel');
                    await plugin.call('filePanel', 'createNewFile');
                };

                const uploadFile = async target => {
                    await plugin.call('filePanel', 'uploadFile', target);
                };

                const connectToLocalhost = () => {
                    plugin.appManager.activatePlugin('remixd');
                };

                const importFromGist = () => {
                    plugin.call('gistHandler', 'load', '');
                    plugin.verticalIcons.select('filePanel');
                };

                const switchToPreviousVersion = () => {
                    const query = new _queryParams.default();
                    query.update({
                        appVersion: '0.7.7'
                    });

                    _paq.push(['trackEvent', 'LoadingType', 'oldExperience_0.7.7']);

                    document.location.reload();
                };

                const startSolidity = async () => {
                    await plugin.appManager.activatePlugin(['solidity', 'udapp', 'solidityStaticAnalysis', 'solidityUnitTesting']);
                    plugin.verticalIcons.select('solidity');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'solidity']);
                };

                const startStarkNet = async () => {
                    await plugin.appManager.activatePlugin('starkNet_compiler');
                    plugin.verticalIcons.select('starkNet_compiler');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'starkNet_compiler']);
                };

                const startSolhint = async () => {
                    await plugin.appManager.activatePlugin(['solidity', 'solhint']);
                    plugin.verticalIcons.select('solhint');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'solhint']);
                };

                const startLearnEth = async () => {
                    await plugin.appManager.activatePlugin(['solidity', 'LearnEth', 'solidityUnitTesting']);
                    plugin.verticalIcons.select('LearnEth');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'learnEth']);
                };

                const startSourceVerify = async () => {
                    await plugin.appManager.activatePlugin(['solidity', 'sourcify']);
                    plugin.verticalIcons.select('sourcify');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'sourcify']);
                };

                const startPluginManager = async () => {
                    plugin.verticalIcons.select('pluginManager');
                };

                const saveAs = (blob, name) => {
                    const node = document.createElement('a');
                    node.download = name;
                    node.rel = 'noopener';
                    node.href = URL.createObjectURL(blob);
                    setTimeout(function () {
                        URL.revokeObjectURL(node.href);
                    }, 4E4); // 40s

                    setTimeout(function () {
                        try {
                            node.dispatchEvent(new MouseEvent('click'));
                        } catch (e) {
                            var evt = document.createEvent('MouseEvents');
                            evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
                            node.dispatchEvent(evt);
                        }
                    }, 0); // 40s
                };

                const downloadFiles = async () => {
                    try {
                        plugin.call('notification', 'toast', 'preparing files for download, please wait..');
                        const zip = new _jszip.default();
                        const browserProvider = fileManager.getProvider('browser');
                        await browserProvider.copyFolderToJson('/', ({
                                                                         path,
                                                                         content
                                                                     }) => {
                            zip.file(path, content);
                        });
                        zip.generateAsync({
                            type: 'blob'
                        }).then(function (blob) {
                            var today = new Date();
                            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
                            var time = today.getHours() + 'h' + today.getMinutes() + 'min';
                            saveAs(blob, `remix-backup-at-${time}-${date}.zip`);
                        }).catch(e => {
                            plugin.call('notification', 'toast', e.message);
                        });
                    } catch (e) {
                        plugin.call('notification', 'toast', e.message);
                    }
                };

                const restoreBackupZip = async () => {
                    await plugin.appManager.activatePlugin(['restorebackupzip']);
                    plugin.verticalIcons.select('restorebackupzip');

                    _paq.push(['trackEvent', 'pluginManager', 'userActivate', 'restorebackupzip']);
                };

                const showFullMessage = (title, loadItem, examples) => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            showModalDialog: true,
                            modalInfo: {
                                title: title,
                                loadItem: loadItem,
                                examples: examples
                            }
                        });
                    });
                };

                const hideFullMessage = () => {
                    //eslint-disable-line
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            showModalDialog: false,
                            importSource: ''
                        });
                    });
                };

                const maxHeight = Math.max(window.innerHeight - 150, 250) + 'px';
                const examples = state.modalInfo.examples.map((urlEl, key) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "p-1 user-select-auto",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                        children: urlEl
                    })
                }, key));
                const elHeight = '4000px';
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_modalDialog.ModalDialog, {
                        id: "homeTab",
                        title: 'Import from ' + state.modalInfo.title,
                        okLabel: "Import",
                        hide: !state.showModalDialog,
                        handleHide: () => hideFullMessage(),
                        okFn: () => processLoading(),
                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "p-2 user-select-auto",
                            children: [
                                state.modalInfo.loadItem !== '' && /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                    children: ["Enter the ", state.modalInfo.loadItem, " you would like to load."]
                                }), state.modalInfo.examples.length !== 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        children: "e.g"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        children: examples
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    ref: inputValue,
                                    type: "text",
                                    name: "prompt_text",
                                    id: "inputPrompt_text",
                                    className: "w-100 mt-1 form-control",
                                    "data-id": "homeTabModalDialogCustomPromptText",
                                    value: state.importSource,
                                    onInput: e => {
                                        setState(prevState => {
                                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                                importSource: inputValue.current.value
                                            });
                                        });
                                    }
                                })
                            ]
                        })
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_toaster.Toaster, {
                        message: state.toasterMsg
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "d-flex flex-column ml-4",
                        id: "remixUiRightPanel",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "border-bottom d-flex flex-column mr-4 pb-3 mb-3",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex justify-content-between ",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "mx-4 my-4 d-flex",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        style: {
                                            fontSize: 'xxx-large',
                                            height: 'auto',
                                            alignSelf: 'flex-end'
                                        },
                                        children: "Remix IDE"
                                    })
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "mr-4 d-flex",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                                        className: "mt-4 mb-2 remixui_home_logoImg",
                                        src: "assets/img/guitarRemiCroped.webp",
                                        onClick: () => playRemi(),
                                        alt: ""
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("audio", {
                                        id: "remiAudio",
                                        muted: false,
                                        src: "assets/audio/remiGuitar-single-power-chord-A-minor.wav",
                                        ref: remiAudioEl
                                    })
                                    ]
                                })
                                ]
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "row mx-2 mr-4",
                            "data-id": "landingPageHpSections",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "ml-3",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "mb-5",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
                                        children: "Featured Plugins"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "d-flex flex-row pt-2",
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_themeContext.ThemeContext.Provider, {
                                            value: state.themeQuality,
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/solidityLogo.webp",
                                                envID: "solidityLogo",
                                                envText: "Solidity",
                                                callback: () => startSolidity()
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/starkNetLogo.webp",
                                                envID: "starkNetLogo",
                                                envText: "StarkNet",
                                                l2: true,
                                                callback: () => startStarkNet()
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/solhintLogo.webp",
                                                envID: "solhintLogo",
                                                envText: "Solhint linter",
                                                callback: () => startSolhint()
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/learnEthLogo.webp",
                                                envID: "learnEthLogo",
                                                envText: "LearnEth",
                                                callback: () => startLearnEth()
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/sourcifyLogo.webp",
                                                envID: "sourcifyLogo",
                                                envText: "Sourcify",
                                                callback: () => startSourceVerify()
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_pluginButton.default, {
                                                imgPath: "assets/img/moreLogo.webp",
                                                envID: "moreLogo",
                                                envText: "More",
                                                callback: startPluginManager
                                            })
                                            ]
                                        })
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                        className: "file",
                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
                                            children: "File"
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-2 far fa-file"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "ml-1 mb-1 remixui_home_text",
                                                onClick: () => createNewFile(),
                                                children: "New File"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-2 far fa-file-alt"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "ml-1 remixui_home_labelIt remixui_home_bigLabelSize remixui_home_text",
                                                htmlFor: "openFileInput",
                                                children: "Open Files"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                                title: "open file",
                                                type: "file",
                                                id: "openFileInput",
                                                onChange: event => {
                                                    event.stopPropagation();
                                                    plugin.verticalIcons.select('filePanel');
                                                    uploadFile(event.target);
                                                },
                                                multiple: true
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-1 far fa-hdd"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "ml-1 remixui_home_text",
                                                onClick: () => connectToLocalhost(),
                                                children: "Connect to Localhost"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-1 far fa-download"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "ml-1 remixui_home_text",
                                                onClick: () => downloadFiles(),
                                                children: "Download Backup"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-1 far fa-upload"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "ml-1 remixui_home_text",
                                                onClick: () => restoreBackupZip(),
                                                children: "Restore Backup"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                                            className: "mt-3 mb-0",
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                children: "LOAD FROM:"
                                            })
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                            className: "btn-group",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                                className: "btn mr-1 btn-secondary",
                                                "data-id": "landingPageImportFromGistButton",
                                                onClick: () => importFromGist(),
                                                children: "Gist"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                                className: "btn mx-1 btn-secondary",
                                                "data-id": "landingPageImportFromGitHubButton",
                                                onClick: () => showFullMessage('Github', 'github URL', ['https://github.com/0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol', 'https://github.com/OpenZeppelin/openzeppelin-solidity/blob/67bca857eedf99bf44a4b6a0fc5b5ed553135316/contracts/access/Roles.sol']),
                                                children: "GitHub"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                                className: "btn mx-1 btn-secondary",
                                                onClick: () => showFullMessage('Ipfs', 'ipfs URL', ['ipfs://<ipfs-hash>']),
                                                children: "Ipfs"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                                className: "btn mx-1 btn-secondary",
                                                onClick: () => showFullMessage('Https', 'http/https raw content', ['https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/ERC20.sol']),
                                                children: "https"
                                            })
                                            ]
                                        })
                                        ]
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                        className: "ml-4 pl-4",
                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
                                            children: "Resources"
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-2 fas fa-book"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                                className: "remixui_home_text",
                                                target: "__blank",
                                                href: "https://remix-ide.readthedocs.io/en/latest/#",
                                                children: "Documentation"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-2 fab fa-gitter"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                                className: "remixui_home_text",
                                                target: "__blank",
                                                href: "https://gitter.im/ethereum/remix",
                                                children: "Gitter channel"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                                                id: "remixHhomeWebsite",
                                                className: "mr-2 remixui_home_image",
                                                src: plugin.profile.icon,
                                                style: {
                                                    filter: state.themeQuality.filter
                                                },
                                                alt: ""
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                                className: "remixui_home_text",
                                                target: "__blank",
                                                href: "https://remix-project.org",
                                                children: "Featuring website"
                                            })
                                            ]
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                            className: "mb-1",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                className: "mr-2 fab fa-ethereum remixui_home_image"
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                                className: "remixui_home_text",
                                                onClick: () => switchToPreviousVersion(),
                                                children: "Old experience"
                                            })
                                            ]
                                        })
                                        ]
                                    })
                                    ]
                                })
                                ]
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex flex-column remixui_home_rightPanel",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex pr-3 py-2 align-self-end",
                                id: "remixIDEMediaPanelsTitle",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                    className: "btn-info p-2 m-1 border rounded-circle remixui_home_mediaBadge fab fa-twitter",
                                    id: "remixIDEHomeTwitterbtn",
                                    title: "Twitter",
                                    onClick: e => {
                                        setState(prevState => {
                                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                                showMediaPanel: state.showMediaPanel === 'twitter' ? 'none' : 'twitter'
                                            });
                                        });

                                        _paq.push(['trackEvent', 'pluginManager', 'media', 'twitter']);
                                    }
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                    className: "btn-danger p-2 m-1 border rounded-circle remixui_home_mediaBadge fab fa-medium",
                                    id: "remixIDEHomeMediumbtn",
                                    title: "Medium blogs",
                                    onClick: e => {
                                        setState(prevState => {
                                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                                showMediaPanel: state.showMediaPanel === 'medium' ? 'none' : 'medium'
                                            });
                                        });

                                        _paq.push(['trackEvent', 'pluginManager', 'media', 'medium']);
                                    }
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mr-3 d-flex bg-light remixui_home_panels",
                                style: {
                                    visibility: state.showMediaPanel === 'none' ? 'hidden' : 'visible'
                                },
                                id: "remixIDEMediaPanels",
                                ref: rightPanel,
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    id: "remixIDE_MediumBlock",
                                    className: "p-2 mx-1 mt-3 mb-0 remixui_home_remixHomeMedia",
                                    style: {
                                        maxHeight: maxHeight
                                    },
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        id: "medium-widget",
                                        className: "px-3 remixui_home_media",
                                        hidden: state.showMediaPanel !== 'medium',
                                        style: {
                                            maxHeight: '10000px'
                                        },
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                            id: "retainable-rss-embed",
                                            "data-rss": "https://medium.com/feed/remix-ide",
                                            "data-maxcols": "1",
                                            "data-layout": "grid",
                                            "data-poststyle": "external",
                                            "data-readmore": "More...",
                                            "data-buttonclass": "btn mb-3",
                                            "data-offset": "-100"
                                        })
                                    })
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    id: "remixIDE_TwitterBlock",
                                    className: "p-2 mx-1 mt-3 mb-0 remixui_home_remixHomeMedia",
                                    hidden: state.showMediaPanel !== 'twitter',
                                    style: {
                                        maxHeight: maxHeight,
                                        marginRight: '28px'
                                    },
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "remixui_home_media",
                                        style: {
                                            minHeight: elHeight
                                        },
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                            className: "twitter-timeline",
                                            "data-width": "375",
                                            "data-theme": state.themeQuality.name,
                                            "data-chrome": "nofooter noheader transparent",
                                            "data-tweet-limit": "18",
                                            href: "https://twitter.com/EthereumRemix"
                                        })
                                    })
                                })
                                ]
                            })
                            ]
                        })
                        ]
                    })
                    ]
                });
            };

            exports.RemixUiHomeTab = RemixUiHomeTab;
            var _default = RemixUiHomeTab;
            exports.default = _default;

            /***/
        }),

        /***/ 1718:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1719);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1719:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".remixui_home_text {\n  cursor: pointer;\n  font-size: 0.8rem;\n  font-weight: normal;\n  max-width: 300px;\n}\n.remixui_home_text:hover {\n  cursor: pointer;\n  text-decoration: underline;\n}\n.remixui_home_homeContainer {\n  overflow-y: hidden;\n  overflow-y: auto;\n  flex-grow: 3;\n}\n.remixui_home_hpLogoContainer {\n  margin: 30px;\n  padding-right: 90px;\n}\n.remixui_home_mediaBadge {\n  font-size: 2em;\n  height: 2em;\n  width: 2em;\n}\n.remixui_home_mediaBadge:focus {\n  outline: none;\n}\n.remixui_home_image {\n  height: 1em;\n  width: 1em;\n  text-align: center;\n}\n.remixui_home_logoImg {\n  height: 10em;\n}\n.remixui_home_rightPanel {\n  right: 0;\n  position: absolute;\n  z-index: 3000;\n}\n.remixui_home_remixHomeMedia {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n.remixui_home_panels {\n  box-shadow: 0px 0px 13px -7px;\n}\n.remixui_home_labelIt {\n  margin-bottom: 0;\n}\n.remixui_home_bigLabelSize {\n  font-size: 13px;\n}\n.remixui_home_seeAll {\n  margin-top: 7px;\n  white-space: nowrap;\n}\n.remixui_home_importFrom p {\n  margin-right: 10px;\n}\n.remixui_home_logoContainer img{\n  height: 150px;\n  opacity: 0.7;\n}\n.remixui_home_envLogo {\n  height: 16px;\n}\n.remixui_home_cursorStyle {\n  cursor: pointer;\n}\n.remixui_home_envButton {\n  width: 120px;\n  height: 70px;\n}\n.remixui_home_media {\n  overflow: hidden;\n  max-width: 400px;\n  transition: .5s ease-out;\n  z-index: 1000;\n}\n.remixui_home_migrationBtn {\n  width: 100px;\n}\n.remixui_home_l2Label {\n  bottom: 10px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbWl4LXVpLWhvbWUtdGFiLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLDBCQUEwQjtBQUM1QjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixZQUFZO0FBQ2Q7QUFDQTtFQUNFLFlBQVk7RUFDWixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsVUFBVTtBQUNaO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLFdBQVc7RUFDWCxVQUFVO0VBQ1Ysa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLFFBQVE7RUFDUixrQkFBa0I7RUFDbEIsYUFBYTtBQUNmO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLFlBQVk7RUFDWixZQUFZO0FBQ2Q7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsd0JBQXdCO0VBQ3hCLGFBQWE7QUFDZjtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoicmVtaXgtdWktaG9tZS10YWIuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlbWl4dWlfaG9tZV90ZXh0IHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgbWF4LXdpZHRoOiAzMDBweDtcbn1cbi5yZW1peHVpX2hvbWVfdGV4dDpob3ZlciB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG4ucmVtaXh1aV9ob21lX2hvbWVDb250YWluZXIge1xuICBvdmVyZmxvdy15OiBoaWRkZW47XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIGZsZXgtZ3JvdzogMztcbn1cbi5yZW1peHVpX2hvbWVfaHBMb2dvQ29udGFpbmVyIHtcbiAgbWFyZ2luOiAzMHB4O1xuICBwYWRkaW5nLXJpZ2h0OiA5MHB4O1xufVxuLnJlbWl4dWlfaG9tZV9tZWRpYUJhZGdlIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIGhlaWdodDogMmVtO1xuICB3aWR0aDogMmVtO1xufVxuLnJlbWl4dWlfaG9tZV9tZWRpYUJhZGdlOmZvY3VzIHtcbiAgb3V0bGluZTogbm9uZTtcbn1cbi5yZW1peHVpX2hvbWVfaW1hZ2Uge1xuICBoZWlnaHQ6IDFlbTtcbiAgd2lkdGg6IDFlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLnJlbWl4dWlfaG9tZV9sb2dvSW1nIHtcbiAgaGVpZ2h0OiAxMGVtO1xufVxuLnJlbWl4dWlfaG9tZV9yaWdodFBhbmVsIHtcbiAgcmlnaHQ6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMzAwMDtcbn1cbi5yZW1peHVpX2hvbWVfcmVtaXhIb21lTWVkaWEge1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG4ucmVtaXh1aV9ob21lX3BhbmVscyB7XG4gIGJveC1zaGFkb3c6IDBweCAwcHggMTNweCAtN3B4O1xufVxuLnJlbWl4dWlfaG9tZV9sYWJlbEl0IHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbi5yZW1peHVpX2hvbWVfYmlnTGFiZWxTaXplIHtcbiAgZm9udC1zaXplOiAxM3B4O1xufVxuLnJlbWl4dWlfaG9tZV9zZWVBbGwge1xuICBtYXJnaW4tdG9wOiA3cHg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG4ucmVtaXh1aV9ob21lX2ltcG9ydEZyb20gcCB7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbn1cbi5yZW1peHVpX2hvbWVfbG9nb0NvbnRhaW5lciBpbWd7XG4gIGhlaWdodDogMTUwcHg7XG4gIG9wYWNpdHk6IDAuNztcbn1cbi5yZW1peHVpX2hvbWVfZW52TG9nbyB7XG4gIGhlaWdodDogMTZweDtcbn1cbi5yZW1peHVpX2hvbWVfY3Vyc29yU3R5bGUge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ucmVtaXh1aV9ob21lX2VudkJ1dHRvbiB7XG4gIHdpZHRoOiAxMjBweDtcbiAgaGVpZ2h0OiA3MHB4O1xufVxuLnJlbWl4dWlfaG9tZV9tZWRpYSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIHRyYW5zaXRpb246IC41cyBlYXNlLW91dDtcbiAgei1pbmRleDogMTAwMDtcbn1cbi5yZW1peHVpX2hvbWVfbWlncmF0aW9uQnRuIHtcbiAgd2lkdGg6IDEwMHB4O1xufVxuLnJlbWl4dWlfaG9tZV9sMkxhYmVsIHtcbiAgYm90dG9tOiAxMHB4O1xufVxuIl19 */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 1720:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _themeContext = __webpack_require__(999);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable @typescript-eslint/no-unused-vars */
            function PluginButton({
                                      imgPath,
                                      envID,
                                      envText,
                                      callback,
                                      l2
                                  }) {
                const themeFilter = (0, _react.useContext)(_themeContext.ThemeContext);
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                        className: "btn border-secondary d-flex mr-3 text-nowrap justify-content-center flex-column align-items-center remixui_home_envButton",
                        "data-id": 'landingPageStart' + envText,
                        onClick: () => callback(),
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                            className: "m-2 align-self-center remixui_home_envLogo",
                            id: envID,
                            src: imgPath,
                            alt: "",
                            style: {
                                filter: themeFilter.filter
                            }
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                            className: "text-uppercase text-dark remixui_home_cursorStyle",
                            children: envText
                        })
                        ]
                    }), l2 && /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                        className: "bg-light mx-1 px-1 mb-0 mx-2 position-relative remixui_home_l2Label",
                        children: "L2"
                    })
                    ]
                });
            }

            var _default = PluginButton;
            exports.default = _default;

            /***/
        }),

        /***/ 1721:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.MainPanel = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _panel = __webpack_require__(765);

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _panel2 = __webpack_require__(197);

            var _package = _interopRequireDefault(__webpack_require__(194));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                    _get = Reflect.get;
                } else {
                    _get = function _get(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) {
                            return;
                        }
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                            return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                    };
                }
                return _get.apply(this, arguments);
            }

            function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                    object = _getPrototypeOf(object);
                    if (object === null) {
                        break;
                    }
                }
                return object;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'mainPanel',
                displayName: 'Main Panel',
                description: '',
                version: _package["default"].version,
                methods: ['addView', 'removeView', 'showContent']
            };

            var MainPanel = /*#__PURE__*/function (_AbstractPanel) {
                _inherits(MainPanel, _AbstractPanel);

                var _super = _createSuper(MainPanel);

                function MainPanel(config) {
                    var _this;

                    _classCallCheck(this, MainPanel);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "element", void 0);

                    _this.element = document.createElement('div');

                    _this.element.setAttribute('data-id', 'mainPanelPluginsContainer');

                    _this.element.setAttribute('style', 'height: 100%; width: 100%;'); // this.config = config


                    return _this;
                }

                _createClass(MainPanel, [
                    {
                        key: "onActivation",
                        value: function onActivation() {
                            this.renderComponent();
                        }
                    }, {
                        key: "focus",
                        value: function focus(name) {
                            this.emit('focusChanged', name);

                            _get(_getPrototypeOf(MainPanel.prototype), "focus", this).call(this, name);

                            this.renderComponent();
                        }
                    }, {
                        key: "addView",
                        value: function addView(profile, view) {
                            _get(_getPrototypeOf(MainPanel.prototype), "addView", this).call(this, profile, view);

                            this.renderComponent();
                        }
                    }, {
                        key: "removeView",
                        value: function removeView(profile) {
                            _get(_getPrototypeOf(MainPanel.prototype), "removeView", this).call(this, profile);

                            this.renderComponent();
                        }
                    }, {
                        key: "showContent",
                        value: function () {
                            var _showContent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _get(_getPrototypeOf(MainPanel.prototype), "showContent", this).call(this, name);

                                                this.renderComponent();

                                            case 2:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function showContent(_x) {
                                return _showContent.apply(this, arguments);
                            }

                            return showContent;
                        }()
                    }, {
                        key: "render",
                        value: function render() {
                            return this.element;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_panel2.RemixPluginPanel, {
                                header: /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null),
                                plugins: this.plugins
                            }), this.element);
                        }
                    }
                ]);

                return MainPanel;
            }(_panel.AbstractPanel);

            exports.MainPanel = MainPanel;

            /***/
        }),

        /***/ 1722:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.PermissionHandlerPlugin = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _engine = __webpack_require__(509);

            var _src = __webpack_require__(1723);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'permissionhandler',
                displayName: 'permissionhandler',
                description: 'permissionhandler',
                methods: ['askPermission']
            };

            var PermissionHandlerPlugin = /*#__PURE__*/function (_Plugin) {
                _inherits(PermissionHandlerPlugin, _Plugin);

                var _super = _createSuper(PermissionHandlerPlugin);

                function PermissionHandlerPlugin() {
                    var _this;

                    _classCallCheck(this, PermissionHandlerPlugin);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "permissions", void 0);

                    _defineProperty(_assertThisInitialized(_this), "currentVersion", void 0);

                    _this.permissions = _this._getFromLocal();
                    _this.currentVersion = 1; // here we remove the old permissions saved before adding 'permissionVersion'
                    // since with v1 the structure has been changed because of new engine ^0.2.0-alpha.6 changes

                    if (!localStorage.getItem('permissionVersion')) {
                        localStorage.setItem('plugins/permissions', '');
                        localStorage.setItem('permissionVersion', _this.currentVersion.toString());
                    }

                    return _this;
                }

                _createClass(PermissionHandlerPlugin, [
                    {
                        key: "_getFromLocal",
                        value: function _getFromLocal() {
                            var permission = localStorage.getItem('plugins/permissions');
                            return permission ? JSON.parse(permission) : {};
                        }
                    }, {
                        key: "persistPermissions",
                        value: function persistPermissions() {
                            var permissions = JSON.stringify(this.permissions);
                            localStorage.setItem('plugins/permissions', permissions);
                        }
                    }, {
                        key: "switchMode",
                        value: function switchMode(from, to, method, set) {
                            set ? this.permissions[to.name][method][from.name] = {} : delete this.permissions[to.name][method][from.name];
                        }
                    }, {
                        key: "clear",
                        value: function clear() {
                            localStorage.removeItem('plugins/permissions');
                        }
                    }, {
                        key: "notAllowWarning",
                        value: function notAllowWarning(from, to, method) {
                            return "".concat(from.displayName || from.name, " is not allowed to call ").concat(method, " method of ").concat(to.displayName || to.name, ".");
                        }
                    }, {
                        key: "getTheme",
                        value: function () {
                            var _getTheme = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.next = 2;
                                                return this.call('theme', 'currentTheme');

                                            case 2:
                                                return _context.abrupt("return", _context.sent.quality);

                                            case 3:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function getTheme() {
                                return _getTheme.apply(this, arguments);
                            }

                            return getTheme;
                        }()
                        /**
                         * Check if a plugin has the permission to call another plugin and askPermission if needed
                         * @param {PluginProfile} from the profile of the plugin that make the call
                         * @param {ModuleProfile} to The profile of the module that receive the call
                         * @param {string} method The name of the function to be called
                         * @param {string} message from the caller plugin to add more details if needed
                         * @returns {Promise<boolean>}
                         */

                    }, {
                        key: "askPermission",
                        value: function () {
                            var _askPermission = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(from, to, method, message) {
                                var _this$permissions$to$, allow, hash, warning;

                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _context2.prev = 0;
                                                this.permissions = this._getFromLocal();
                                                if (!this.permissions[to.name]) {
                                                    this.permissions[to.name] = {};
                                                }
                                                if (!this.permissions[to.name][method]) {
                                                    this.permissions[to.name][method] = {};
                                                }

                                                if (this.permissions[to.name][method][from.name]) {
                                                    _context2.next = 6;
                                                    break;
                                                }

                                                return _context2.abrupt("return", this.openPermission(from, to, method, message));

                                            case 6:
                                                _this$permissions$to$ = this.permissions[to.name][method][from.name], allow = _this$permissions$to$.allow, hash = _this$permissions$to$.hash;

                                                if (allow) {
                                                    _context2.next = 11;
                                                    break;
                                                }

                                                warning = this.notAllowWarning(from, to, method);
                                                this.call('notification', 'toast', warning);
                                                return _context2.abrupt("return", false);

                                            case 11:
                                                if (!(hash === from.hash)) {
                                                    _context2.next = 15;
                                                    break;
                                                }

                                                _context2.t0 = true // Allow
                                                ;
                                                _context2.next = 18;
                                                break;

                                            case 15:
                                                _context2.next = 17;
                                                return this.openPermission(from, to, method, message);

                                            case 17:
                                                _context2.t0 = _context2.sent;

                                            case 18:
                                                return _context2.abrupt("return", _context2.t0);

                                            case 21:
                                                _context2.prev = 21;
                                                _context2.t1 = _context2["catch"](0);
                                                throw new Error(_context2.t1);

                                            case 24:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this, [[0, 21]]);
                            }));

                            function askPermission(_x, _x2, _x3, _x4) {

                                return _askPermission.apply(this, arguments);
                            }

                            return askPermission;
                        }()
                    }, {
                        key: "openPermission",
                        value: function () {
                            var _openPermission = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(from, to, method, message) {
                                var _this2 = this;

                                var remember, value, modal, result;
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                remember = this.permissions[to.name][method][from.name];
                                                value = {
                                                    from: from,
                                                    to: to,
                                                    method: method,
                                                    message: message,
                                                    remember: remember
                                                };
                                                _context3.t0 = "Permission needed for ".concat(to.displayName || to.name);
                                                _context3.t1 = _react["default"];
                                                _context3.t2 = _src.PermissionHandlerDialog;
                                                _context3.t3 = this;
                                                _context3.next = 8;
                                                return this.getTheme();

                                            case 8:
                                                _context3.t4 = _context3.sent;
                                                _context3.t5 = value;
                                                _context3.t6 = {
                                                    plugin: _context3.t3,
                                                    theme: _context3.t4,
                                                    value: _context3.t5
                                                };
                                                _context3.t7 = _context3.t1.createElement.call(_context3.t1, _context3.t2, _context3.t6);
                                                modal = {
                                                    id: 'PermissionHandler',
                                                    title: _context3.t0,
                                                    message: _context3.t7,
                                                    okLabel: 'Accept',
                                                    cancelLabel: 'Decline'
                                                };
                                                _context3.next = 15;
                                                return this.call('notification', 'modal', modal);

                                            case 15:
                                                result = _context3.sent;
                                                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                                                    if (result) {
                                                        if (_this2.permissions[to.name][method][from.name]) {
                                                            _this2.permissions[to.name][method][from.name] = {
                                                                allow: true,
                                                                hash: from.hash
                                                            };

                                                            _this2.persistPermissions();
                                                        }

                                                        resolve(true);
                                                    } else {
                                                        if (_this2.permissions[to.name][method][from.name]) {
                                                            _this2.permissions[to.name][method][from.name] = {
                                                                allow: false,
                                                                hash: from.hash
                                                            };

                                                            _this2.persistPermissions();
                                                        }

                                                        reject(_this2.notAllowWarning(from, to, method));
                                                    }
                                                }));

                                            case 17:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function openPermission(_x5, _x6, _x7, _x8) {
                                return _openPermission.apply(this, arguments);
                            }

                            return openPermission;
                        }()
                    }
                ]);

                return PermissionHandlerPlugin;
            }(_engine.Plugin);

            exports.PermissionHandlerPlugin = PermissionHandlerPlugin;

            /***/
        }),

        /***/ 1723:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            Object.defineProperty(exports, "PermissionHandlerDialog", {
                enumerable: true,
                get: function () {
                    return _permissionDialog.default;
                }
            });
            Object.defineProperty(exports, "PermissionHandlerProps", {
                enumerable: true,
                get: function () {
                    return _index.PermissionHandlerProps;
                }
            });
            Object.defineProperty(exports, "PermissionHandlerValue", {
                enumerable: true,
                get: function () {
                    return _index.PermissionHandlerValue;
                }
            });

            var _permissionDialog = _interopRequireDefault(__webpack_require__(1724));

            var _index = __webpack_require__(1727);

            /***/
        }),

        /***/ 1724:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(1725);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            const PermissionHandlerDialog = props => {
                const {
                    from,
                    to,
                    remember,
                    method,
                    message
                } = props.value;
                const [feedback, setFeedback] = (0, _react.useState)('');
                const theme = props.theme;

                const switchMode = e => {
                    props.plugin.switchMode(from, to, method, e.target.checked);
                };

                const rememberSwitch = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                        type: "checkbox",
                        onChange: switchMode,
                        className: "form-check-input",
                        id: "remember",
                        "data-id": remember ? 'permissionHandlerRememberChecked' : 'permissionHandlerRememberUnchecked'
                    });
                };

                const reset = () => {
                    props.plugin.clear();
                    setFeedback('All permisssions have been reset.');
                };

                const imgFrom = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                        className: `${theme === 'dark' ? 'invert' : ''}`,
                        alt: "",
                        id: "permissionModalImagesFrom",
                        src: from.icon
                    });
                };

                const imgTo = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                        className: `${theme === 'dark' ? 'invert' : ''}`,
                        alt: "",
                        id: "permissionModalImagesTo",
                        src: to.icon
                    });
                };

                const pluginsImages = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                        className: "images",
                        children: [
                            imgFrom(), /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: "fas fa-arrow-right"
                            }), imgTo()
                        ]
                    });
                };

                const text = () => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                        children: ["\"", from.displayName, "\" ", remember ? 'has changed and' : '', " would like to access to \"", method, "\" of \"", to.displayName, "\"`"]
                    });
                };

                const pluginMessage = () => {
                    return message ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                            children: "Description"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                            children: message
                        })
                        ]
                    }) : null;
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("section", {
                    className: "permission",
                    children: [
                        pluginsImages(), /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h4", {
                                "data-id": "permissionHandlerMessage",
                                children: [text(), " :"]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                                children: from.displayName
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                children: [
                                    " ", from.description || /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        children: "No description Provided"
                                    })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("h6", {
                                children: [to.displayName, " :"]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                                children: [
                                    " ", to.description || /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        children: "No description Provided"
                                    })
                                ]
                            }), pluginMessage()
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                            className: "remember",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-check",
                                children: [
                                    rememberSwitch(), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        htmlFor: "remember",
                                        className: "form-check-label",
                                        "data-id": "permissionHandlerRememberChoice",
                                        children: "Remember this choice"
                                    })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                className: "btn btn-sm",
                                onClick: reset,
                                children: "Reset all Permissions"
                            })
                            ]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            children: feedback
                        })
                    ]
                });
            };

            var _default = PermissionHandlerDialog;
            exports.default = _default;

            /***/
        }),

        /***/ 1725:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(1726);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 1726:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".permission h4 {\n    text-transform: uppercase;\n    text-align: center;\n  }\n  .permission h6 {\n    text-transform: uppercase;\n  }\n  .remember {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .images {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n  }\n  .images img {\n    width: 40px;\n    height: 40px;\n  }\n  .images i {\n    margin: 0 20px;\n  }\n  .invert {\n    filter: invert(1);\n  }\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBlcm1pc3Npb24tZGlhbG9nLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHlCQUF5QjtJQUN6QixrQkFBa0I7RUFDcEI7RUFDQTtJQUNFLHlCQUF5QjtFQUMzQjtFQUNBO0lBQ0UsYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixtQkFBbUI7RUFDckI7RUFDQTtJQUNFLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLGFBQWE7RUFDZjtFQUNBO0lBQ0UsV0FBVztJQUNYLFlBQVk7RUFDZDtFQUNBO0lBQ0UsY0FBYztFQUNoQjtFQUVBO0lBQ0UsaUJBQWlCO0VBQ25CIiwiZmlsZSI6InBlcm1pc3Npb24tZGlhbG9nLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wZXJtaXNzaW9uIGg0IHtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICAucGVybWlzc2lvbiBoNiB7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuICAucmVtZW1iZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLmltYWdlcyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cbiAgLmltYWdlcyBpbWcge1xuICAgIHdpZHRoOiA0MHB4O1xuICAgIGhlaWdodDogNDBweDtcbiAgfVxuICAuaW1hZ2VzIGkge1xuICAgIG1hcmdpbjogMCAyMHB4O1xuICB9XG5cbiAgLmludmVydCB7XG4gICAgZmlsdGVyOiBpbnZlcnQoMSk7XG4gIH0iXX0= */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 1727:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            /***/
        }),

        /***/ 1728:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.WalkthroughService = void 0;

            var _engine = __webpack_require__(509);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var introJs = __webpack_require__(1729);

            var profile = {
                name: 'walkthrough',
                displayName: 'Walkthrough',
                description: '',
                version: packageJson.version,
                methods: ['start']
            };

            var WalkthroughService = /*#__PURE__*/function (_Plugin) {
                _inherits(WalkthroughService, _Plugin);

                var _super = _createSuper(WalkthroughService);

                function WalkthroughService(appManager, showMatamo) {
                    var _this;

                    _classCallCheck(this, WalkthroughService);

                    _this = _super.call(this, profile);
                    appManager.event.on('activate', function (plugin) {
                        if (plugin.name === 'udapp' && !showMatamo) {
                            _this.start();
                        }
                    });
                    return _this;
                }

                _createClass(WalkthroughService, [
                    {
                        key: "start",
                        value: function start() {
                            if (!localStorage.getItem('hadTour_initial')) {
                                introJs().setOptions({
                                    steps: [
                                        {
                                            title: 'Welcome to Remix IDE',
                                            intro: 'Click to launch the Home tab that contains links, tips, and shortcuts..',
                                            element: document.querySelector('#verticalIconsHomeIcon'),
                                            tooltipClass: 'bg-light text-dark',
                                            position: 'right'
                                        }, {
                                            element: document.querySelector('#verticalIconsKindsolidity'),
                                            title: 'Solidity Compiler',
                                            intro: 'Having selected a .sol file in the File Explorers (the icon above), compile it with the Solidity Compiler.',
                                            tooltipClass: 'bg-light text-dark',
                                            position: 'right'
                                        }, {
                                            title: 'Deploy your contract',
                                            element: document.querySelector('#verticalIconsKindudapp'),
                                            intro: 'Choose a chain, deploy a contract and play with your functions.',
                                            tooltipClass: 'bg-light text-dark',
                                            position: 'right'
                                        }
                                    ]
                                }).onafterchange(function (targetElement) {
                                    var header = document.getElementsByClassName('introjs-tooltip-header')[0];

                                    if (header) {
                                        header.classList.add('d-flex');
                                        header.classList.add('justify-content-between');
                                        header.classList.add('text-nowrap');
                                        header.classList.add('pr-0');
                                    }

                                    var skipbutton = document.getElementsByClassName('introjs-skipbutton')[0];

                                    if (skipbutton) {
                                        skipbutton.classList.add('ml-3');
                                        skipbutton.classList.add('text-decoration-none');
                                        skipbutton.id = 'remixTourSkipbtn';
                                    }
                                }).start();
                                localStorage.setItem('hadTour_initial', true);
                            }
                        }
                    }
                ]);

                return WalkthroughService;
            }(_engine.Plugin);

            exports.WalkthroughService = WalkthroughService;

            /***/
        }),

        /***/ 1730:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.OffsetToLineColumnConverter = void 0;

            var _engine = __webpack_require__(509);

            var _remixDebug = __webpack_require__(642);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const profile = {
                name: 'offsetToLineColumnConverter',
                methods: ['offsetToLineColumn'],
                events: [],
                version: '0.0.1'
            };

            class OffsetToLineColumnConverter extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "lineBreakPositionsByContent", void 0);

                    _defineProperty(this, "sourceMappingDecoder", void 0);

                    this.lineBreakPositionsByContent = {};
                    this.sourceMappingDecoder = _remixDebug.sourceMappingDecoder;
                }

                /**
                 * Convert offset representation with line/column representation.
                 * This is also used to resolve the content:
                 * @arg file is the index of the file in the content sources array and content sources array does have filename as key and not index.
                 * So we use the asts (which references both index and filename) to look up the actual content targeted by the @arg file index.
                 * @param {{start, length}} rawLocation - offset location
                 * @param {number} file - The index where to find the source in the sources parameters
                 * @param {Object.<string, {content}>} sources - Map of content sources
                 * @param {Object.<string, {ast, id}>} asts - Map of content sources
                 */


                offsetToLineColumn(rawLocation, file, sources, asts) {
                    if (!this.lineBreakPositionsByContent[file]) {
                        const sourcesArray = Object.keys(sources);

                        if (!asts || file === 0 && sourcesArray.length === 1) {
                            // if we don't have ast, we process the only one available content (applicable also for compiler older than 0.4.12)
                            this.lineBreakPositionsByContent[file] = this.sourceMappingDecoder.getLinebreakPositions(sources[sourcesArray[0]].content);
                        } else {
                            for (var filename in asts) {
                                const source = asts[filename];

                                if (source.id === file) {
                                    this.lineBreakPositionsByContent[file] = this.sourceMappingDecoder.getLinebreakPositions(sources[filename].content);
                                    break;
                                }
                            }
                        }
                    }

                    return this.sourceMappingDecoder.convertOffsetToLineColumn(rawLocation, this.lineBreakPositionsByContent[file]);
                }

                /**
                 * Convert offset representation with line/column representation.
                 * @param {{start, length}} rawLocation - offset location
                 * @param {number} file - The index where to find the source in the sources parameters
                 * @param {string} content - source
                 */


                offsetToLineColumnWithContent(rawLocation, file, content) {
                    this.lineBreakPositionsByContent[file] = this.sourceMappingDecoder.getLinebreakPositions(content);
                    return this.sourceMappingDecoder.convertOffsetToLineColumn(rawLocation, this.lineBreakPositionsByContent[file]);
                }

                /**
                 * Clear the cache
                 */


                clear() {
                    this.lineBreakPositionsByContent = {};
                }

                /**
                 * called by plugin API
                 */


                activate() {
                    this.on('solidity', 'compilationFinished', () => {
                        this.clear();
                    });
                }

            }

            exports.OffsetToLineColumnConverter = OffsetToLineColumnConverter;

            /***/
        }),

        /***/ 1731:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extend = exports.web3DebugNode = exports.setProvider = exports.extendWeb3 = exports.loadWeb3 = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            function loadWeb3(url) {
                if (!url) {
                    url = 'http://localhost:8545';
                }
                const web3 = new web3_1.default();
                web3.setProvider(new web3_1.default.providers.HttpProvider(url));
                extend(web3);
                return web3;
            }

            exports.loadWeb3 = loadWeb3;

            function extendWeb3(web3) {
                extend(web3);
            }

            exports.extendWeb3 = extendWeb3;

            function setProvider(web3, url) {
                web3.setProvider(new web3.providers.HttpProvider(url));
            }

            exports.setProvider = setProvider;

            function web3DebugNode(network) {
                const web3DebugNodes = {
                    Main: 'https://rpc.archivenode.io/e50zmkroshle2e2e50zm0044i7ao04ym',
                    Rinkeby: 'https://remix-rinkeby.ethdevops.io',
                    Ropsten: 'https://remix-ropsten.ethdevops.io',
                    Goerli: 'https://remix-goerli.ethdevops.io'
                };

                if (web3DebugNodes[network]) {
                    return loadWeb3(web3DebugNodes[network]);
                }

                return null;
            }

            exports.web3DebugNode = web3DebugNode;

            function extend(web3) {
                if (!web3.extend) {
                    return;
                } // DEBUG


                const methods = [];

                if (!(web3.debug && web3.debug.preimage)) {
                    methods.push(new web3.extend.Method({
                        name: 'preimage',
                        call: 'debug_preimage',
                        inputFormatter: [null],
                        params: 1
                    }));
                }

                if (!(web3.debug && web3.debug.traceTransaction)) {
                    methods.push(new web3.extend.Method({
                        name: 'traceTransaction',
                        call: 'debug_traceTransaction',
                        inputFormatter: [null, null],
                        params: 2
                    }));
                }

                if (!(web3.debug && web3.debug.storageRangeAt)) {
                    methods.push(new web3.extend.Method({
                        name: 'storageRangeAt',
                        call: 'debug_storageRangeAt',
                        inputFormatter: [null, null, null, null, null],
                        params: 5
                    }));
                }

                if (methods.length > 0) {
                    web3.extend({
                        property: 'debug',
                        methods: methods,
                        properties: []
                    });
                }
            }

            exports.extend = extend;

            /***/
        }),

        /***/ 1732:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TraceManager = void 0;

            const tslib_1 = __webpack_require__(494);

            const remix_lib_1 = __webpack_require__(508);

            const traceAnalyser_1 = __webpack_require__(1733);

            const traceCache_1 = __webpack_require__(1734);

            const traceStepManager_1 = __webpack_require__(1735);

            const traceHelper_1 = __webpack_require__(553);

            class TraceManager {
                constructor(options) {
                    this.web3 = options.web3;
                    this.isLoading = false;
                    this.trace = null;
                    this.traceCache = new traceCache_1.TraceCache();
                    this.traceAnalyser = new traceAnalyser_1.TraceAnalyser(this.traceCache);
                    this.traceStepManager = new traceStepManager_1.TraceStepManager(this.traceAnalyser);
                } // init section


                resolveTrace(tx) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        this.tx = tx;
                        this.init();
                        if (!this.web3) {
                            throw new Error('web3 not loaded');
                        }
                        this.isLoading = true;
                        const result = yield this.getTrace(tx.hash);

                        try {
                            if (result['structLogs'].length > 0) {
                                this.trace = result['structLogs'];

                                try {
                                    const networkId = yield this.web3.eth.net.getId();
                                    this.fork = remix_lib_1.execution.forkAt(networkId, tx.blockNumber);
                                } catch (e) {
                                    this.fork = 'london';
                                    console.log(`unable to detect fork, defaulting to ${this.fork}..`);
                                    console.error(e);
                                }

                                this.traceAnalyser.analyse(result['structLogs'], tx);
                                this.isLoading = false;
                                return true;
                            }

                            var mes = tx.hash + ' is not a contract invocation or contract creation.';
                            console.log(mes);
                            this.isLoading = false;
                            throw new Error(mes);
                        } catch (error) {
                            console.log(error);
                            this.isLoading = false;
                            throw new Error(error);
                        }
                    });
                }

                getTrace(txHash) {
                    return new Promise((resolve, reject) => {
                        const options = {
                            disableStorage: true,
                            enableMemory: true,
                            disableStack: false,
                            fullStorage: false
                        };
                        this.web3.debug.traceTransaction(txHash, options, function (error, result) {
                            if (error) {
                                return reject(error);
                            }
                            resolve(result);
                        });
                    });
                }

                init() {
                    this.trace = null;
                    this.traceCache.init();
                }

                getCurrentFork() {
                    return this.fork;
                } // API section


                inRange(step) {
                    return this.isLoaded() && step >= 0 && step < this.trace.length;
                }

                isLoaded() {
                    return !this.isLoading && this.trace !== null;
                }

                getLength(callback) {
                    if (!this.trace) {
                        callback(new Error('no trace available'), null);
                    } else {
                        callback(null, this.trace.length);
                    }
                }

                accumulateStorageChanges(index, address, storageOrigin) {
                    return this.traceCache.accumulateStorageChanges(index, address, storageOrigin);
                }

                getAddresses() {
                    return this.traceCache.addresses;
                }

                getCallDataAt(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    const callDataChange = remix_lib_1.util.findLowerBoundValue(stepIndex, this.traceCache.callDataChanges);

                    if (callDataChange === null) {
                        throw new Error('no calldata found');
                    }

                    return [this.traceCache.callsData[callDataChange]];
                }

                buildCallPath(stepIndex) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            this.checkRequestedStep(stepIndex);
                        } catch (check) {
                            throw new Error(check);
                        }

                        const callsPath = remix_lib_1.util.buildCallPath(stepIndex, this.traceCache.callsTree.call);
                        if (callsPath === null) {
                            throw new Error('no call path built');
                        }
                        return callsPath;
                    });
                }

                getCallStackAt(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    const call = remix_lib_1.util.findCall(stepIndex, this.traceCache.callsTree.call);

                    if (call === null) {
                        throw new Error('no callstack found');
                    }

                    return call.callStack;
                }

                getStackAt(stepIndex) {
                    this.checkRequestedStep(stepIndex);

                    if (this.trace[stepIndex] && this.trace[stepIndex].stack) {
                        // there's always a stack
                        const stack = this.trace[stepIndex].stack.slice(0);
                        stack.reverse();
                        return stack.map(el => el.startsWith('0x') ? el : '0x' + el);
                    } else {
                        throw new Error('no stack found');
                    }
                }

                getLastCallChangeSince(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    const callChange = remix_lib_1.util.findCall(stepIndex, this.traceCache.callsTree.call);

                    if (callChange === null) {
                        return 0;
                    }

                    return callChange;
                }

                getCurrentCalledAddressAt(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                        const resp = this.getLastCallChangeSince(stepIndex);

                        if (!resp) {
                            throw new Error('unable to get current called address. ' + stepIndex + ' does not match with a CALL');
                        }

                        return resp.address;
                    } catch (error) {
                        throw new Error(error);
                    }
                }

                getContractCreationCode(token) {
                    if (!this.traceCache.contractCreation[token]) {
                        throw new Error('no contract creation named ' + token);
                    }

                    return this.traceCache.contractCreation[token];
                }

                getMemoryAt(stepIndex) {
                    this.checkRequestedStep(stepIndex);
                    const lastChanges = remix_lib_1.util.findLowerBoundValue(stepIndex, this.traceCache.memoryChanges);

                    if (lastChanges === null) {
                        throw new Error('no memory found');
                    }

                    return this.trace[lastChanges].memory;
                }

                getCurrentPC(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    return this.trace[stepIndex].pc;
                }

                getAllStopIndexes() {
                    return this.traceCache.stopIndexes;
                }

                getAllOutofGasIndexes() {
                    return this.traceCache.outofgasIndexes;
                }

                getReturnValue(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    if (!this.traceCache.returnValues[stepIndex]) {
                        throw new Error('current step is not a return step');
                    }

                    return this.traceCache.returnValues[stepIndex];
                }

                getCurrentStep(stepIndex) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    return this.traceCache.steps[stepIndex];
                }

                getMemExpand(stepIndex) {
                    return this.getStepProperty(stepIndex, 'memexpand') || '';
                }

                getStepCost(stepIndex) {
                    return this.getStepProperty(stepIndex, 'gasCost');
                }

                getRemainingGas(stepIndex) {
                    return this.getStepProperty(stepIndex, 'gas');
                }

                getStepProperty(stepIndex, property) {
                    try {
                        this.checkRequestedStep(stepIndex);
                    } catch (check) {
                        throw new Error(check);
                    }

                    return this.trace[stepIndex][property];
                }

                isCreationStep(stepIndex) {
                    return (0, traceHelper_1.isCreateInstruction)(this.trace[stepIndex]);
                } // step section


                findStepOverBack(currentStep) {
                    return this.traceStepManager.findStepOverBack(currentStep);
                }

                findStepOverForward(currentStep) {
                    return this.traceStepManager.findStepOverForward(currentStep);
                }

                findNextCall(currentStep) {
                    return this.traceStepManager.findNextCall(currentStep);
                }

                findStepOut(currentStep) {
                    return this.traceStepManager.findStepOut(currentStep);
                }

                checkRequestedStep(stepIndex) {
                    if (!this.trace) {
                        throw new Error('trace not loaded');
                    } else if (stepIndex >= this.trace.length) {
                        throw new Error('trace smaller than requested');
                    }
                }

                waterfall(calls, stepindex, cb) {
                    const ret = [];
                    let retError = null;

                    for (var call in calls) {
                        calls[call].apply(this, [
                            stepindex, function (error, result) {
                                retError = error;
                                ret.push({
                                    error: error,
                                    value: result
                                });
                            }
                        ]);
                    }

                    cb(retError, ret);
                }

            }

            exports.TraceManager = TraceManager;

            /***/
        }),

        /***/ 1733:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TraceAnalyser = void 0;

            const tslib_1 = __webpack_require__(494);

            const traceHelper = (0, tslib_1.__importStar)(__webpack_require__(553));

            class TraceAnalyser {
                constructor(_cache) {
                    this.traceCache = _cache;
                    this.trace = null;
                }

                analyse(trace, tx) {
                    this.trace = trace;
                    this.traceCache.pushStoreChanges(0, tx.to);
                    let context = {
                        storageContext: [tx.to],
                        currentCallIndex: 0,
                        lastCallIndex: 0
                    };
                    const callStack = [tx.to];
                    this.traceCache.pushCall(trace[0], 0, callStack[0], callStack.slice(0));

                    if (traceHelper.isContractCreation(tx.to)) {
                        this.traceCache.pushContractCreation(tx.to, tx.input);
                    }

                    this.buildCalldata(0, this.trace[0], tx, true);

                    for (let k = 0; k < this.trace.length; k++) {
                        const step = this.trace[k];
                        this.buildMemory(k, step);
                        context = this.buildDepth(k, step, tx, callStack, context);
                        context = this.buildStorage(k, step, context);
                        this.buildReturnValues(k, step);
                    }

                    return true;
                }

                buildReturnValues(index, step) {
                    if (traceHelper.isReturnInstruction(step)) {
                        let offset = 2 * parseInt(step.stack[step.stack.length - 1], 16);
                        const size = 2 * parseInt(step.stack[step.stack.length - 2], 16);
                        const memory = this.trace[this.traceCache.memoryChanges[this.traceCache.memoryChanges.length - 1]].memory;
                        const noOfReturnParams = size / 64;
                        const memoryInString = memory.join('');
                        const returnParamsObj = [];

                        for (let i = 0; i < noOfReturnParams; i++) {
                            returnParamsObj.push('0x' + memoryInString.substring(offset, offset + 64));
                            offset += 64;
                        }

                        this.traceCache.pushReturnValue(index, returnParamsObj);
                    }

                    if (traceHelper.isReturnInstruction(step) || traceHelper.isStopInstruction(step) || traceHelper.isRevertInstruction(step)) {
                        this.traceCache.pushStopIndex(index, this.traceCache.currentCall.call.address);
                    }

                    try {
                        if (parseInt(step.gas) - parseInt(step.gasCost) <= 0 || step.error === 'OutOfGas') {
                            this.traceCache.pushOutOfGasIndex(index, this.traceCache.currentCall.call.address);
                        }
                    } catch (e) {
                        console.error(e);
                    }
                }

                buildCalldata(index, step, tx, newContext) {
                    let calldata = '';

                    if (index === 0) {
                        calldata = tx.input;
                        this.traceCache.pushCallDataChanges(index, calldata);
                    } else if (!newContext) {
                        const lastCall = this.traceCache.callsData[this.traceCache.callDataChanges[this.traceCache.callDataChanges.length - 2]];
                        this.traceCache.pushCallDataChanges(index + 1, lastCall);
                    } else {
                        const memory = this.trace[this.traceCache.memoryChanges[this.traceCache.memoryChanges.length - 1]].memory;
                        const callStep = this.trace[index];
                        const stack = callStep.stack;
                        let offset = 0;
                        let size = 0;

                        if (callStep.op === 'DELEGATECALL') {
                            offset = 2 * parseInt(stack[stack.length - 3], 16);
                            size = 2 * parseInt(stack[stack.length - 4], 16);
                        } else {
                            offset = 2 * parseInt(stack[stack.length - 4], 16);
                            size = 2 * parseInt(stack[stack.length - 5], 16);
                        }

                        calldata = '0x' + memory.join('').substr(offset, size);
                        this.traceCache.pushCallDataChanges(index + 1, calldata);
                    }
                }

                buildMemory(index, step) {
                    if (step.memory) {
                        this.traceCache.pushMemoryChanges(index);
                    }
                }

                buildStorage(index, step, context) {
                    if (traceHelper.newContextStorage(step) && !traceHelper.isCallToPrecompiledContract(index, this.trace)) {
                        const calledAddress = traceHelper.resolveCalledAddress(index, this.trace);

                        if (calledAddress) {
                            context.storageContext.push(calledAddress);
                        } else {
                            console.log('unable to build storage changes. ' + index + ' does not match with a CALL. storage changes will be corrupted');
                        }

                        this.traceCache.pushStoreChanges(index + 1, context.storageContext[context.storageContext.length - 1]);
                    } else if (traceHelper.isSSTOREInstruction(step)) {
                        this.traceCache.pushStoreChanges(index + 1, context.storageContext[context.storageContext.length - 1], step.stack[step.stack.length - 1], step.stack[step.stack.length - 2]);
                    } else if (traceHelper.isReturnInstruction(step) || traceHelper.isStopInstruction(step)) {
                        context.storageContext.pop();
                        this.traceCache.pushStoreChanges(index + 1, context.storageContext[context.storageContext.length - 1]);
                    } else if (traceHelper.isRevertInstruction(step)) {
                        context.storageContext.pop();
                        this.traceCache.resetStoreChanges();
                    }

                    return context;
                }

                buildDepth(index, step, tx, callStack, context) {
                    if (traceHelper.isCallInstruction(step) && !traceHelper.isCallToPrecompiledContract(index, this.trace)) {
                        let newAddress;

                        if (traceHelper.isCreateInstruction(step)) {
                            newAddress = traceHelper.contractCreationToken(index);
                            callStack.push(newAddress);
                            const lastMemoryChange = this.traceCache.memoryChanges[this.traceCache.memoryChanges.length - 1];
                            this.traceCache.pushContractCreationFromMemory(index, newAddress, this.trace, lastMemoryChange);
                        } else {
                            newAddress = traceHelper.resolveCalledAddress(index, this.trace);

                            if (newAddress) {
                                callStack.push(newAddress);
                            } else {
                                console.log('unable to build depth changes. ' + index + ' does not match with a CALL. depth changes will be corrupted');
                            }
                        }

                        this.traceCache.pushCall(step, index + 1, newAddress, callStack.slice(0));
                        this.buildCalldata(index, step, tx, true);
                        this.traceCache.pushSteps(index, context.currentCallIndex);
                        context.lastCallIndex = context.currentCallIndex;
                        context.currentCallIndex = 0;
                    } else if (traceHelper.isReturnInstruction(step) || traceHelper.isStopInstruction(step) || step.error || step.invalidDepthChange) {
                        if (index < this.trace.length) {
                            callStack.pop();
                            this.traceCache.pushCall(step, index + 1, null, callStack.slice(0), step.error || step.invalidDepthChange);
                            this.buildCalldata(index, step, tx, false);
                            this.traceCache.pushSteps(index, context.currentCallIndex);
                            context.currentCallIndex = context.lastCallIndex + 1;
                        }
                    } else {
                        this.traceCache.pushSteps(index, context.currentCallIndex);
                        context.currentCallIndex++;
                    }

                    return context;
                }

            }

            exports.TraceAnalyser = TraceAnalyser;

            /***/
        }),

        /***/ 1734:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TraceCache = void 0;

            const remix_lib_1 = __webpack_require__(508); // eslint-disable-next-line camelcase


            const {
                sha3_256
            } = remix_lib_1.util;

            class TraceCache {
                constructor() {
                    this.init();
                }

                init() {
                    // ...Changes contains index in the vmtrace of the corresponding changes
                    this.returnValues = {};
                    this.stopIndexes = [];
                    this.outofgasIndexes = [];
                    this.currentCall = null;
                    this.callsTree = null;
                    this.callsData = {};
                    this.contractCreation = {};
                    this.steps = {};
                    this.addresses = [];
                    this.callDataChanges = [];
                    this.memoryChanges = [];
                    this.storageChanges = [];
                    this.sstore = {}; // all sstore occurence in the trace
                }

                pushSteps(index, currentCallIndex) {
                    this.steps[index] = currentCallIndex;
                }

                pushCallDataChanges(value, calldata) {
                    this.callDataChanges.push(value);
                    this.callsData[value] = calldata;
                }

                pushMemoryChanges(value) {
                    this.memoryChanges.push(value);
                } // outOfGas has been removed because gas left logging is apparently made differently
                // in the vm/geth/eth. TODO add the error property (with about the error in all clients)


                pushCall(step, index, address, callStack, reverted) {
                    const validReturnStep = step.op === 'RETURN' || step.op === 'STOP';

                    if ((validReturnStep || reverted) && this.currentCall) {
                        this.currentCall.call.return = index - 1;

                        if (!validReturnStep) {
                            this.currentCall.call.reverted = reverted;
                        }

                        var parent = this.currentCall.parent;
                        if (parent) {
                            this.currentCall = {
                                call: parent.call,
                                parent: parent.parent
                            };
                        }
                        return;
                    }

                    const call = {
                        op: step.op,
                        address: address,
                        callStack: callStack,
                        calls: {},
                        start: index
                    };
                    this.addresses.push(address);

                    if (this.currentCall) {
                        this.currentCall.call.calls[index] = call;
                    } else {
                        this.callsTree = {
                            call: call
                        };
                    }

                    this.currentCall = {
                        call: call,
                        parent: this.currentCall
                    };
                }

                pushOutOfGasIndex(index, address) {
                    this.outofgasIndexes.push({
                        index,
                        address
                    });
                }

                pushStopIndex(index, address) {
                    this.stopIndexes.push({
                        index,
                        address
                    });
                }

                pushReturnValue(step, value) {
                    this.returnValues[step] = value;
                }

                pushContractCreationFromMemory(index, token, trace, lastMemoryChange) {
                    const memory = trace[lastMemoryChange].memory;
                    const stack = trace[index].stack;
                    const offset = 2 * parseInt(stack[stack.length - 2], 16);
                    const size = 2 * parseInt(stack[stack.length - 3], 16);
                    this.contractCreation[token] = '0x' + memory.join('').substr(offset, size);
                }

                pushContractCreation(token, code) {
                    this.contractCreation[token] = code;
                }

                resetStoreChanges(index, address, key, value) {
                    this.sstore = {};
                    this.storageChanges = [];
                }

                pushStoreChanges(index, address, key, value) {
                    this.sstore[index] = {
                        address: address,
                        key: key,
                        value: value,
                        hashedKey: key && sha3_256(key)
                    };
                    this.storageChanges.push(index);
                }

                accumulateStorageChanges(index, address, storage) {
                    const ret = Object.assign({}, storage);

                    for (var k in this.storageChanges) {
                        const changesIndex = this.storageChanges[k];

                        if (changesIndex > index) {
                            return ret;
                        }

                        var sstore = this.sstore[changesIndex];

                        if (sstore.address === address && sstore.key) {
                            ret[sstore.hashedKey] = {
                                key: sstore.key,
                                value: sstore.value
                            };
                        }
                    }

                    return ret;
                }

            }

            exports.TraceCache = TraceCache;

            /***/
        }),

        /***/ 1735:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.TraceStepManager = void 0;

            const traceHelper_1 = __webpack_require__(553);

            const remix_lib_1 = __webpack_require__(508);

            class TraceStepManager {
                constructor(_traceAnalyser) {
                    this.traceAnalyser = _traceAnalyser;
                }

                isCallInstruction(index) {
                    const state = this.traceAnalyser.trace[index];
                    return (0, traceHelper_1.isCallInstruction)(state) && !(0, traceHelper_1.isCallToPrecompiledContract)(index, this.traceAnalyser.trace);
                }

                isReturnInstruction(index) {
                    const state = this.traceAnalyser.trace[index];
                    return (0, traceHelper_1.isReturnInstruction)(state);
                }

                findStepOverBack(currentStep) {
                    if (this.isReturnInstruction(currentStep)) {
                        const call = remix_lib_1.util.findCall(currentStep, this.traceAnalyser.traceCache.callsTree.call);
                        return call.start > 0 ? call.start - 1 : 0;
                    }

                    return currentStep > 0 ? currentStep - 1 : 0;
                }

                findStepOverForward(currentStep) {
                    if (this.isCallInstruction(currentStep)) {
                        const call = remix_lib_1.util.findCall(currentStep + 1, this.traceAnalyser.traceCache.callsTree.call);
                        return call.return + 1 < this.traceAnalyser.trace.length ? call.return + 1 : this.traceAnalyser.trace.length - 1;
                    }

                    return this.traceAnalyser.trace.length >= currentStep + 1 ? currentStep + 1 : currentStep;
                }

                findNextCall(currentStep) {
                    const call = remix_lib_1.util.findCall(currentStep, this.traceAnalyser.traceCache.callsTree.call);
                    const subCalls = Object.keys(call.calls);

                    if (subCalls.length) {
                        var callStart = remix_lib_1.util.findLowerBound(currentStep, subCalls) + 1;

                        if (subCalls.length > callStart) {
                            return parseInt(subCalls[callStart]) - 1;
                        }

                        return currentStep;
                    }

                    return currentStep;
                }

                findStepOut(currentStep) {
                    const call = remix_lib_1.util.findCall(currentStep, this.traceAnalyser.traceCache.callsTree.call);
                    return call.return;
                }

            }

            exports.TraceStepManager = TraceStepManager;

            /***/
        }),

        /***/ 1736:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CodeManager = void 0;

            const tslib_1 = __webpack_require__(494);

            const eventManager_1 = __webpack_require__(562);

            const traceHelper_1 = __webpack_require__(553);

            const sourceMappingDecoder_1 = __webpack_require__(768);

            const codeResolver_1 = __webpack_require__(1739);

            /*
  resolve contract code referenced by vmtrace in order to be used by asm listview.
  events:
   - changed: triggered when an item is selected
   - resolvingStep: when CodeManager resolves code/selected instruction of a new step
*/


            class CodeManager {
                constructor(_traceManager) {
                    this.event = new eventManager_1.EventManager();
                    this.isLoading = false;
                    this.traceManager = _traceManager;
                    this.codeResolver = new codeResolver_1.CodeResolver({
                        getCode: address => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                this.traceManager.web3.eth.getCode(address, (error, code) => {
                                    if (error) {
                                        return reject(error);
                                    }

                                    return resolve(code);
                                });
                            });
                        }),
                        fork: this.traceManager.getCurrentFork()
                    });
                }

                /**
                 * clear the cache
                 *
                 */


                clear() {
                    this.codeResolver.clear();
                }

                /**
                 * resolve the code of the given @arg stepIndex and trigger appropriate event
                 *
                 * @param {String} stepIndex - vm trace step
                 * @param {Object} tx - transaction (given by web3)
                 */


                resolveStep(stepIndex, tx) {
                    if (stepIndex < 0) {
                        return;
                    }
                    this.event.trigger('resolvingStep');

                    if (stepIndex === 0) {
                        return this.retrieveCodeAndTrigger(this, tx.to, stepIndex, tx);
                    }

                    try {
                        const address = this.traceManager.getCurrentCalledAddressAt(stepIndex);
                        this.retrieveCodeAndTrigger(this, address, stepIndex, tx);
                    } catch (error) {
                        return console.log(error);
                    }
                }

                /**
                 * Retrieve the code located at the given @arg address
                 *
                 * @param {String} address - address of the contract to get the code from
                 * @param {Function} cb - callback function, return the bytecode
                 */


                getCode(address) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (!(0, traceHelper_1.isContractCreation)(address)) {
                            const code = yield this.codeResolver.resolveCode(address);
                            return code;
                        }

                        var codes = this.codeResolver.getExecutingCodeFromCache(address);

                        if (codes) {
                            return codes;
                        }

                        const hexCode = this.traceManager.getContractCreationCode(address);
                        codes = this.codeResolver.cacheExecutingCode(address, hexCode);
                        return codes;
                    });
                }

                /**
                 * Retrieve the called function for the current vm step for the given @arg address
                 *
                 * @param {String} stepIndex - vm trace step
                 * @param {String} sourceMap - source map given byt the compilation result
                 * @param {Object} ast - ast given by the compilation result
                 * @return {Object} return the ast node of the function
                 */


                getFunctionFromStep(stepIndex, sourceMap, ast) {
                    try {
                        const address = this.traceManager.getCurrentCalledAddressAt(stepIndex);
                        const pc = this.traceManager.getCurrentPC(stepIndex);
                        return this.getFunctionFromPC(address, pc, sourceMap, ast);
                    } catch (error) {
                        console.log(error);
                        return {
                            error: 'Cannot retrieve current address or PC for ' + stepIndex
                        };
                    }
                }

                /**
                 * Retrieve the instruction index of the given @arg step
                 *
                 * @param {String} address - address of the current context
                 * @param {String} step - vm trace step
                 * @param {Function} callback - instruction index
                 */


                getInstructionIndex(address, step) {
                    try {
                        const pc = this.traceManager.getCurrentPC(step);
                        const itemIndex = this.codeResolver.getInstructionIndex(address, pc);
                        return itemIndex;
                    } catch (error) {
                        console.log(error);
                        throw new Error('Cannot retrieve current PC for ' + step);
                    }
                }

                /**
                 * Retrieve the called function for the given @arg pc and @arg address
                 *
                 * @param {String} address - address of the current context (used to resolve instruction index)
                 * @param {String} pc - pc that point to the instruction index
                 * @param {String} sourceMap - source map given byt the compilation result
                 * @param {Object} ast - ast given by the compilation result
                 * @return {Object} return the ast node of the function
                 */


                getFunctionFromPC(address, pc, sourceMap, ast) {
                    const instIndex = this.codeResolver.getInstructionIndex(address, pc);
                    return (0, sourceMappingDecoder_1.findNodeAtInstructionIndex)('FunctionDefinition', instIndex, sourceMap, ast);
                }

                retrieveCodeAndTrigger(codeMananger, address, stepIndex, tx) {
                    codeMananger.getCode(address).then(result => {
                        this.retrieveIndexAndTrigger(codeMananger, address, stepIndex, result.instructions);
                    }).catch(error => {
                        return console.log(error);
                    });
                }

                retrieveIndexAndTrigger(codeMananger, address, step, code) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        let result;
                        const next = [];
                        const returnInstructionIndexes = [];
                        const outOfGasInstructionIndexes = [];

                        try {
                            result = codeMananger.getInstructionIndex(address, step);

                            for (let i = 1; i < 6; i++) {
                                if (this.traceManager.inRange(step + i)) {
                                    next.push(codeMananger.getInstructionIndex(address, step + i));
                                }
                            }

                            let values = this.traceManager.getAllStopIndexes();

                            if (values) {
                                for (const value of values) {
                                    if (value.address === address) {
                                        returnInstructionIndexes.push({
                                            instructionIndex: this.getInstructionIndex(address, value.index),
                                            address
                                        });
                                    }
                                }
                            }

                            values = this.traceManager.getAllOutofGasIndexes();

                            if (values) {
                                for (const value of values) {
                                    if (value.address === address) {
                                        outOfGasInstructionIndexes.push({
                                            instructionIndex: this.getInstructionIndex(address, value.index),
                                            address
                                        });
                                    }
                                }
                            }
                        } catch (error) {
                            return console.log(error);
                        }

                        try {
                            codeMananger.event.trigger('changed', [code, address, result, next, returnInstructionIndexes, outOfGasInstructionIndexes]);
                        } catch (e) {
                            console.log('dispatching event failed', e);
                        }
                    });
                }

            }

            exports.CodeManager = CodeManager;

            /***/
        }),

        /***/ 1737:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            /***/
        }),

        /***/ 1738:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SourceMappings = exports.sourceLocationFromSrc = exports.sourceLocationFromAstNode = exports.lineColPositionFromOffset = void 0;

            const astWalker_1 = __webpack_require__(1002);

            const remix_lib_1 = __webpack_require__(508);

            /**
             * Turn an character offset into a "LineColPosition".
             *
             * @param offset  The character offset to convert.
             */


            function lineColPositionFromOffset(offset, lineBreaks) {
                let line = remix_lib_1.util.findLowerBound(offset, lineBreaks);

                if (lineBreaks[line] !== offset) {
                    line += 1;
                }

                const beginColumn = line === 0 ? 0 : lineBreaks[line - 1] + 1;
                return {
                    line: line + 1,
                    character: offset - beginColumn + 1
                };
            }

            exports.lineColPositionFromOffset = lineColPositionFromOffset;

            /**
             * Turn a solc AST's "src" attribute string (s:l:f)
             * into a Location
             *
             * @param astNode  The object to convert.
             */

            function sourceLocationFromAstNode(astNode) {
                if ((0, astWalker_1.isAstNode)(astNode) && (0, astWalker_1.isYulAstNode)(astNode) && astNode.src) {
                    return sourceLocationFromSrc(astNode.src);
                }

                return null;
            }

            exports.sourceLocationFromAstNode = sourceLocationFromAstNode;

            /**
             * Break out fields of solc AST's "src" attribute string (s:l:f)
             * into its "start", "length", and "file index" components
             * and return that as a Location
             *
             * @param src  A solc "src" field.
             * @returns {Location}
             */

            function sourceLocationFromSrc(src) {
                const split = src.split(':');
                return {
                    start: parseInt(split[0], 10),
                    length: parseInt(split[1], 10),
                    file: parseInt(split[2], 10)
                };
            }

            exports.sourceLocationFromSrc = sourceLocationFromSrc;

            /**
             * Routines for retrieving solc AST object(s) using some criteria, usually
             * includng "src' information.
             */
                // eslint-disable-next-line no-redeclare

            class SourceMappings {
                constructor(source) {
                    this.source = source; // Create a list of line offsets which will be used to map between
                    // character offset and line/column positions.

                    const lineBreaks = [];

                    for (let pos = source.indexOf('\n'); pos >= 0; pos = source.indexOf('\n', pos + 1)) {
                        lineBreaks.push(pos);
                    }

                    this.lineBreaks = lineBreaks;
                }

                /**
                 * Get a list of nodes that are at the given "position".
                 *
                 * @param astNodeType  Type of node to return or null.
                 * @param position     Character offset where AST node should be located.
                 */
                nodesAtPosition(astNodeType, position, ast) {
                    const astWalker = new astWalker_1.AstWalker();
                    const found = [];

                    const callback = function (node) {
                        const nodeLocation = sourceLocationFromAstNode(node);

                        if (nodeLocation && nodeLocation.start === position.start && nodeLocation.length === position.length) {
                            if (!astNodeType || astNodeType === node.nodeType) {
                                found.push(node);
                            }
                        }

                        return true;
                    };

                    astWalker.walkFull(ast, callback);
                    return found;
                }

                /**
                 * Retrieve the first "astNodeType" that includes the source map at arg instIndex, or "null" if none found.
                 *
                 * @param astNodeType   nodeType that a found ASTNode must be. Use "null" if any ASTNode can match.
                 * @param sourceLocation "src" location that the AST node must match.
                 */


                findNodeAtSourceLocation(astNodeType, sourceLocation, ast) {
                    const astWalker = new astWalker_1.AstWalker();
                    let found = null;
                    /* FIXME: Looking at AST walker code,
       I don't understand a need to return a boolean. */

                    const callback = function (node) {
                        const nodeLocation = sourceLocationFromAstNode(node);

                        if (nodeLocation && nodeLocation.start === sourceLocation.start && nodeLocation.length === sourceLocation.length) {
                            if (astNodeType === undefined || astNodeType === node.nodeType) {
                                found = node;
                            }
                        }

                        return true;
                    };

                    astWalker.walkFull(ast, callback);
                    return found;
                }

                /**
                 * Retrieve the line/column range position for the given source-mapping string.
                 *
                 * @param src  Solc "src" object containing attributes {source} and {length}.
                 */


                srcToLineColumnRange(src) {
                    const sourceLocation = sourceLocationFromSrc(src);

                    if (sourceLocation.start >= 0 && sourceLocation.length >= 0) {
                        return {
                            start: lineColPositionFromOffset(sourceLocation.start, this.lineBreaks),
                            end: lineColPositionFromOffset(sourceLocation.start + sourceLocation.length, this.lineBreaks)
                        };
                    } else {
                        return {
                            start: null,
                            end: null
                        };
                    }
                }

            }

            exports.SourceMappings = SourceMappings;

            /***/
        }),

        /***/ 1739:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.CodeResolver = void 0;

                const tslib_1 = __webpack_require__(494);

                const codeUtils_1 = __webpack_require__(1740);

                class CodeResolver {
                    constructor({
                                    getCode,
                                    fork
                                }) {
                        this.getCode = getCode;
                        this.bytecodeByAddress = {}; // bytes code by contract addesses

                        this.instructionsByAddress = {}; // assembly items instructions list by contract addesses

                        this.instructionsIndexByBytesOffset = {}; // mapping between bytes offset and instructions index.

                        this.fork = fork;
                    }

                    clear() {
                        this.bytecodeByAddress = {};
                        this.instructionsByAddress = {};
                        this.instructionsIndexByBytesOffset = {};
                    }

                    resolveCode(address) {
                        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                            const cache = this.getExecutingCodeFromCache(address);

                            if (cache) {
                                return cache;
                            }

                            const code = yield this.getCode(address);
                            return this.cacheExecutingCode(address, code);
                        });
                    }

                    cacheExecutingCode(address, hexCode) {
                        const codes = this.formatCode(hexCode);
                        this.bytecodeByAddress[address] = hexCode;
                        this.instructionsByAddress[address] = codes.code;
                        this.instructionsIndexByBytesOffset[address] = codes.instructionsIndexByBytesOffset;
                        return this.getExecutingCodeFromCache(address);
                    }

                    formatCode(hexCode) {
                        const [code, instructionsIndexByBytesOffset] = (0, codeUtils_1.nameOpCodes)(Buffer.from(hexCode.substring(2), 'hex'), this.fork);
                        return {
                            code,
                            instructionsIndexByBytesOffset
                        };
                    }

                    getExecutingCodeFromCache(address) {
                        if (!this.instructionsByAddress[address]) {
                            return null;
                        }

                        return {
                            instructions: this.instructionsByAddress[address],
                            instructionsIndexByBytesOffset: this.instructionsIndexByBytesOffset[address],
                            bytecode: this.bytecodeByAddress[address]
                        };
                    }

                    getInstructionIndex(address, pc) {
                        return this.getExecutingCodeFromCache(address).instructionsIndexByBytesOffset[pc];
                    }

                }

                exports.CodeResolver = CodeResolver;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1740:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.roundLog = exports.log = exports.pad = exports.parseCode = exports.nameOpCodes = void 0;

            const tslib_1 = __webpack_require__(494);

            const common_1 = (0, tslib_1.__importDefault)(__webpack_require__(529));

            const opcodes_1 = __webpack_require__(769);

            const opcodes_2 = (0, tslib_1.__importDefault)(__webpack_require__(1745));

            function nameOpCodes(raw, hardfork) {
                const common = new common_1.default({
                    chain: 'mainnet',
                    hardfork
                });
                const opcodes = (0, opcodes_1.getOpcodesForHF)(common);
                let pushData = '';
                const codeMap = {};
                const code = [];

                for (let i = 0; i < raw.length; i++) {
                    const pc = i;
                    let curOpCode;

                    try {
                        curOpCode = opcodes.get(raw[pc]).fullName;
                    } catch (e) {
                        curOpCode = 'INVALID';
                    }

                    codeMap[i] = code.length; // no destinations into the middle of PUSH

                    if (curOpCode.slice(0, 4) === 'PUSH') {
                        const jumpNum = raw[pc] - 0x5f;
                        pushData = raw.slice(pc + 1, pc + jumpNum + 1);
                        i += jumpNum;
                    }

                    const data = pushData.toString('hex') !== '' ? ' ' + pushData.toString('hex') : '';
                    code.push(pad(pc, roundLog(raw.length, 10)) + ' ' + curOpCode + data);
                    pushData = '';
                }

                return [code, codeMap];
            }

            exports.nameOpCodes = nameOpCodes;

            /**
             * Parses code as a list of integers into a list of objects containing
             * information about the opcode.
             */

            function parseCode(raw) {
                const common = new common_1.default({
                    chain: 'mainnet',
                    hardfork: 'london'
                });
                const opcodes = (0, opcodes_1.getOpcodesForHF)(common);
                const code = [];

                for (let i = 0; i < raw.length; i++) {
                    const opcode = {
                        name: 'INVALID'
                    };

                    try {
                        const code = opcodes.get(raw[i]);
                        const opcodeDetails = (0, opcodes_2.default)(raw[i], false);
                        opcode.in = opcodeDetails.in;
                        opcode.out = opcodeDetails.out;
                        opcode.name = code.fullName;
                    } catch (e) {
                        opcode.name = 'INVALID';
                    }

                    if (opcode.name.slice(0, 4) === 'PUSH') {
                        const length = raw[i] - 0x5f;
                        opcode.pushData = raw.slice(i + 1, i + length + 1); // in case pushdata extends beyond code

                        if (i + 1 + length > raw.length) {
                            for (let j = opcode['pushData'].length; j < length; j++) {
                                opcode['pushData'].push(0);
                            }
                        }

                        i += length;
                    }

                    code.push(opcode);
                }

                return code;
            }

            exports.parseCode = parseCode;

            function pad(num, size) {
                let s = num + '';

                while (s.length < size) {
                    s = '0' + s;
                }

                return s;
            }

            exports.pad = pad;

            function log(num, base) {
                return Math.log(num) / Math.log(base);
            }

            exports.log = log;

            function roundLog(num, base) {
                return Math.ceil(log(num, base));
            }

            exports.roundLog = roundLog;

            /***/
        }),

        /***/ 1745:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            function default_1(op, full) {
                const codes = {
                    // 0x0 range - arithmetic ops
                    // name, baseCost, off stack, on stack, dynamic, async
                    // @todo can be improved on basis of this: https://github.com/ethereumjs/ethereumjs-vm/blob/master/lib/evm/opcodes.ts
                    0x00: ['STOP', 0, 0, 0, false],
                    0x01: ['ADD', 3, 2, 1, false],
                    0x02: ['MUL', 5, 2, 1, false],
                    0x03: ['SUB', 3, 2, 1, false],
                    0x04: ['DIV', 5, 2, 1, false],
                    0x05: ['SDIV', 5, 2, 1, false],
                    0x06: ['MOD', 5, 2, 1, false],
                    0x07: ['SMOD', 5, 2, 1, false],
                    0x08: ['ADDMOD', 8, 3, 1, false],
                    0x09: ['MULMOD', 8, 3, 1, false],
                    0x0a: ['EXP', 10, 2, 1, false],
                    0x0b: ['SIGNEXTEND', 5, 2, 1, false],
                    // 0x10 range - bit ops
                    0x10: ['LT', 3, 2, 1, false],
                    0x11: ['GT', 3, 2, 1, false],
                    0x12: ['SLT', 3, 2, 1, false],
                    0x13: ['SGT', 3, 2, 1, false],
                    0x14: ['EQ', 3, 2, 1, false],
                    0x15: ['ISZERO', 3, 1, 1, false],
                    0x16: ['AND', 3, 2, 1, false],
                    0x17: ['OR', 3, 2, 1, false],
                    0x18: ['XOR', 3, 2, 1, false],
                    0x19: ['NOT', 3, 1, 1, false],
                    0x1a: ['BYTE', 3, 2, 1, false],
                    0x1b: ['SHL', 3, 2, 1, false],
                    0x1c: ['SHR', 3, 2, 1, false],
                    0x1d: ['SAR', 3, 2, 1, false],
                    // 0x20 range - crypto
                    0x20: ['SHA3', 30, 2, 1, false],
                    // 0x30 range - closure state
                    0x30: ['ADDRESS', 2, 0, 1, true],
                    0x31: ['BALANCE', 700, 1, 1, true, true],
                    0x32: ['ORIGIN', 2, 0, 1, true],
                    0x33: ['CALLER', 2, 0, 1, true],
                    0x34: ['CALLVALUE', 2, 0, 1, true],
                    0x35: ['CALLDATALOAD', 3, 1, 1, true],
                    0x36: ['CALLDATASIZE', 2, 0, 1, true],
                    0x37: ['CALLDATACOPY', 3, 3, 0, true],
                    0x38: ['CODESIZE', 2, 0, 1, false],
                    0x39: ['CODECOPY', 3, 3, 0, false],
                    0x3a: ['GASPRICE', 2, 0, 1, false],
                    0x3b: ['EXTCODESIZE', 700, 1, 1, true, true],
                    0x3c: ['EXTCODECOPY', 700, 4, 0, true, true],
                    0x3d: ['RETURNDATASIZE', 2, 0, 1, true],
                    0x3e: ['RETURNDATACOPY', 3, 3, 0, true],
                    0x3f: ['EXTCODEHASH', 400, 3, 0, true],
                    // '0x40' range - block operations
                    0x40: ['BLOCKHASH', 20, 1, 1, true, true],
                    0x41: ['COINBASE', 2, 0, 1, true],
                    0x42: ['TIMESTAMP', 2, 0, 1, true],
                    0x43: ['NUMBER', 2, 0, 1, true],
                    0x44: ['DIFFICULTY', 2, 0, 1, true],
                    0x45: ['GASLIMIT', 2, 0, 1, true],
                    0x46: ['CHAINID', 2, 0, 1, false],
                    0x47: ['SELFBALANCE', 5, 0, 1, false],
                    // 0x50 range - 'storage' and execution
                    0x50: ['POP', 2, 1, 0, false],
                    0x51: ['MLOAD', 3, 1, 1, false],
                    0x52: ['MSTORE', 3, 2, 0, false],
                    0x53: ['MSTORE8', 3, 2, 0, false],
                    0x54: ['SLOAD', 800, 1, 1, true, true],
                    0x55: ['SSTORE', 0, 2, 0, true, true],
                    0x56: ['JUMP', 8, 1, 0, false],
                    0x57: ['JUMPI', 10, 2, 0, false],
                    0x58: ['PC', 2, 0, 1, false],
                    0x59: ['MSIZE', 2, 0, 1, false],
                    0x5a: ['GAS', 2, 0, 1, false],
                    0x5b: ['JUMPDEST', 1, 0, 0, false],
                    // 0x60, range
                    0x60: ['PUSH1', 3, 0, 1, false],
                    0x61: ['PUSH2', 3, 0, 1, false],
                    0x62: ['PUSH3', 3, 0, 1, false],
                    0x63: ['PUSH4', 3, 0, 1, false],
                    0x64: ['PUSH5', 3, 0, 1, false],
                    0x65: ['PUSH6', 3, 0, 1, false],
                    0x66: ['PUSH7', 3, 0, 1, false],
                    0x67: ['PUSH8', 3, 0, 1, false],
                    0x68: ['PUSH9', 3, 0, 1, false],
                    0x69: ['PUSH10', 3, 0, 1, false],
                    0x6a: ['PUSH11', 3, 0, 1, false],
                    0x6b: ['PUSH12', 3, 0, 1, false],
                    0x6c: ['PUSH13', 3, 0, 1, false],
                    0x6d: ['PUSH14', 3, 0, 1, false],
                    0x6e: ['PUSH15', 3, 0, 1, false],
                    0x6f: ['PUSH16', 3, 0, 1, false],
                    0x70: ['PUSH17', 3, 0, 1, false],
                    0x71: ['PUSH18', 3, 0, 1, false],
                    0x72: ['PUSH19', 3, 0, 1, false],
                    0x73: ['PUSH20', 3, 0, 1, false],
                    0x74: ['PUSH21', 3, 0, 1, false],
                    0x75: ['PUSH22', 3, 0, 1, false],
                    0x76: ['PUSH23', 3, 0, 1, false],
                    0x77: ['PUSH24', 3, 0, 1, false],
                    0x78: ['PUSH25', 3, 0, 1, false],
                    0x79: ['PUSH26', 3, 0, 1, false],
                    0x7a: ['PUSH27', 3, 0, 1, false],
                    0x7b: ['PUSH28', 3, 0, 1, false],
                    0x7c: ['PUSH29', 3, 0, 1, false],
                    0x7d: ['PUSH30', 3, 0, 1, false],
                    0x7e: ['PUSH31', 3, 0, 1, false],
                    0x7f: ['PUSH32', 3, 0, 1, false],
                    0x80: ['DUP1', 3, 0, 1, false],
                    0x81: ['DUP2', 3, 0, 1, false],
                    0x82: ['DUP3', 3, 0, 1, false],
                    0x83: ['DUP4', 3, 0, 1, false],
                    0x84: ['DUP5', 3, 0, 1, false],
                    0x85: ['DUP6', 3, 0, 1, false],
                    0x86: ['DUP7', 3, 0, 1, false],
                    0x87: ['DUP8', 3, 0, 1, false],
                    0x88: ['DUP9', 3, 0, 1, false],
                    0x89: ['DUP10', 3, 0, 1, false],
                    0x8a: ['DUP11', 3, 0, 1, false],
                    0x8b: ['DUP12', 3, 0, 1, false],
                    0x8c: ['DUP13', 3, 0, 1, false],
                    0x8d: ['DUP14', 3, 0, 1, false],
                    0x8e: ['DUP15', 3, 0, 1, false],
                    0x8f: ['DUP16', 3, 0, 1, false],
                    0x90: ['SWAP1', 3, 0, 0, false],
                    0x91: ['SWAP2', 3, 0, 0, false],
                    0x92: ['SWAP3', 3, 0, 0, false],
                    0x93: ['SWAP4', 3, 0, 0, false],
                    0x94: ['SWAP5', 3, 0, 0, false],
                    0x95: ['SWAP6', 3, 0, 0, false],
                    0x96: ['SWAP7', 3, 0, 0, false],
                    0x97: ['SWAP8', 3, 0, 0, false],
                    0x98: ['SWAP9', 3, 0, 0, false],
                    0x99: ['SWAP10', 3, 0, 0, false],
                    0x9a: ['SWAP11', 3, 0, 0, false],
                    0x9b: ['SWAP12', 3, 0, 0, false],
                    0x9c: ['SWAP13', 3, 0, 0, false],
                    0x9d: ['SWAP14', 3, 0, 0, false],
                    0x9e: ['SWAP15', 3, 0, 0, false],
                    0x9f: ['SWAP16', 3, 0, 0, false],
                    0xa0: ['LOG0', 375, 2, 0, false],
                    0xa1: ['LOG1', 375, 3, 0, false],
                    0xa2: ['LOG2', 375, 4, 0, false],
                    0xa3: ['LOG3', 375, 5, 0, false],
                    0xa4: ['LOG4', 375, 6, 0, false],
                    // '0xf0' range - closures
                    0xf0: ['CREATE', 32000, 3, 1, true, true],
                    0xf1: ['CALL', 700, 7, 1, true, true],
                    0xf2: ['CALLCODE', 700, 7, 1, true, true],
                    0xf3: ['RETURN', 0, 2, 0, false],
                    0xf4: ['DELEGATECALL', 700, 6, 1, true, true],
                    0xf5: ['CREATE2', 32000, 4, 1, true, true],
                    0xfa: ['STATICCALL', 700, 6, 1, true, true],
                    0xfd: ['REVERT', 0, 2, 0, false],
                    // '0x70', range - other
                    0xfe: ['INVALID', 0, 0, 0, false],
                    0xff: ['SELFDESTRUCT', 5000, 1, 0, false, true]
                };
                const code = codes[op] ? codes[op] : ['INVALID', 0, 0, 0, false, false];
                let opcode = code[0];

                if (full) {
                    if (opcode === 'LOG') {
                        opcode += op - 0xa0;
                    }

                    if (opcode === 'PUSH') {
                        opcode += op - 0x5f;
                    }

                    if (opcode === 'DUP') {
                        opcode += op - 0x7f;
                    }

                    if (opcode === 'SWAP') {
                        opcode += op - 0x8f;
                    }
                }

                return {
                    name: opcode,
                    fee: code[1],
                    in: code[2],
                    out: code[3],
                    dynamic: code[4],
                    async: code[5]
                };
            }

            exports.default = default_1;

            /***/
        }),

        /***/ 1746:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SolidityProxy = void 0;

            const tslib_1 = __webpack_require__(494);

            const remix_lib_1 = __webpack_require__(508);

            const traceHelper_1 = __webpack_require__(553);

            const stateDecoder_1 = __webpack_require__(771);

            const astHelper_1 = __webpack_require__(1004);

            class SolidityProxy {
                constructor({
                                getCurrentCalledAddressAt,
                                getCode
                            }) {
                    this.cache = new Cache();
                    this.reset({});
                    this.getCurrentCalledAddressAt = getCurrentCalledAddressAt;
                    this.getCode = getCode;
                }

                /**
                 * reset the cache and apply a new @arg compilationResult
                 *
                 * @param {Object} compilationResult  - result os a compilatiion (diectly returned by the compiler)
                 */


                reset(compilationResult) {
                    this.sources = compilationResult.sources;
                    this.contracts = compilationResult.contracts;
                    this.cache.reset();
                }

                /**
                 * check if the object has been properly loaded
                 *
                 * @return {Bool} - returns true if a compilation result has been applied
                 */


                loaded() {
                    return this.contracts !== undefined;
                }

                /**
                 * retrieve the compiled contract name at the @arg vmTraceIndex (cached)
                 *
                 * @param {Int} vmTraceIndex  - index in the vm trave where to resolve the executed contract name
                 * @param {Function} cb  - callback returns (error, contractName)
                 */


                contractObjectAt(vmTraceIndex) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const address = this.getCurrentCalledAddressAt(vmTraceIndex);

                        if (this.cache.contractObjectByAddress[address]) {
                            return this.cache.contractObjectByAddress[address];
                        }

                        const code = yield this.getCode(address);
                        const contract = contractObjectFromCode(this.contracts, code.bytecode, address);
                        this.cache.contractObjectByAddress[address] = contract;
                        return contract;
                    });
                }

                /**
                 * extract the state variables of the given compiled @arg contractName (cached)
                 *
                 * @param {String} contractName  - name of the contract to retrieve state variables from
                 * @return {Object} - returns state variables of @args contractName
                 */


                extractStatesDefinitions() {
                    if (!this.cache.contractDeclarations) {
                        this.cache.contractDeclarations = (0, astHelper_1.extractContractDefinitions)(this.sources);
                    }

                    if (!this.cache.statesDefinitions) {
                        this.cache.statesDefinitions = (0, astHelper_1.extractStatesDefinitions)(this.sources, this.cache.contractDeclarations);
                    }

                    return this.cache.statesDefinitions;
                }

                /**
                 * extract the state variables of the given compiled @arg contractName (cached)
                 *
                 * @param {String} contractName  - name of the contract to retrieve state variables from
                 * @return {Object} - returns state variables of @args contractName
                 */


                extractStateVariables(contractName) {
                    if (!this.cache.stateVariablesByContractName[contractName]) {
                        this.cache.stateVariablesByContractName[contractName] = (0, stateDecoder_1.extractStateVariables)(contractName, this.sources);
                    }

                    return this.cache.stateVariablesByContractName[contractName];
                }

                /**
                 * extract the state variables of the given compiled @arg vmtraceIndex (cached)
                 *
                 * @param {Int} vmTraceIndex  - index in the vm trave where to resolve the state variables
                 * @return {Object} - returns state variables of @args vmTraceIndex
                 */


                extractStateVariablesAt(vmtraceIndex) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const contract = yield this.contractObjectAt(vmtraceIndex);
                        return this.extractStateVariables(contract.name);
                    });
                }

                /**
                 * get the AST of the file declare in the @arg sourceLocation
                 *
                 * @param {Object} sourceLocation  - source location containing the 'file' to retrieve the AST from
                 * @return {Object} - AST of the current file
                 */


                ast(sourceLocation, generatedSources) {
                    const file = this.fileNameFromIndex(sourceLocation.file);

                    if (!file && generatedSources && generatedSources.length) {
                        for (const source of generatedSources) {
                            if (source.id === sourceLocation.file) {
                                return source.ast;
                            }
                        }
                    } else if (this.sources[file]) {
                        return this.sources[file].ast;
                    }

                    return null;
                }

                /**
                 * get the filename refering to the index from the compilation result
                 *
                 * @param {Int} index  - index of the filename
                 * @return {String} - filename
                 */


                fileNameFromIndex(index) {
                    return Object.keys(this.contracts)[index];
                }

            }

            exports.SolidityProxy = SolidityProxy;

            function contractObjectFromCode(contracts, code, address) {
                const isCreation = (0, traceHelper_1.isContractCreation)(address);

                for (const file in contracts) {
                    for (const contract in contracts[file]) {
                        const bytecode = isCreation ? contracts[file][contract].evm.bytecode.object : contracts[file][contract].evm.deployedBytecode.object;

                        if (remix_lib_1.util.compareByteCode(code, '0x' + bytecode)) {
                            return {
                                name: contract,
                                contract: contracts[file][contract]
                            };
                        }
                    }
                }

                return null;
            }

            class Cache {
                constructor() {
                    this.reset();
                }

                reset() {
                    this.contractObjectByAddress = {};
                    this.stateVariablesByContractName = {};
                    this.contractDeclarations = null;
                    this.statesDefinitions = null;
                }

            }

            /***/
        }),

        /***/ 1747:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Address = void 0;

            const util_1 = __webpack_require__(544);

            const ValueType_1 = __webpack_require__(621);

            class Address extends ValueType_1.ValueType {
                constructor() {
                    super(1, 20, 'address');
                }

                decodeValue(value) {
                    if (!value) {
                        return '0x0000000000000000000000000000000000000000';
                    }

                    return '0x' + (0, util_1.extractHexByteSlice)(value, this.storageBytes, 0).toUpperCase();
                }

            }

            exports.Address = Address;

            /***/
        }),

        /***/ 1748:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ArrayType = void 0;

            const tslib_1 = __webpack_require__(494);

            const util_1 = __webpack_require__(544);

            const remix_lib_1 = __webpack_require__(508);

            const ethereumjs_util_1 = __webpack_require__(493);

            const RefType_1 = __webpack_require__(678);

            const sha3256 = remix_lib_1.util.sha3_256;

            class ArrayType extends RefType_1.RefType {
                constructor(underlyingType, arraySize, location) {
                    let storageSlots = null;

                    if (arraySize === 'dynamic') {
                        storageSlots = 1;
                    } else {
                        if (underlyingType.storageBytes < 32) {
                            const itemPerSlot = Math.floor(32 / underlyingType.storageBytes);
                            storageSlots = Math.ceil(arraySize / itemPerSlot);
                        } else {
                            storageSlots = arraySize * underlyingType.storageSlots;
                        }
                    }

                    const size = arraySize !== 'dynamic' ? arraySize : '';
                    super(storageSlots, 32, underlyingType.typeName + '[' + size + ']', location);
                    this.underlyingType = underlyingType;
                    this.arraySize = arraySize;
                }

                decodeFromStorage(location, storageResolver) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const ret = [];
                        let size = null;
                        let slotValue;

                        try {
                            slotValue = yield (0, util_1.extractHexValue)(location, storageResolver, this.storageBytes);
                        } catch (e) {
                            console.log(e);
                            return {
                                error: '<decoding failed - ' + e.message + '>',
                                type: this.typeName
                            };
                        }

                        const currentLocation = {
                            offset: 0,
                            slot: location.slot
                        };

                        if (this.arraySize === 'dynamic') {
                            size = (0, util_1.toBN)('0x' + slotValue);
                            currentLocation.slot = sha3256(location.slot);
                        } else {
                            size = new ethereumjs_util_1.BN(this.arraySize);
                        }

                        var k = (0, util_1.toBN)(0);

                        for (; k.lt(size) && k.ltn(300); k.iaddn(1)) {
                            try {
                                ret.push(yield this.underlyingType.decodeFromStorage(currentLocation, storageResolver));
                            } catch (e) {
                                return {
                                    error: '<decoding failed - ' + e.message + '>',
                                    type: this.typeName
                                };
                            }

                            if (this.underlyingType.storageSlots === 1 && location.offset + this.underlyingType.storageBytes <= 32) {
                                currentLocation.offset += this.underlyingType.storageBytes;

                                if (currentLocation.offset + this.underlyingType.storageBytes > 32) {
                                    currentLocation.offset = 0;
                                    currentLocation.slot = '0x' + (0, util_1.add)(currentLocation.slot, 1).toString(16);
                                }
                            } else {
                                currentLocation.slot = '0x' + (0, util_1.add)(currentLocation.slot, this.underlyingType.storageSlots).toString(16);
                                currentLocation.offset = 0;
                            }
                        }

                        return {
                            value: ret,
                            length: '0x' + size.toString(16),
                            type: this.typeName
                        };
                    });
                }

                decodeFromMemoryInternal(offset, memory, skip) {
                    const ret = [];
                    let length = this.arraySize;

                    if (this.arraySize === 'dynamic') {
                        length = memory.substr(2 * offset, 64);
                        length = parseInt(length, 16);
                        offset = offset + 32;
                    }

                    if (isNaN(length)) {
                        return {
                            error: '<decoding failed - length is NaN>',
                            type: 'Error'
                        };
                    }

                    if (!skip) {
                        skip = 0;
                    }
                    if (skip) {
                        offset = offset + 32 * skip;
                    }
                    let limit = length - skip;
                    if (limit > 10) {
                        limit = 10;
                    }

                    for (var k = 0; k < limit; k++) {
                        var contentOffset = offset;
                        ret.push(this.underlyingType.decodeFromMemory(contentOffset, memory));
                        offset += 32;
                    }

                    return {
                        value: ret,
                        length: '0x' + length.toString(16),
                        type: this.typeName,
                        cursor: skip + limit,
                        hasNext: length > skip + limit
                    };
                }

            }

            exports.ArrayType = ArrayType;

            /***/
        }),

        /***/ 1749:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Bool = void 0;

            const ValueType_1 = __webpack_require__(621);

            const util_1 = __webpack_require__(544);

            class Bool extends ValueType_1.ValueType {
                constructor() {
                    super(1, 1, 'bool');
                }

                decodeValue(value) {
                    if (!value) {
                        return false;
                    }

                    value = (0, util_1.extractHexByteSlice)(value, this.storageBytes, 0);
                    return value !== '00';
                }

            }

            exports.Bool = Bool;

            /***/
        }),

        /***/ 1750:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.FixedByteArray = void 0;

            const ValueType_1 = __webpack_require__(621);

            class FixedByteArray extends ValueType_1.ValueType {
                constructor(storageBytes) {
                    super(1, storageBytes, 'bytes' + storageBytes);
                }

                decodeValue(value) {
                    return '0x' + value.substr(0, 2 * this.storageBytes).toUpperCase();
                }

            }

            exports.FixedByteArray = FixedByteArray;

            /***/
        }),

        /***/ 1751:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Enum = void 0;

            const ValueType_1 = __webpack_require__(621);

            class Enum extends ValueType_1.ValueType {
                constructor(enumDef) {
                    let storageBytes = 0;
                    let length = enumDef.members.length;

                    while (length > 1) {
                        length = length / 256;
                        storageBytes++;
                    }

                    super(1, storageBytes, 'enum');
                    this.enumDef = enumDef;
                }

                decodeValue(value) {
                    if (!value) {
                        return this.enumDef.members[0].name;
                    }

                    value = parseInt(value, 16);

                    if (this.enumDef.members.length > value) {
                        return this.enumDef.members[value].name;
                    }

                    return 'INVALID_ENUM<' + value + '>';
                }

            }

            exports.Enum = Enum;

            /***/
        }),

        /***/ 1752:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.StringType = void 0;

            const tslib_1 = __webpack_require__(494);

            const DynamicByteArray_1 = __webpack_require__(1006);

            class StringType extends DynamicByteArray_1.DynamicByteArray {
                constructor(location) {
                    super(location);
                    this.typeName = 'string';
                }

                decodeFromStorage(location, storageResolver) {
                    const _super = Object.create(null, {
                        decodeFromStorage: {
                            get: () => super.decodeFromStorage
                        }
                    });

                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        let decoded = '0x';

                        try {
                            decoded = yield _super.decodeFromStorage.call(this, location, storageResolver);
                        } catch (e) {
                            console.log(e);
                            return {
                                error: '<decoding failed - ' + e.message + '>'
                            };
                        }

                        return format(decoded);
                    });
                }

                decodeFromStack(stackDepth, stack, memory, storageResolver, calldata, cursor, variableDetails) {
                    const _super = Object.create(null, {
                        decodeFromStack: {
                            get: () => super.decodeFromStack
                        }
                    });

                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            return yield _super.decodeFromStack.call(this, stackDepth, stack, memory, storageResolver, calldata, cursor, variableDetails);
                        } catch (e) {
                            console.log(e);
                            return {
                                error: '<decoding failed - ' + e.message + '>'
                            };
                        }
                    });
                }

                decodeFromMemoryInternal(offset, memory) {
                    const decoded = super.decodeFromMemoryInternal(offset, memory);
                    return format(decoded);
                }

            }

            exports.StringType = StringType;

            function format(decoded) {
                if (decoded.error) {
                    return decoded;
                }

                let value = decoded.value;
                value = value.replace('0x', '').replace(/(..)/g, '%$1');
                const ret = {
                    length: decoded.length,
                    raw: decoded.value,
                    type: 'string'
                };

                try {
                    ret['value'] = decodeURIComponent(value);
                } catch (e) {
                    ret['error'] = 'Invalid UTF8 encoding';
                    ret.raw = decoded.value;
                }

                return ret;
            }

            /***/
        }),

        /***/ 1753:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Struct = void 0;

            const tslib_1 = __webpack_require__(494);

            const util_1 = __webpack_require__(544);

            const RefType_1 = __webpack_require__(678);

            const Mapping_1 = __webpack_require__(1007);

            class Struct extends RefType_1.RefType {
                constructor(memberDetails, location, fullType) {
                    super(memberDetails.storageSlots, 32, 'struct ' + fullType, location);
                    this.members = memberDetails.members;
                }

                decodeFromStorage(location, storageResolver) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const ret = {};

                        for (var item of this.members) {
                            const globalLocation = {
                                offset: location.offset + item.storagelocation.offset,
                                slot: (0, util_1.add)(location.slot, item.storagelocation.slot)
                            };

                            try {
                                ret[item.name] = yield item.type.decodeFromStorage(globalLocation, storageResolver);
                            } catch (e) {
                                console.log(e);
                                ret[item.name] = {
                                    error: '<decoding failed - ' + e.message + '>'
                                };
                            }
                        }

                        return {
                            value: ret,
                            type: this.typeName
                        };
                    });
                }

                decodeFromMemoryInternal(offset, memory) {
                    const ret = {};
                    this.members.map((item, i) => {
                        var contentOffset = offset;
                        var member = item.type.decodeFromMemory(contentOffset, memory);
                        ret[item.name] = member;
                        if (!(item.type instanceof Mapping_1.Mapping)) {
                            offset += 32;
                        }
                    });
                    return {
                        value: ret,
                        type: this.typeName
                    };
                }

            }

            exports.Struct = Struct;

            /***/
        }),

        /***/ 1754:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Int = void 0;

            const util_1 = __webpack_require__(544);

            const ValueType_1 = __webpack_require__(621);

            class Int extends ValueType_1.ValueType {
                constructor(storageBytes) {
                    super(1, storageBytes, 'int' + storageBytes * 8);
                }

                decodeValue(value) {
                    value = (0, util_1.extractHexByteSlice)(value, this.storageBytes, 0);
                    return (0, util_1.decodeIntFromHex)(value, this.storageBytes, true);
                }

            }

            exports.Int = Int;

            /***/
        }),

        /***/ 1755:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Uint = void 0;

            const util_1 = __webpack_require__(544);

            const ValueType_1 = __webpack_require__(621);

            class Uint extends ValueType_1.ValueType {
                constructor(storageBytes) {
                    super(1, storageBytes, 'uint' + storageBytes * 8);
                }

                decodeValue(value) {
                    value = (0, util_1.extractHexByteSlice)(value, this.storageBytes, 0);
                    return (0, util_1.decodeIntFromHex)(value, this.storageBytes, false);
                }

            }

            exports.Uint = Uint;

            /***/
        }),

        /***/ 1756:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.InternalCallTree = void 0;

            const tslib_1 = __webpack_require__(494);

            const remix_astwalker_1 = __webpack_require__(600);

            const remix_lib_1 = __webpack_require__(508);

            const sourceLocationTracker_1 = __webpack_require__(1757);

            const eventManager_1 = __webpack_require__(562);

            const decodeInfo_1 = __webpack_require__(1005);

            const traceHelper_1 = __webpack_require__(553);

            const util_1 = __webpack_require__(544);

            /**
             * Tree representing internal jump into function.
             * Triggers `callTreeReady` event when tree is ready
             * Triggers `callTreeBuildFailed` event when tree fails to build
             */


            class InternalCallTree {
                /**
                 * constructor
                 *
                 * @param {Object} debuggerEvent  - event declared by the debugger (EthDebugger)
                 * @param {Object} traceManager  - trace manager
                 * @param {Object} solidityProxy  - solidity proxy
                 * @param {Object} codeManager  - code manager
                 * @param {Object} opts  - { includeLocalVariables, debugWithGeneratedSources }
                 */
                constructor(debuggerEvent, traceManager, solidityProxy, codeManager, opts) {
                    this.includeLocalVariables = opts.includeLocalVariables;
                    this.debugWithGeneratedSources = opts.debugWithGeneratedSources;
                    this.event = new eventManager_1.EventManager();
                    this.solidityProxy = solidityProxy;
                    this.traceManager = traceManager;
                    this.sourceLocationTracker = new sourceLocationTracker_1.SourceLocationTracker(codeManager, {
                        debugWithGeneratedSources: opts.debugWithGeneratedSources
                    });
                    debuggerEvent.register('newTraceLoaded', trace => {
                        this.reset();

                        if (!this.solidityProxy.loaded()) {
                            this.event.trigger('callTreeBuildFailed', ['compilation result not loaded. Cannot build internal call tree']);
                        } else {
                            // each recursive call to buildTree represent a new context (either call, delegatecall, internal function)
                            const calledAddress = traceManager.getCurrentCalledAddressAt(0);
                            const isCreation = (0, traceHelper_1.isContractCreation)(calledAddress);
                            buildTree(this, 0, '', true, isCreation).then(result => {
                                if (result.error) {
                                    this.event.trigger('callTreeBuildFailed', [result.error]);
                                } else {
                                    createReducedTrace(this, traceManager.trace.length - 1);
                                    this.event.trigger('callTreeReady', [this.scopes, this.scopeStarts]);
                                }
                            }, reason => {
                                console.log('analyzing trace falls ' + reason);
                                this.event.trigger('callTreeNotReady', [reason]);
                            });
                        }
                    });
                }

                /**
                 * reset tree
                 *
                 */


                reset() {
                    /*
      scopes: map of scopes defined by range in the vmtrace {firstStep, lastStep, locals}.
      Keys represent the level of deepness (scopeId)
      scopeId : <currentscope_id>.<sub_scope_id>.<sub_sub_scope_id>
    */
                    this.scopes = {};
                    /*
      scopeStart: represent start of a new scope. Keys are index in the vmtrace, values are scopeId
    */

                    this.sourceLocationTracker.clearCache();
                    this.functionCallStack = [];
                    this.functionDefinitionsByScope = {};
                    this.scopeStarts = {};
                    this.variableDeclarationByFile = {};
                    this.functionDefinitionByFile = {};
                    this.astWalker = new remix_astwalker_1.AstWalker();
                    this.reducedTrace = [];
                }

                /**
                 * find the scope given @arg vmTraceIndex
                 *
                 * @param {Int} vmtraceIndex  - index on the vm trace
                 */


                findScope(vmtraceIndex) {
                    let scopeId = this.findScopeId(vmtraceIndex);
                    if (scopeId !== '' && !scopeId) {
                        return null;
                    }
                    let scope = this.scopes[scopeId];

                    while (scope.lastStep && scope.lastStep < vmtraceIndex && scope.firstStep > 0) {
                        scopeId = this.parentScope(scopeId);
                        scope = this.scopes[scopeId];
                    }

                    return scope;
                }

                parentScope(scopeId) {
                    if (scopeId.indexOf('.') === -1) {
                        return '';
                    }
                    return scopeId.replace(/(\.\d+)$/, '');
                }

                findScopeId(vmtraceIndex) {
                    const scopes = Object.keys(this.scopeStarts);
                    if (!scopes.length) {
                        return null;
                    }
                    const scopeStart = remix_lib_1.util.findLowerBoundValue(vmtraceIndex, scopes);
                    return this.scopeStarts[scopeStart];
                }

                retrieveFunctionsStack(vmtraceIndex) {
                    const scope = this.findScope(vmtraceIndex);
                    if (!scope) {
                        return [];
                    }
                    let scopeId = this.scopeStarts[scope.firstStep];
                    const functions = [];
                    if (!scopeId) {
                        return functions;
                    }
                    let i = 0; // eslint-disable-next-line no-constant-condition

                    while (true) {
                        i += 1;
                        if (i > 1000) {
                            throw new Error('retrieFunctionStack: recursion too deep');
                        }
                        const functionDefinition = this.functionDefinitionsByScope[scopeId];

                        if (functionDefinition !== undefined) {
                            functions.push(functionDefinition);
                        }

                        const parent = this.parentScope(scopeId);
                        if (!parent) {
                            break;
                        } else {
                            scopeId = parent;
                        }
                    }

                    return functions;
                }

                extractSourceLocation(step) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            const address = this.traceManager.getCurrentCalledAddressAt(step);
                            const location = yield this.sourceLocationTracker.getSourceLocationFromVMTraceIndex(address, step, this.solidityProxy.contracts);
                            return location;
                        } catch (error) {
                            throw new Error('InternalCallTree - Cannot retrieve sourcelocation for step ' + step + ' ' + error);
                        }
                    });
                }

                extractValidSourceLocation(step) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        try {
                            const address = this.traceManager.getCurrentCalledAddressAt(step);
                            const location = yield this.sourceLocationTracker.getValidSourceLocationFromVMTraceIndex(address, step, this.solidityProxy.contracts);
                            return location;
                        } catch (error) {
                            throw new Error('InternalCallTree - Cannot retrieve valid sourcelocation for step ' + step + ' ' + error);
                        }
                    });
                }

            }

            exports.InternalCallTree = InternalCallTree;

            function buildTree(tree, step, scopeId, isExternalCall, isCreation) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    let subScope = 1;
                    tree.scopeStarts[step] = scopeId;
                    tree.scopes[scopeId] = {
                        firstStep: step,
                        locals: {},
                        isCreation
                    };

                    function callDepthChange(step, trace) {
                        if (step + 1 < trace.length) {
                            return trace[step].depth !== trace[step + 1].depth;
                        }

                        return false;
                    }

                    function includedSource(source, included) {
                        return included.start !== -1 && included.length !== -1 && included.file !== -1 && included.start >= source.start && included.start + included.length <= source.start + source.length && included.file === source.file;
                    }

                    let currentSourceLocation = {
                        start: -1,
                        length: -1,
                        file: -1
                    };
                    let previousSourceLocation = currentSourceLocation;

                    while (step < tree.traceManager.trace.length) {
                        let sourceLocation;
                        let newLocation = false;

                        try {
                            sourceLocation = yield tree.extractSourceLocation(step);

                            if (!includedSource(sourceLocation, currentSourceLocation)) {
                                tree.reducedTrace.push(step);
                                currentSourceLocation = sourceLocation;
                                newLocation = true;
                            }
                        } catch (e) {
                            return {
                                outStep: step,
                                error: 'InternalCallTree - Error resolving source location. ' + step + ' ' + e
                            };
                        }

                        if (!sourceLocation) {
                            return {
                                outStep: step,
                                error: 'InternalCallTree - No source Location. ' + step
                            };
                        }

                        const isCallInstrn = (0, traceHelper_1.isCallInstruction)(tree.traceManager.trace[step]);
                        const isCreateInstrn = (0, traceHelper_1.isCreateInstruction)(tree.traceManager.trace[step]); // we are checking if we are jumping in a new CALL or in an internal function

                        if (isCallInstrn || sourceLocation.jump === 'i') {
                            try {
                                const externalCallResult = yield buildTree(tree, step + 1, scopeId === '' ? subScope.toString() : scopeId + '.' + subScope, isCallInstrn, isCreateInstrn);

                                if (externalCallResult.error) {
                                    return {
                                        outStep: step,
                                        error: 'InternalCallTree - ' + externalCallResult.error
                                    };
                                } else {
                                    step = externalCallResult.outStep;
                                    subScope++;
                                }
                            } catch (e) {
                                return {
                                    outStep: step,
                                    error: 'InternalCallTree - ' + e.message
                                };
                            }
                        } else if (isExternalCall && callDepthChange(step, tree.traceManager.trace) || !isExternalCall && sourceLocation.jump === 'o') {
                            // if not, we might be returning from a CALL or internal function. This is what is checked here.
                            tree.scopes[scopeId].lastStep = step;
                            return {
                                outStep: step + 1
                            };
                        } else {
                            // if not, we are in the current scope.
                            // We check in `includeVariableDeclaration` if there is a new local variable in scope for this specific `step`
                            if (tree.includeLocalVariables) {
                                yield includeVariableDeclaration(tree, step, sourceLocation, scopeId, newLocation, previousSourceLocation);
                            }

                            previousSourceLocation = sourceLocation;
                            step++;
                        }
                    }

                    return {
                        outStep: step
                    };
                });
            } // the reduced trace contain an entry only if that correspond to a new source location


            function createReducedTrace(tree, index) {
                tree.reducedTrace.push(index);
            }

            function getGeneratedSources(tree, scopeId, contractObj) {
                if (tree.debugWithGeneratedSources && contractObj && tree.scopes[scopeId]) {
                    return tree.scopes[scopeId].isCreation ? contractObj.contract.evm.bytecode.generatedSources : contractObj.contract.evm.deployedBytecode.generatedSources;
                }

                return null;
            }

            function includeVariableDeclaration(tree, step, sourceLocation, scopeId, newLocation, previousSourceLocation) {
                return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                    const contractObj = yield tree.solidityProxy.contractObjectAt(step);
                    let states = null;
                    const generatedSources = getGeneratedSources(tree, scopeId, contractObj);
                    const variableDeclarations = resolveVariableDeclaration(tree, sourceLocation, generatedSources); // using the vm trace step, the current source location and the ast,
                    // we check if the current vm trace step target a new ast node of type VariableDeclaration
                    // that way we know that there is a new local variable from here.

                    if (variableDeclarations && variableDeclarations.length) {
                        for (const variableDeclaration of variableDeclarations) {
                            if (variableDeclaration && !tree.scopes[scopeId].locals[variableDeclaration.name]) {
                                try {
                                    const stack = tree.traceManager.getStackAt(step); // the stack length at this point is where the value of the new local variable will be stored.
                                    // so, either this is the direct value, or the offset in memory. That depends on the type.

                                    if (variableDeclaration.name !== '') {
                                        states = tree.solidityProxy.extractStatesDefinitions();
                                        var location = (0, util_1.extractLocationFromAstVariable)(variableDeclaration);
                                        location = location === 'default' ? 'storage' : location; // we push the new local variable in our tree

                                        tree.scopes[scopeId].locals[variableDeclaration.name] = {
                                            name: variableDeclaration.name,
                                            type: (0, decodeInfo_1.parseType)(variableDeclaration.typeDescriptions.typeString, states, contractObj.name, location),
                                            stackDepth: stack.length,
                                            sourceLocation: sourceLocation
                                        };
                                    }
                                } catch (error) {
                                    console.log(error);
                                }
                            }
                        }
                    } // we check here if we are at the beginning inside a new function.
                    // if that is the case, we have to add to locals tree the inputs and output params


                    const functionDefinition = resolveFunctionDefinition(tree, previousSourceLocation, generatedSources);
                    if (!functionDefinition) {
                        return;
                    }
                    const previousIsJumpDest2 = (0, traceHelper_1.isJumpDestInstruction)(tree.traceManager.trace[step - 2]);
                    const previousIsJumpDest1 = (0, traceHelper_1.isJumpDestInstruction)(tree.traceManager.trace[step - 1]);
                    const isConstructor = functionDefinition.kind === 'constructor';

                    if (newLocation && (previousIsJumpDest1 || previousIsJumpDest2 || isConstructor)) {
                        tree.functionCallStack.push(step);
                        const functionDefinitionAndInputs = {
                            functionDefinition,
                            inputs: []
                        }; // means: the previous location was a function definition && JUMPDEST
                        // => we are at the beginning of the function and input/output are setup

                        try {
                            const stack = tree.traceManager.getStackAt(step);
                            states = tree.solidityProxy.extractStatesDefinitions();

                            if (functionDefinition.parameters) {
                                const inputs = functionDefinition.parameters;
                                const outputs = functionDefinition.returnParameters; // for (const element of functionDefinition.parameters) {
                                //   if (element.nodeType === 'ParameterList') {
                                //     if (!inputs) inputs = element
                                //     else {
                                //       outputs = element
                                //       break
                                //     }
                                //   }
                                // }
                                // input params

                                if (inputs && inputs.parameters) {
                                    functionDefinitionAndInputs.inputs = addParams(inputs, tree, scopeId, states, contractObj, previousSourceLocation, stack.length, inputs.parameters.length, -1);
                                } // output params


                                if (outputs) {
                                    addParams(outputs, tree, scopeId, states, contractObj, previousSourceLocation, stack.length, 0, 1);
                                }
                            }
                        } catch (error) {
                            console.log(error);
                        }

                        tree.functionDefinitionsByScope[scopeId] = functionDefinitionAndInputs;
                    }
                });
            } // this extract all the variable declaration for a given ast and file
            // and keep this in a cache


            function resolveVariableDeclaration(tree, sourceLocation, generatedSources) {
                if (!tree.variableDeclarationByFile[sourceLocation.file]) {
                    const ast = tree.solidityProxy.ast(sourceLocation, generatedSources);

                    if (ast) {
                        tree.variableDeclarationByFile[sourceLocation.file] = extractVariableDeclarations(ast, tree.astWalker);
                    } else {
                        return null;
                    }
                }

                return tree.variableDeclarationByFile[sourceLocation.file][sourceLocation.start + ':' + sourceLocation.length + ':' + sourceLocation.file];
            } // this extract all the function definition for a given ast and file
            // and keep this in a cache


            function resolveFunctionDefinition(tree, sourceLocation, generatedSources) {
                if (!tree.functionDefinitionByFile[sourceLocation.file]) {
                    const ast = tree.solidityProxy.ast(sourceLocation, generatedSources);

                    if (ast) {
                        tree.functionDefinitionByFile[sourceLocation.file] = extractFunctionDefinitions(ast, tree.astWalker);
                    } else {
                        return null;
                    }
                }

                return tree.functionDefinitionByFile[sourceLocation.file][sourceLocation.start + ':' + sourceLocation.length + ':' + sourceLocation.file];
            }

            function extractVariableDeclarations(ast, astWalker) {
                const ret = {};
                astWalker.walkFull(ast, node => {
                    if (node.nodeType === 'VariableDeclaration' || node.nodeType === 'YulVariableDeclaration') {
                        ret[node.src] = [node];
                    }

                    const hasChild = node.initialValue && (node.nodeType === 'VariableDeclarationStatement' || node.nodeType === 'YulVariableDeclarationStatement');
                    if (hasChild) {
                        ret[node.initialValue.src] = node.declarations;
                    }
                });
                return ret;
            }

            function extractFunctionDefinitions(ast, astWalker) {
                const ret = {};
                astWalker.walkFull(ast, node => {
                    if (node.nodeType === 'FunctionDefinition' || node.nodeType === 'YulFunctionDefinition') {
                        ret[node.src] = node;
                    }
                });
                return ret;
            }

            function addParams(parameterList, tree, scopeId, states, contractObj, sourceLocation, stackLength, stackPosition, dir) {
                const contractName = contractObj.name;
                const params = [];

                for (const inputParam in parameterList.parameters) {
                    const param = parameterList.parameters[inputParam];
                    const stackDepth = stackLength + dir * stackPosition;

                    if (stackDepth >= 0) {
                        let location = (0, util_1.extractLocationFromAstVariable)(param);
                        location = location === 'default' ? 'memory' : location;
                        const attributesName = param.name === '' ? `$${inputParam}` : param.name;
                        tree.scopes[scopeId].locals[attributesName] = {
                            name: attributesName,
                            type: (0, decodeInfo_1.parseType)(param.typeDescriptions.typeString, states, contractName, location),
                            stackDepth: stackDepth,
                            sourceLocation: sourceLocation,
                            abi: contractObj.contract.abi
                        };
                        params.push(attributesName);
                    }

                    stackPosition += dir;
                }

                return params;
            }

            /***/
        }),

        /***/ 1757:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SourceLocationTracker = void 0;

            const tslib_1 = __webpack_require__(494);

            const eventManager_1 = __webpack_require__(562);

            const traceHelper_1 = __webpack_require__(553);

            const sourceMappingDecoder_1 = __webpack_require__(768);

            const remix_lib_1 = __webpack_require__(508);

            /**
             * Process the source code location for the current executing bytecode
             */


            class SourceLocationTracker {
                constructor(_codeManager, {
                    debugWithGeneratedSources
                }) {
                    this.opts = {
                        debugWithGeneratedSources: debugWithGeneratedSources || false
                    };
                    this.codeManager = _codeManager;
                    this.event = new eventManager_1.EventManager();
                    this.sourceMapByAddress = {};
                }

                /**
                 * Return the source location associated with the given @arg index (instruction index)
                 *
                 * @param {String} address - contract address from which the source location is retrieved
                 * @param {Int} index - index in the instruction list from where the source location is retrieved
                 * @param {Object} contractDetails - AST of compiled contracts
                 */


                getSourceLocationFromInstructionIndex(address, index, contracts) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const sourceMap = yield this.extractSourceMap(this, this.codeManager, address, contracts);
                        return (0, sourceMappingDecoder_1.atIndex)(index, sourceMap['map']);
                    });
                }

                /**
                 * Return the source location associated with the given @arg vmTraceIndex
                 *
                 * @param {String} address - contract address from which the source location is retrieved
                 * @param {Int} vmtraceStepIndex - index of the current code in the vmtrace
                 * @param {Object} contractDetails - AST of compiled contracts
                 */


                getSourceLocationFromVMTraceIndex(address, vmtraceStepIndex, contracts) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const sourceMap = yield this.extractSourceMap(this, this.codeManager, address, contracts);
                        const index = this.codeManager.getInstructionIndex(address, vmtraceStepIndex);
                        return (0, sourceMappingDecoder_1.atIndex)(index, sourceMap['map']);
                    });
                }

                /**
                 * Returns the generated sources from a specific @arg address
                 *
                 * @param {String} address - contract address from which has generated sources
                 * @param {Object} generatedSources - Object containing the sourceid, ast and the source code.
                 */


                getGeneratedSourcesFromAddress(address) {
                    if (!this.opts.debugWithGeneratedSources) {
                        return null;
                    }
                    if (this.sourceMapByAddress[address]) {
                        return this.sourceMapByAddress[address].generatedSources;
                    }
                    return null;
                }

                /**
                 * Returns the total amount of sources from a specific @arg address and @arg contracts
                 *
                 * @param {String} address - contract address from which has generated sources
                 * @param {Object} contracts - AST of compiled contracts
                 */


                getTotalAmountOfSources(address, contracts) {
                    let sourcesLength = Object.keys(contracts).length;
                    const generatedSources = this.getGeneratedSourcesFromAddress(address);
                    if (generatedSources) {
                        sourcesLength = sourcesLength + Object.keys(generatedSources).length;
                    }
                    return sourcesLength;
                }

                /**
                 * Return a valid source location associated with the given @arg vmTraceIndex
                 *
                 * @param {String} address - contract address from which the source location is retrieved
                 * @param {Int} vmtraceStepIndex - index of the current code in the vmtrace
                 * @param {Object} contractDetails - AST of compiled contracts
                 */


                getValidSourceLocationFromVMTraceIndex(address, vmtraceStepIndex, contracts) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const amountOfSources = this.getTotalAmountOfSources(address, contracts);
                        let map = {
                            file: -1
                        };
                        /*
        (map.file === -1) this indicates that it isn't associated with a known source code
        (map.file > amountOfSources - 1) this indicates the current file index exceed the total number of files.
                                                this happens when generated sources should not be considered.
      */

                        while (vmtraceStepIndex >= 0 && (map.file === -1 || map.file > amountOfSources - 1)) {
                            map = yield this.getSourceLocationFromVMTraceIndex(address, vmtraceStepIndex, contracts);
                            vmtraceStepIndex = vmtraceStepIndex - 1;
                        }

                        return map;
                    });
                }

                clearCache() {
                    this.sourceMapByAddress = {};
                }

                getSourceMap(address, code, contracts) {
                    const isCreation = (0, traceHelper_1.isContractCreation)(address);
                    let bytes;

                    for (const file in contracts) {
                        for (const contract in contracts[file]) {
                            const bytecode = contracts[file][contract].evm.bytecode;
                            const deployedBytecode = contracts[file][contract].evm.deployedBytecode;
                            if (!deployedBytecode) {
                                continue;
                            }
                            bytes = isCreation ? bytecode.object : deployedBytecode.object;

                            if (remix_lib_1.util.compareByteCode(code, '0x' + bytes)) {
                                const generatedSources = isCreation ? bytecode.generatedSources : deployedBytecode.generatedSources;
                                const map = isCreation ? bytecode.sourceMap : deployedBytecode.sourceMap;
                                return {
                                    generatedSources,
                                    map
                                };
                            }
                        }
                    }

                    return null;
                }

                extractSourceMap(self, codeManager, address, contracts) {
                    return new Promise((resolve, reject) => {
                        if (self.sourceMapByAddress[address]) {
                            return resolve(self.sourceMapByAddress[address]);
                        }
                        codeManager.getCode(address).then(result => {
                            const sourceMap = this.getSourceMap(address, result.bytecode, contracts);

                            if (sourceMap) {
                                if (!(0, traceHelper_1.isContractCreation)(address)) {
                                    self.sourceMapByAddress[address] = sourceMap;
                                }
                                return resolve(sourceMap);
                            }

                            reject(new Error('no sourcemap associated with the code ' + address));
                        }).catch(reject);
                    });
                }

            }

            exports.SourceLocationTracker = SourceLocationTracker;

            /***/
        }),

        /***/ 1758:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DebuggerStepManager = void 0;

            const remix_lib_1 = __webpack_require__(508);

            const eventManager_1 = __webpack_require__(562);

            class DebuggerStepManager {
                constructor(_debugger, traceManager) {
                    this.event = new eventManager_1.EventManager();
                    this.debugger = _debugger;
                    this.traceManager = traceManager;
                    this.currentStepIndex = 0;
                    this.traceLength = 0;
                    this.codeTraceLength = 0;
                    this.revertionPoint = null;
                    this.listenToEvents();
                }

                listenToEvents() {
                    this.debugger.event.register('newTraceLoaded', this, () => {
                        this.traceManager.getLength((error, newLength) => {
                            if (error) {
                                return console.log(error);
                            }

                            if (this.traceLength !== newLength) {
                                this.event.trigger('traceLengthChanged', [newLength]);
                                this.traceLength = newLength;
                                this.codeTraceLength = this.calculateCodeLength();
                            }

                            this.jumpTo(0);
                        });
                    });
                    this.debugger.callTree.event.register('callTreeReady', () => {
                        if (this.debugger.callTree.functionCallStack.length) {
                            this.jumpTo(this.debugger.callTree.functionCallStack[0]);
                        }
                    });
                    this.event.register('indexChanged', this, index => {
                        if (index < 0) {
                            return;
                        }
                        if (this.currentStepIndex !== index) {
                            return;
                        }
                        this.traceManager.buildCallPath(index).then(callsPath => {
                            this.currentCall = callsPath[callsPath.length - 1];

                            if (this.currentCall.reverted) {
                                const revertedReason = this.currentCall.outofgas ? 'outofgas' : '';
                                this.revertionPoint = this.currentCall.return;
                                return this.event.trigger('revertWarning', [revertedReason]);
                            }

                            for (var k = callsPath.length - 2; k >= 0; k--) {
                                var parent = callsPath[k];
                                if (!parent.reverted) {
                                    continue;
                                }
                                this.revertionPoint = parent.return;
                                this.event.trigger('revertWarning', ['parenthasthrown']);
                            }

                            this.event.trigger('revertWarning', ['']);
                        }).catch(error => {
                            console.log(error);
                            this.event.trigger('revertWarning', ['']);
                        });
                    });
                }

                triggerStepChanged(step) {
                    this.traceManager.getLength((error, length) => {
                        let stepState = 'valid';

                        if (error) {
                            stepState = 'invalid';
                        } else if (step <= 0) {
                            stepState = 'initial';
                        } else if (step >= length - 1) {
                            stepState = 'end';
                        }

                        const jumpOutDisabled = step === this.traceManager.findStepOut(step);
                        this.event.trigger('stepChanged', [step, stepState, jumpOutDisabled]);
                    });
                }

                stepIntoBack(solidityMode) {
                    if (!this.traceManager.isLoaded()) {
                        return;
                    }
                    let step = this.currentStepIndex - 1;
                    this.currentStepIndex = step;

                    if (solidityMode) {
                        step = this.resolveToReducedTrace(step, -1);
                    }

                    if (!this.traceManager.inRange(step)) {
                        return;
                    }

                    this.triggerStepChanged(step);
                }

                stepIntoForward(solidityMode) {
                    if (!this.traceManager.isLoaded()) {
                        return;
                    }
                    let step = this.currentStepIndex + 1;
                    this.currentStepIndex = step;

                    if (solidityMode) {
                        step = this.resolveToReducedTrace(step, 1);
                    }

                    if (!this.traceManager.inRange(step)) {
                        return;
                    }

                    this.triggerStepChanged(step);
                }

                stepOverBack(solidityMode) {
                    if (!this.traceManager.isLoaded()) {
                        return;
                    }
                    let step = this.traceManager.findStepOverBack(this.currentStepIndex);

                    if (solidityMode) {
                        step = this.resolveToReducedTrace(step, -1);
                    }

                    this.currentStepIndex = step;
                    this.triggerStepChanged(step);
                }

                stepOverForward(solidityMode) {
                    if (!this.traceManager.isLoaded()) {
                        return;
                    }
                    if (this.currentStepIndex >= this.traceLength - 1) {
                        return;
                    }
                    let step = this.currentStepIndex + 1;
                    const scope = this.debugger.callTree.findScope(step);

                    if (scope && scope.firstStep === step) {
                        step = scope.lastStep + 1;
                    }

                    if (solidityMode) {
                        step = this.resolveToReducedTrace(step, 1);
                    }

                    this.currentStepIndex = step;
                    this.triggerStepChanged(step);
                }

                jumpOut(solidityMode) {
                    if (!this.traceManager.isLoaded()) {
                        return;
                    }
                    var step = this.traceManager.findStepOut(this.currentStepIndex);

                    if (solidityMode) {
                        step = this.resolveToReducedTrace(step, 0);
                    }

                    this.currentStepIndex = step;
                    this.triggerStepChanged(step);
                }

                jumpTo(step) {
                    if (!this.traceManager.inRange(step)) {
                        return;
                    }
                    this.currentStepIndex = step;
                    this.triggerStepChanged(step);
                }

                jumpToException() {
                    this.jumpTo(this.revertionPoint);
                }

                jumpNextBreakpoint() {
                    this.debugger.breakpointManager.jumpNextBreakpoint(this.currentStepIndex, true);
                }

                jumpPreviousBreakpoint() {
                    this.debugger.breakpointManager.jumpPreviousBreakpoint(this.currentStepIndex, true);
                }

                calculateFirstStep() {
                    const step = this.resolveToReducedTrace(0, 1);
                    return this.resolveToReducedTrace(step, 1);
                }

                calculateCodeStepList() {
                    let step = 0;
                    let steps = [];

                    while (step < this.traceLength) {
                        const _step = this.resolveToReducedTrace(step, 1);

                        if (!_step) {
                            break;
                        }
                        steps.push(_step);
                        step += 1;
                    }

                    steps = steps.filter((item, pos, self) => {
                        return steps.indexOf(item) === pos;
                    });
                    return steps;
                }

                calculateCodeLength() {
                    this.calculateCodeStepList().reverse();
                    return this.calculateCodeStepList().reverse()[1] || this.traceLength;
                }

                nextStep() {
                    return this.resolveToReducedTrace(this.currentStepIndex, 1);
                }

                previousStep() {
                    return this.resolveToReducedTrace(this.currentStepIndex, -1);
                }

                resolveToReducedTrace(value, incr) {
                    if (!this.debugger.callTree.reducedTrace.length) {
                        return value;
                    }

                    var nextSource = remix_lib_1.util.findClosestIndex(value, this.debugger.callTree.reducedTrace);
                    nextSource = nextSource + incr;

                    if (nextSource <= 0) {
                        nextSource = 0;
                    } else if (nextSource > this.debugger.callTree.reducedTrace.length) {
                        nextSource = this.debugger.callTree.reducedTrace.length - 1;
                    }

                    return this.debugger.callTree.reducedTrace[nextSource];
                }

            }

            exports.DebuggerStepManager = DebuggerStepManager;

            /***/
        }),

        /***/ 1759:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VmDebuggerLogic = void 0;

            const tslib_1 = __webpack_require__(494);

            const eventManager_1 = __webpack_require__(562);

            const storageResolver_1 = __webpack_require__(767);

            const storageViewer_1 = __webpack_require__(643);

            const remix_lib_1 = __webpack_require__(508);

            const solidityState_1 = __webpack_require__(1760);

            const solidityLocals_1 = __webpack_require__(1761);

            const {
                ui
            } = remix_lib_1.helpers;

            class VmDebuggerLogic {
                constructor(_debugger, tx, _stepManager, _traceManager, _codeManager, _solidityProxy, _callTree) {
                    this.event = new eventManager_1.EventManager();
                    this.debugger = _debugger;
                    this.stepManager = _stepManager;
                    this._traceManager = _traceManager;
                    this._codeManager = _codeManager;
                    this._solidityProxy = _solidityProxy;
                    this._callTree = _callTree;
                    this.storageResolver = null;
                    this.tx = tx;
                    this.debuggerSolidityState = new solidityState_1.DebuggerSolidityState(tx, _stepManager, _traceManager, _codeManager, _solidityProxy);
                    this.debuggerSolidityLocals = new solidityLocals_1.DebuggerSolidityLocals(tx, _stepManager, _traceManager, _callTree);
                }

                start() {
                    this.listenToEvents();
                    this.listenToCodeManagerEvents();
                    this.listenToTraceManagerEvents();
                    this.listenToFullStorageChanges();
                    this.listenToNewChanges();
                    this.listenToSolidityStateEvents();
                    this.listenToSolidityLocalsEvents();
                }

                listenToEvents() {
                    this.debugger.event.register('traceUnloaded', () => {
                        this.event.trigger('traceUnloaded');
                    });
                    this.debugger.event.register('newTraceLoaded', () => {
                        this.event.trigger('newTraceLoaded');
                    });
                }

                listenToCodeManagerEvents() {
                    this._codeManager.event.register('changed', (code, address, index, nextIndexes, returnInstructionIndexes, outOfGasInstructionIndexes) => {
                        this.event.trigger('codeManagerChanged', [code, address, index, nextIndexes, returnInstructionIndexes, outOfGasInstructionIndexes]);
                    });
                }

                listenToTraceManagerEvents() {
                    this.event.register('indexChanged', this, index => {
                        if (index < 0) {
                            return;
                        }
                        if (this.stepManager.currentStepIndex !== index) {
                            return;
                        }
                        this.event.trigger('indexUpdate', [index]);
                        this.event.trigger('functionsStackUpdate', [this._callTree.retrieveFunctionsStack(index)]);

                        try {
                            const calldata = this._traceManager.getCallDataAt(index);

                            if (this.stepManager.currentStepIndex === index) {
                                this.event.trigger('traceManagerCallDataUpdate', [calldata]);
                            }
                        } catch (error) {
                            this.event.trigger('traceManagerCallDataUpdate', [{}]);
                        }

                        try {
                            const memory = this._traceManager.getMemoryAt(index);

                            if (this.stepManager.currentStepIndex === index) {
                                this.event.trigger('traceManagerMemoryUpdate', [ui.formatMemory(memory, 16)]);
                            }
                        } catch (error) {
                            this.event.trigger('traceManagerMemoryUpdate', [{}]);
                        }

                        try {
                            const callstack = this._traceManager.getCallStackAt(index);

                            if (this.stepManager.currentStepIndex === index) {
                                this.event.trigger('traceManagerCallStackUpdate', [callstack]);
                            }
                        } catch (error) {
                            this.event.trigger('traceManagerCallStackUpdate', [{}]);
                        }

                        try {
                            const callstack = this._traceManager.getStackAt(index);

                            if (this.stepManager.currentStepIndex === index) {
                                this.event.trigger('traceManagerStackUpdate', [callstack]);
                            }
                        } catch (error) {
                            this.event.trigger('traceManagerStackUpdate', [{}]);
                        }

                        try {
                            const address = this._traceManager.getCurrentCalledAddressAt(index);

                            if (!this.storageResolver) {
                                return;
                            }
                            var storageViewer = new storageViewer_1.StorageViewer({
                                stepIndex: this.stepManager.currentStepIndex,
                                tx: this.tx,
                                address: address
                            }, this.storageResolver, this._traceManager);
                            storageViewer.storageRange().then(storage => {
                                if (this.stepManager.currentStepIndex === index) {
                                    var header = storageViewer.isComplete(address) ? '[Completely Loaded]' : '[Partially Loaded]';
                                    this.event.trigger('traceManagerStorageUpdate', [storage, header]);
                                }
                            }).catch(_error => {
                                this.event.trigger('traceManagerStorageUpdate', [{}]);
                            });
                        } catch (error) {
                            this.event.trigger('traceManagerStorageUpdate', [{}]);
                        }

                        try {
                            const step = this._traceManager.getCurrentStep(index);

                            this.event.trigger('traceCurrentStepUpdate', [null, step]);
                        } catch (error) {
                            this.event.trigger('traceCurrentStepUpdate', [error]);
                        }

                        try {
                            const addmem = this._traceManager.getMemExpand(index);

                            this.event.trigger('traceMemExpandUpdate', [null, addmem]);
                        } catch (error) {
                            this.event.trigger('traceMemExpandUpdate', [error]);
                        }

                        try {
                            const gas = this._traceManager.getStepCost(index);

                            this.event.trigger('traceStepCostUpdate', [null, gas]);
                        } catch (error) {
                            this.event.trigger('traceStepCostUpdate', [error]);
                        }

                        try {
                            const address = this._traceManager.getCurrentCalledAddressAt(index);

                            this.event.trigger('traceCurrentCalledAddressAtUpdate', [null, address]);
                        } catch (error) {
                            this.event.trigger('traceCurrentCalledAddressAtUpdate', [error]);
                        }

                        try {
                            const remaining = this._traceManager.getRemainingGas(index);

                            this.event.trigger('traceRemainingGasUpdate', [null, remaining]);
                        } catch (error) {
                            this.event.trigger('traceRemainingGasUpdate', [error]);
                        }

                        try {
                            const returnValue = this._traceManager.getReturnValue(index);

                            if (this.stepManager.currentStepIndex === index) {
                                this.event.trigger('traceReturnValueUpdate', [[returnValue]]);
                            }
                        } catch (error) {
                            this.event.trigger('traceReturnValueUpdate', [[error]]);
                        }
                    });
                }

                listenToFullStorageChanges() {
                    this.address = [];
                    this.traceLength = 0;
                    this.debugger.event.register('newTraceLoaded', length => {
                        const addresses = this._traceManager.getAddresses();

                        this.event.trigger('traceAddressesUpdate', [addresses]);
                        this.addresses = addresses;

                        this._traceManager.getLength((error, length) => {
                            if (error) {
                                return;
                            }
                            this.event.trigger('traceLengthUpdate', [length]);
                            this.traceLength = length;
                        });
                    });
                    this.debugger.event.register('indexChanged', this, index => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (index < 0) {
                            return;
                        }
                        if (this.stepManager.currentStepIndex !== index) {
                            return;
                        }
                        if (!this.storageResolver) {
                            return;
                        } // Clean up storage update

                        if (index === this.traceLength - 1) {
                            return this.event.trigger('traceStorageUpdate', [{}]);
                        }

                        var storageJSON = {};

                        for (var k in this.addresses) {
                            var address = this.addresses[k];
                            var storageViewer = new storageViewer_1.StorageViewer({
                                stepIndex: this.stepManager.currentStepIndex,
                                tx: this.tx,
                                address: address
                            }, this.storageResolver, this._traceManager);

                            try {
                                storageJSON[address] = yield storageViewer.storageRange();
                            } catch (e) {
                                console.error(e);
                            }
                        }

                        this.event.trigger('traceStorageUpdate', [storageJSON]);
                    }));
                }

                listenToNewChanges() {
                    this.debugger.event.register('newTraceLoaded', this, () => {
                        this.storageResolver = new storageResolver_1.StorageResolver({
                            web3: this.debugger.web3
                        });
                        this.debuggerSolidityState.storageResolver = this.storageResolver;
                        this.debuggerSolidityLocals.storageResolver = this.storageResolver;
                        this.event.trigger('newTrace', []);
                    });
                    this.debugger.callTree.event.register('callTreeReady', () => {
                        if (this.debugger.callTree.reducedTrace.length) {
                            return this.event.trigger('newCallTree', []);
                        }
                    });
                }

                listenToSolidityStateEvents() {
                    this.event.register('indexChanged', this.debuggerSolidityState.init.bind(this.debuggerSolidityState));
                    this.debuggerSolidityState.event.register('solidityState', state => {
                        this.event.trigger('solidityState', [state]);
                    });
                    this.debuggerSolidityState.event.register('solidityStateMessage', message => {
                        this.event.trigger('solidityStateMessage', [message]);
                    });
                    this.debuggerSolidityState.event.register('solidityStateUpdating', () => {
                        this.event.trigger('solidityStateUpdating', []);
                    });
                    this.event.register('traceUnloaded', this.debuggerSolidityState.reset.bind(this.debuggerSolidityState));
                    this.event.register('newTraceLoaded', this.debuggerSolidityState.reset.bind(this.debuggerSolidityState));
                }

                listenToSolidityLocalsEvents() {
                    this.event.register('sourceLocationChanged', this.debuggerSolidityLocals.init.bind(this.debuggerSolidityLocals));
                    this.event.register('solidityLocalsLoadMore', this.debuggerSolidityLocals.decodeMore.bind(this.debuggerSolidityLocals));
                    this.debuggerSolidityLocals.event.register('solidityLocalsLoadMoreCompleted', locals => {
                        this.event.trigger('solidityLocalsLoadMoreCompleted', [locals]);
                    });
                    this.debuggerSolidityLocals.event.register('solidityLocals', state => {
                        this.event.trigger('solidityLocals', [state]);
                    });
                    this.debuggerSolidityLocals.event.register('solidityLocalsMessage', message => {
                        this.event.trigger('solidityLocalsMessage', [message]);
                    });
                    this.debuggerSolidityLocals.event.register('solidityLocalsUpdating', () => {
                        this.event.trigger('solidityLocalsUpdating', []);
                    });
                    this.debuggerSolidityLocals.event.register('traceReturnValueUpdate', (data, header) => {
                        this.event.trigger('traceReturnValueUpdate', [data, header]);
                    });
                }

            }

            exports.VmDebuggerLogic = VmDebuggerLogic;

            /***/
        }),

        /***/ 1760:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DebuggerSolidityState = void 0;

            const eventManager_1 = __webpack_require__(562);

            const stateDecoder_1 = __webpack_require__(771);

            const storageViewer_1 = __webpack_require__(643);

            class DebuggerSolidityState {
                constructor(tx, _stepManager, _traceManager, _codeManager, _solidityProxy) {
                    this.event = new eventManager_1.EventManager();
                    this.storageResolver = null;
                    this.stepManager = _stepManager;
                    this.traceManager = _traceManager;
                    this.codeManager = _codeManager;
                    this.solidityProxy = _solidityProxy;
                    this.stateVariablesByAddresses = {};
                    this.tx = tx;
                }

                init(index) {
                    let decodeTimeout = null;

                    if (index < 0) {
                        return this.event.trigger('solidityStateMessage', ['invalid step index']);
                    }

                    if (this.stepManager.currentStepIndex !== index) {
                        return;
                    }

                    if (!this.solidityProxy.loaded()) {
                        return this.event.trigger('solidityStateMessage', ['invalid step index']);
                    }

                    if (!this.storageResolver) {
                        return;
                    }

                    if (decodeTimeout) {
                        window.clearTimeout(decodeTimeout);
                    }

                    this.event.trigger('solidityStateUpdating');
                    decodeTimeout = setTimeout(() => {
                        // necessary due to some states that can crash the debugger
                        try {
                            this.decode(index);
                        } catch (err) {
                            console.dir('====> error');
                            console.dir(err);
                        }
                    }, 500);
                }

                reset() {
                    this.stateVariablesByAddresses = {};
                }

                decode(index) {
                    try {
                        const address = this.traceManager.getCurrentCalledAddressAt(this.stepManager.currentStepIndex);

                        if (this.stateVariablesByAddresses[address]) {
                            return this.extractStateVariables(this.stateVariablesByAddresses[address], address);
                        }

                        this.solidityProxy.extractStateVariablesAt(index).then(stateVars => {
                            this.stateVariablesByAddresses[address] = stateVars;
                            this.extractStateVariables(stateVars, address);
                        }).catch(_error => {
                            this.event.trigger('solidityState', [{}]);
                        });
                    } catch (error) {
                        return this.event.trigger('solidityState', [{}]);
                    }
                }

                extractStateVariables(stateVars, address) {
                    const storageViewer = new storageViewer_1.StorageViewer({
                        stepIndex: this.stepManager.currentStepIndex,
                        tx: this.tx,
                        address: address
                    }, this.storageResolver, this.traceManager);
                    (0, stateDecoder_1.decodeState)(stateVars, storageViewer).then(result => {
                        this.event.trigger('solidityStateMessage', ['']);

                        if (result['error']) {
                            return this.event.trigger('solidityStateMessage', [result['error']]);
                        }

                        this.event.trigger('solidityState', [result]);
                    });
                }

            }

            exports.DebuggerSolidityState = DebuggerSolidityState;

            /***/
        }),

        /***/ 1761:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DebuggerSolidityLocals = void 0;

            const eventManager_1 = __webpack_require__(562);

            const localDecoder_1 = __webpack_require__(1008);

            const storageViewer_1 = __webpack_require__(643);

            class DebuggerSolidityLocals {
                constructor(tx, _stepManager, _traceManager, _internalTreeCall) {
                    this.event = new eventManager_1.EventManager();
                    this.stepManager = _stepManager;
                    this.internalTreeCall = _internalTreeCall;
                    this.storageResolver = null;
                    this.traceManager = _traceManager;
                    this.tx = tx;
                }

                init(sourceLocation) {
                    this._sourceLocation = sourceLocation;
                    var decodeTimeout = null;

                    if (!this.storageResolver) {
                        return this.event.trigger('solidityLocalsMessage', ['storage not ready']);
                    }

                    if (decodeTimeout) {
                        window.clearTimeout(decodeTimeout);
                    }

                    this.event.trigger('solidityLocalsUpdating');
                    decodeTimeout = setTimeout(() => {
                        this.decode(sourceLocation);
                    }, 500);
                }

                decode(sourceLocation, cursor) {
                    const self = this;
                    this.event.trigger('solidityLocalsMessage', ['']);
                    this.traceManager.waterfall([
                        function getStackAt(stepIndex, callback) {
                            try {
                                const result = self.traceManager.getStackAt(stepIndex);
                                callback(null, result);
                            } catch (error) {
                                callback(error);
                            }
                        }, function getMemoryAt(stepIndex, callback) {
                            try {
                                const result = self.traceManager.getMemoryAt(stepIndex);
                                callback(null, result);
                            } catch (error) {
                                callback(error);
                            }
                        }, function getCurrentCalledAddressAt(stepIndex, next) {
                            try {
                                const address = self.traceManager.getCurrentCalledAddressAt(stepIndex);
                                next(null, address);
                            } catch (error) {
                                next(error);
                            }
                        }, function getCallDataAt(stepIndex, next) {
                            try {
                                const calldata = self.traceManager.getCallDataAt(stepIndex);
                                next(null, calldata);
                            } catch (error) {
                                next(error);
                            }
                        }
                    ], this.stepManager.currentStepIndex, (error, result) => {
                        if (error) {
                            return error;
                        }

                        var stack = result[0].value;
                        var memory = result[1].value;
                        var calldata = result[3].value;

                        try {
                            var storageViewer = new storageViewer_1.StorageViewer({
                                stepIndex: this.stepManager.currentStepIndex,
                                tx: this.tx,
                                address: result[2].value
                            }, this.storageResolver, this.traceManager);
                            (0, localDecoder_1.solidityLocals)(this.stepManager.currentStepIndex, this.internalTreeCall, stack, memory, storageViewer, calldata, sourceLocation, cursor).then(locals => {
                                if (!cursor) {
                                    if (!locals['error']) {
                                        this.event.trigger('solidityLocals', [locals]);
                                    }

                                    if (!Object.keys(locals).length) {
                                        this.event.trigger('solidityLocalsMessage', ['no locals']);
                                    }
                                } else {
                                    if (!locals['error']) {
                                        this.event.trigger('solidityLocalsLoadMoreCompleted', [locals]);
                                    }
                                }
                            });
                        } catch (e) {
                            this.event.trigger('solidityLocalsMessage', [e.message]);
                        }
                    });
                }

                decodeMore(cursor) {
                    let decodeTimeout = null;
                    if (!this.storageResolver) {
                        return this.event.trigger('solidityLocalsMessage', ['storage not ready']);
                    }
                    if (decodeTimeout) {
                        window.clearTimeout(decodeTimeout);
                    }
                    decodeTimeout = setTimeout(() => {
                        this.decode(this._sourceLocation, cursor);
                    }, 500);
                }

            }

            exports.DebuggerSolidityLocals = DebuggerSolidityLocals;

            /***/
        }),

        /***/ 1762:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CmdLine = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            const debugger_js_1 = __webpack_require__(1009);

            const events_1 = __webpack_require__(510);

            class CmdLine {
                constructor() {
                    this.events = new events_1.EventEmitter();
                    this.lineColumnPos = null;
                    this.rawLocation = null;
                }

                connect(providerType, url) {
                    if (providerType !== 'http') {
                        throw new Error('unsupported provider type');
                    }
                    this.web3 = new web3_1.default(new web3_1.default.providers.HttpProvider(url));
                }

                loadCompilationData(inputJson, outputJson) {
                    const data = {};
                    data['data'] = outputJson;
                    data['source'] = {
                        sources: inputJson.sources
                    };
                    this.loadCompilationResult(data);
                }

                loadCompilationResult(compilationResult) {
                    this.compilation = {};
                    this.compilation.compilationResult = compilationResult;
                }

                initDebugger(cb) {
                    this.debugger = new debugger_js_1.Debugger({
                        web3: this.web3,
                        compilationResult: () => {
                            return this.compilation.compilationResult;
                        }
                    });
                }

                getSource() {
                    const lineColumnPos = this.lineColumnPos;
                    if (!lineColumnPos || !lineColumnPos.start) {
                        return [];
                    }
                    const content = this.compilation.compilationResult.source.sources[this.filename].content.split('\n');
                    const source = [];
                    let line;
                    line = content[lineColumnPos.start.line - 2];

                    if (line !== undefined) {
                        source.push('    ' + (lineColumnPos.start.line - 1) + ':  ' + line);
                    }

                    line = content[lineColumnPos.start.line - 1];

                    if (line !== undefined) {
                        source.push('    ' + lineColumnPos.start.line + ':  ' + line);
                    }

                    const currentLineNumber = lineColumnPos.start.line;
                    const currentLine = content[currentLineNumber];
                    source.push('=>  ' + (currentLineNumber + 1) + ':  ' + currentLine);
                    const startLine = lineColumnPos.start.line;

                    for (var i = 1; i < 4; i++) {
                        const line = content[startLine + i];
                        source.push('    ' + (startLine + i + 1) + ':  ' + line);
                    }

                    return source;
                }

                getCurrentLine() {
                    const lineColumnPos = this.lineColumnPos;
                    if (!lineColumnPos) {
                        return '';
                    }
                    const currentLineNumber = lineColumnPos.start.line;
                    const content = this.compilation.compilationResult.source.sources[this.filename].content.split('\n');
                    return content[currentLineNumber];
                }

                startDebug(txNumber, filename, cb) {
                    this.filename = filename;
                    this.txHash = txNumber;
                    this.debugger.debug(null, txNumber, null, () => {
                        this.debugger.event.register('newSourceLocation', (lineColumnPos, rawLocation) => {
                            if (!lineColumnPos) {
                                return;
                            }
                            this.lineColumnPos = lineColumnPos;
                            this.rawLocation = rawLocation;
                            this.events.emit('source', [lineColumnPos, rawLocation]);
                        });
                        this.debugger.vmDebuggerLogic.event.register('solidityState', data => {
                            this.solidityState = data;
                            this.events.emit('globals', data);
                        }); // TODO: this doesnt work too well, it should request the data instead...

                        this.debugger.vmDebuggerLogic.event.register('solidityLocals', data => {
                            if (JSON.stringify(data) === '{}') {
                                return;
                            }
                            this.solidityLocals = data;
                            this.events.emit('locals', data);
                        });

                        if (cb) {
                            // TODO: this should be an onReady event
                            setTimeout(cb, 1000);
                        }
                    });
                }

                getVars() {
                    return {
                        locals: this.solidityLocals,
                        contract: this.solidityState
                    };
                }

                triggerSourceUpdate() {
                    this.events.emit('source', [this.lineColumnPos, this.rawLocation]);
                }

                stepJumpNextBreakpoint() {
                    this.debugger.step_manager.jumpNextBreakpoint();
                }

                stepJumpPreviousBreakpoint() {
                    this.debugger.step_manager.jumpPreviousBreakpoint();
                }

                stepOverForward(solidityMode) {
                    this.debugger.step_manager.stepOverForward(solidityMode);
                }

                stepOverBack(solidityMode) {
                    this.debugger.step_manager.stepOverBack(solidityMode);
                }

                stepIntoForward(solidityMode) {
                    this.debugger.step_manager.stepIntoForward(solidityMode);
                }

                stepIntoBack(solidityMode) {
                    this.debugger.step_manager.stepIntoBack(solidityMode);
                }

                jumpTo(step) {
                    this.debugger.step_manager.jumpTo(step);
                }

                getTraceLength() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.traceLength;
                }

                getCodeFirstStep() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.calculateFirstStep();
                }

                getCodeTraceLength() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.calculateCodeLength();
                }

                nextStep() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.nextStep();
                }

                previousStep() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.previousStep();
                }

                currentStep() {
                    if (!this.debugger.step_manager) {
                        return 0;
                    }
                    return this.debugger.step_manager.currentStepIndex;
                }

                canGoNext() {
                    return this.currentStep() < this.getCodeTraceLength();
                }

                canGoPrevious() {
                    return this.currentStep() > this.getCodeFirstStep();
                }

                unload() {
                    return this.debugger.unload();
                }

                displayLocals() {
                    console.dir('= displayLocals');
                    console.dir(this.solidityLocals);
                }

                displayGlobals() {
                    console.dir('= displayGlobals');
                    console.dir(this.solidityState);
                }

            }

            exports.CmdLine = CmdLine;

            /***/
        }),

        /***/ 1763:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompilerMetadata = void 0;

            var _engine = __webpack_require__(509);

            var _remixSolidity = __webpack_require__(556);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const profile = {
                name: 'compilerMetadata',
                methods: ['deployMetadataOf'],
                events: [],
                version: '0.0.1'
            };

            class CompilerMetadata extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "networks", void 0);

                    _defineProperty(this, "innerPath", void 0);

                    this.networks = ['VM:-', 'main:1', 'ropsten:3', 'rinkeby:4', 'kovan:42', 'görli:5', 'Custom'];
                    this.innerPath = 'artifacts';
                }

                _JSONFileName(path, contractName) {
                    return this.joinPath(path, this.innerPath, contractName + '.json');
                }

                _MetadataFileName(path, contractName) {
                    return this.joinPath(path, this.innerPath, contractName + '_metadata.json');
                }

                onActivation() {
                    var self = this;
                    this.on('solidity', 'compilationFinished', async (file, source, languageVersion, data) => {
                        if (!(await this.call('settings', 'get', 'settings/generate-contract-metadata'))) {
                            return;
                        }
                        const compiler = new _remixSolidity.CompilerAbstract(languageVersion, data, source);

                        var path = self._extractPathOf(source.target);

                        compiler.visitContracts(contract => {
                            if (contract.file !== source.target) {
                                return;
                            }

                            (async () => {
                                const fileName = self._JSONFileName(path, contract.name);

                                const content = (await this.call('fileManager', 'exists', fileName)) ? await this.call('fileManager', 'readFile', fileName) : null;
                                await this._setArtefacts(content, contract, path);
                            })();
                        });
                    });
                }

                _extractPathOf(file) {
                    var reg = /(.*)(\/).*/;
                    var path = reg.exec(file);
                    return path ? path[1] : '/';
                }

                async _setArtefacts(content, contract, path) {
                    content = content || '{}';
                    var metadata;

                    try {
                        metadata = JSON.parse(content);
                    } catch (e) {
                        console.log(e);
                    }

                    var fileName = this._JSONFileName(path, contract.name);

                    var metadataFileName = this._MetadataFileName(path, contract.name);

                    var deploy = metadata.deploy || {};
                    this.networks.forEach(network => {
                        deploy[network] = this._syncContext(contract, deploy[network] || {});
                    });
                    let parsedMetadata;

                    try {
                        parsedMetadata = JSON.parse(contract.object.metadata);
                    } catch (e) {
                        console.log(e);
                    }

                    if (parsedMetadata) {
                        await this.call('fileManager', 'writeFile', metadataFileName, JSON.stringify(parsedMetadata, null, '\t'));
                    }
                    var data = {
                        deploy,
                        data: {
                            bytecode: contract.object.evm.bytecode,
                            deployedBytecode: contract.object.evm.deployedBytecode,
                            gasEstimates: contract.object.evm.gasEstimates,
                            methodIdentifiers: contract.object.evm.methodIdentifiers
                        },
                        abi: contract.object.abi
                    };
                    await this.call('fileManager', 'writeFile', fileName, JSON.stringify(data, null, '\t'));
                }

                _syncContext(contract, metadata) {
                    var linkReferences = metadata.linkReferences;
                    var autoDeployLib = metadata.autoDeployLib;
                    if (!linkReferences) {
                        linkReferences = {};
                    }
                    if (autoDeployLib === undefined) {
                        autoDeployLib = true;
                    }

                    for (var libFile in contract.object.evm.bytecode.linkReferences) {
                        if (!linkReferences[libFile]) {
                            linkReferences[libFile] = {};
                        }

                        for (var lib in contract.object.evm.bytecode.linkReferences[libFile]) {
                            if (!linkReferences[libFile][lib]) {
                                linkReferences[libFile][lib] = '<address>';
                            }
                        }
                    }

                    metadata.linkReferences = linkReferences;
                    metadata.autoDeployLib = autoDeployLib;
                    return metadata;
                }

                async deployMetadataOf(contractName, fileLocation) {
                    let path;

                    if (fileLocation) {
                        path = fileLocation.split('/');
                        path.pop();
                        path = path.join('/');
                    } else {
                        try {
                            path = this._extractPathOf(await this.call('fileManager', 'getCurrentFile'));
                        } catch (err) {
                            console.log(err);
                            throw new Error(err);
                        }
                    }

                    try {
                        const {
                            id,
                            name
                        } = await this.call('network', 'detectNetwork');

                        const fileName = this._JSONFileName(path, contractName);

                        try {
                            const content = await this.call('fileManager', 'readFile', fileName);
                            if (!content) {
                                return null;
                            }
                            let metadata = JSON.parse(content);
                            metadata = metadata.deploy || {};
                            return metadata[name + ':' + id] || metadata[name] || metadata[id] || metadata[name.toLowerCase() + ':' + id] || metadata[name.toLowerCase()];
                        } catch (err) {
                            return null;
                        }
                    } catch (err) {
                        console.log(err);
                        throw new Error(err);
                    }
                }

                joinPath(...paths) {
                    paths = paths.filter(value => value !== '').map(path => path.replace(/^\/|\/$/g, '')); // remove first and last slash)

                    if (paths.length === 1) {
                        return paths[0];
                    }
                    return paths.join('/');
                }

            }

            exports.CompilerMetadata = CompilerMetadata;

            /***/
        }),

        /***/ 1764:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.FetchAndCompile = void 0;

            var _engine = __webpack_require__(509);

            var _remixSolidity = __webpack_require__(556);

            var _remixLib = __webpack_require__(508);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const ethutil = __webpack_require__(493);

            const profile = {
                name: 'fetchAndCompile',
                methods: ['resolve'],
                version: '0.0.1'
            };

            class FetchAndCompile extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "unresolvedAddresses", void 0);

                    _defineProperty(this, "sourceVerifierNetWork", void 0);

                    this.unresolvedAddresses = [];
                    this.sourceVerifierNetWork = ['Main', 'Rinkeby', 'Ropsten', 'Goerli'];
                }

                /**
                 * Fetch compiliation metadata from source-Verify from a given @arg contractAddress - https://github.com/ethereum/source-verify
                 * Put the artifacts in the file explorer
                 * Compile the code using Solidity compiler
                 * Returns compilation data
                 *
                 * @param {string} contractAddress - Address of the contrac to resolve
                 * @param {string} deployedBytecode - deployedBytecode of the contract
                 * @param {string} targetPath - Folder where to save the compilation arfefacts
                 * @return {CompilerAbstract} - compilation data targeting the given @arg contractAddress
                 */


                async resolve(contractAddress, codeAtAddress, targetPath) {
                    contractAddress = ethutil.toChecksumAddress(contractAddress);

                    const localCompilation = async () => (await this.call('compilerArtefacts', 'get', contractAddress)) ? await this.call('compilerArtefacts', 'get', contractAddress) : (await this.call('compilerArtefacts', 'get', '__last')) ? await this.call('compilerArtefacts', 'get', '__last') : null;

                    const resolved = await this.call('compilerArtefacts', 'get', contractAddress);
                    if (resolved) {
                        return resolved;
                    }
                    if (this.unresolvedAddresses.includes(contractAddress)) {
                        return localCompilation();
                    } // sometimes when doing an internal call, the only available artifact is the Solidity interface.
                    // resolving addresses of internal call would allow to step over the source code, even if the declaration was made using an Interface.

                    let network;

                    try {
                        network = await this.call('network', 'detectNetwork');
                    } catch (e) {
                        return localCompilation();
                    }

                    if (!network) {
                        return localCompilation();
                    }
                    if (!this.sourceVerifierNetWork.includes(network.name)) {
                        return localCompilation();
                    } // check if the contract if part of the local compilation result

                    const compilation = await localCompilation();

                    if (compilation) {
                        let found = false;
                        compilation.visitContracts(contract => {
                            found = _remixLib.util.compareByteCode('0x' + contract.object.evm.deployedBytecode.object, codeAtAddress);
                            return found;
                        });

                        if (found) {
                            await this.call('compilerArtefacts', 'addResolvedContract', contractAddress, compilation);
                            setTimeout(_ => this.emit('usingLocalCompilation', contractAddress), 0);
                            return compilation;
                        }
                    }

                    let data;

                    try {
                        data = await this.call('sourcify', 'fetchByNetwork', contractAddress, network.id);
                    } catch (e) {
                        setTimeout(_ => this.emit('notFound', contractAddress), 0); // plugin framework returns a time out error although it actually didn't find the source...

                        this.unresolvedAddresses.push(contractAddress);
                        return localCompilation();
                    }

                    if (!data || !data.metadata) {
                        setTimeout(_ => this.emit('notFound', contractAddress), 0);
                        this.unresolvedAddresses.push(contractAddress);
                        return localCompilation();
                    } // set the solidity contract code using metadata


                    await this.call('fileManager', 'setFile', `${targetPath}/${network.id}/${contractAddress}/metadata.json`, JSON.stringify(data.metadata, null, '\t'));
                    const compilationTargets = {};

                    for (let file in data.metadata.sources) {
                        const urls = data.metadata.sources[file].urls;

                        for (const url of urls) {
                            if (url.includes('ipfs')) {
                                const stdUrl = `ipfs://${url.split('/')[2]}`;
                                const source = await this.call('contentImport', 'resolve', stdUrl);

                                if (await this.call('contentImport', 'isExternalUrl', file)) {// nothing to do, the compiler callback will handle those
                                } else {
                                    file = file.replace('browser/', ''); // should be fixed in the remix IDE end.

                                    const path = `${targetPath}/${network.id}/${contractAddress}/${file}`;
                                    await this.call('fileManager', 'setFile', path, source.content);
                                    compilationTargets[path] = {
                                        content: source.content
                                    };
                                }

                                break;
                            }
                        }
                    } // compile


                    const settings = {
                        version: data.metadata.compiler.version,
                        language: data.metadata.language,
                        evmVersion: data.metadata.settings.evmVersion,
                        optimize: data.metadata.settings.optimizer.enabled,
                        runs: data.metadata.settings.runs
                    };

                    try {
                        setTimeout(_ => this.emit('compiling', settings), 0);
                        const compData = await (0, _remixSolidity.compile)(compilationTargets, settings, async (url, cb) => await this.call('contentImport', 'resolveAndSave', url).then(result => cb(null, result)).catch(error => cb(error.message)));
                        await this.call('compilerArtefacts', 'addResolvedContract', contractAddress, compData);
                        return compData;
                    } catch (e) {
                        this.unresolvedAddresses.push(contractAddress);
                        setTimeout(_ => this.emit('compilationFailed'), 0);
                        return localCompilation();
                    }
                }

            }

            exports.FetchAndCompile = FetchAndCompile;

            /***/
        }),

        /***/ 1765:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompilerImports = void 0;

            var _engine = __webpack_require__(509);

            var _remixUrlResolver = __webpack_require__(1766);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const profile = {
                name: 'contentImport',
                displayName: 'content import',
                version: '0.0.1',
                methods: ['resolve', 'resolveAndSave', 'isExternalUrl']
            };

            class CompilerImports extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "previouslyHandled", void 0);

                    _defineProperty(this, "urlResolver", void 0);

                    this.urlResolver = new _remixUrlResolver.RemixURLResolver();
                    this.previouslyHandled = {}; // cache import so we don't make the request at each compilation.
                }

                async setToken() {
                    try {
                        const protocol = typeof window !== 'undefined' && window.location.protocol;
                        const token = await this.call('settings', 'get', 'settings/gist-access-token');
                        this.urlResolver.setGistToken(token, protocol);
                    } catch (error) {
                        console.log(error);
                    }
                }

                isRelativeImport(url) {
                    return /^([^/]+)/.exec(url);
                }

                isExternalUrl(url) {
                    const handlers = this.urlResolver.getHandlers(); // we filter out "npm" because this will be recognized as internal url although it's not the case.

                    return handlers.filter(handler => handler.type !== 'npm').some(handler => handler.match(url));
                }

                /**
                 * resolve the content of @arg url. This only resolves external URLs.
                 *
                 * @param {String} url  - external URL of the content. can be basically anything like raw HTTP, ipfs URL, github address etc...
                 * @returns {Promise} - { content, cleanUrl, type, url }
                 */


                resolve(url) {
                    return new Promise((resolve, reject) => {
                        this.import(url, null, (error, content, cleanUrl, type, url) => {
                            if (error) {
                                return reject(error);
                            }
                            resolve({
                                content,
                                cleanUrl,
                                type,
                                url
                            });
                        }, null);
                    });
                }

                async import(url, force, loadingCb, cb) {
                    if (typeof force !== 'boolean') {
                        const temp = loadingCb;
                        loadingCb = force;
                        cb = temp;
                        force = false;
                    }

                    if (!loadingCb) {
                        loadingCb = () => {
                        };
                    }
                    if (!cb) {
                        cb = () => {
                        };
                    }
                    var self = this;
                    if (force) {
                        delete this.previouslyHandled[url];
                    }
                    var imported = this.previouslyHandled[url];

                    if (imported) {
                        return cb(null, imported.content, imported.cleanUrl, imported.type, url);
                    }

                    let resolved;

                    try {
                        await this.setToken();
                        resolved = await this.urlResolver.resolve(url);
                        const {
                            content,
                            cleanUrl,
                            type
                        } = resolved;
                        self.previouslyHandled[url] = {
                            content,
                            cleanUrl,
                            type
                        };
                        cb(null, content, cleanUrl, type, url);
                    } catch (e) {
                        return cb(new Error('not found ' + url));
                    }
                }

                importExternal(url, targetPath) {
                    return new Promise((resolve, reject) => {
                        this.import(url, // TODO: handle this event
                            loadingMsg => {
                                this.emit('message', loadingMsg);
                            }, async (error, content, cleanUrl, type, url) => {
                                if (error) {
                                    return reject(error);
                                }

                                try {
                                    const provider = await this.call('fileManager', 'getProviderOf', null);
                                    const path = targetPath || type + '/' + cleanUrl;
                                    if (provider) {
                                        provider.addExternal('.deps/' + path, content, url);
                                    }
                                } catch (err) {
                                    console.error(err);
                                }

                                resolve(content);
                            }, null);
                    });
                }

                /**
                 * import the content of @arg url.
                 * first look in the browser localstorage (browser explorer) or locahost explorer. if the url start with `browser/*` or  `localhost/*`
                 * then check if the @arg url is located in the localhost, in the node_modules or installed_contracts folder
                 * then check if the @arg url match any external url
                 *
                 * @param {String} url - URL of the content. can be basically anything like file located in the browser explorer, in the localhost explorer, raw HTTP, github address etc...
                 * @param {String} targetPath - (optional) internal path where the content should be saved to
                 * @returns {Promise} - string content
                 */


                async resolveAndSave(url, targetPath) {
                    try {
                        const provider = await this.call('fileManager', 'getProviderOf', url);

                        if (provider) {
                            if (provider.type === 'localhost' && !provider.isConnected()) {
                                throw new Error(`file provider ${provider.type} not available while trying to resolve ${url}`);
                            }

                            const exist = await provider.exists(url);
                            /*
          if the path is absolute and the file does not exist, we can stop here
          Doesn't make sense to try to resolve "localhost/node_modules/localhost/node_modules/<path>" and we'll end in an infinite loop.
        */

                            if (!exist && url.startsWith('browser/')) {
                                throw new Error(`not found ${url}`);
                            }
                            if (!exist && url.startsWith('localhost/')) {
                                throw new Error(`not found ${url}`);
                            }

                            if (exist) {
                                const content = await (() => {
                                    return new Promise((resolve, reject) => {
                                        provider.get(url, (error, content) => {
                                            if (error) {
                                                return reject(error);
                                            }
                                            resolve(content);
                                        });
                                    });
                                })();
                                return content;
                            } else {
                                const localhostProvider = await this.call('fileManager', 'getProviderByName', 'localhost');

                                if (localhostProvider.isConnected()) {
                                    const splitted = /([^/]+)\/(.*)$/g.exec(url);
                                    const possiblePaths = ['localhost/installed_contracts/' + url]; // pick remix-tests library contracts from '.deps'

                                    if (url.startsWith('remix_')) {
                                        possiblePaths.push('localhost/.deps/remix-tests/' + url);
                                    }
                                    if (splitted) {
                                        possiblePaths.push('localhost/installed_contracts/' + splitted[1] + '/contracts/' + splitted[2]);
                                    }
                                    possiblePaths.push('localhost/node_modules/' + url);
                                    if (splitted) {
                                        possiblePaths.push('localhost/node_modules/' + splitted[1] + '/contracts/' + splitted[2]);
                                    }

                                    for (const path of possiblePaths) {
                                        try {
                                            const content = await this.resolveAndSave(path, null);

                                            if (content) {
                                                localhostProvider.addNormalizedName(path.replace('localhost/', ''), url);
                                                return content;
                                            }
                                        } catch (e) {
                                        }
                                    }

                                    return await this.importExternal(url, targetPath);
                                }

                                return await this.importExternal(url, targetPath);
                            }
                        }
                    } catch (e) {
                        throw new Error(`not found ${url}`);
                    }
                }

            }

            exports.CompilerImports = CompilerImports;

            /***/
        }),

        /***/ 1766:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixURLResolver = void 0;

            var resolve_1 = __webpack_require__(1767);

            Object.defineProperty(exports, "RemixURLResolver", {
                enumerable: true,
                get: function () {
                    return resolve_1.RemixURLResolver;
                }
            });

            /***/
        }),

        /***/ 1767:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixURLResolver = void 0;

            const tslib_1 = __webpack_require__(494); // eslint-disable-next-line no-unused-vars


            const axios_1 = (0, tslib_1.__importDefault)(__webpack_require__(772));

            const bzz_node_1 = __webpack_require__(1785);

            class RemixURLResolver {
                constructor(gistToken, protocol = 'http:') {
                    this.previouslyHandled = {};
                    this.setGistToken(gistToken, protocol);
                }

                setGistToken(gistToken, protocol = 'http:') {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        this.gistAccessToken = gistToken || '';
                        this.protocol = protocol;
                    });
                }

                /**
                 * Handle an import statement based on github
                 * @param root The root of the github import statement
                 * @param filePath path of the file in github
                 */


                handleGithubCall(root, filePath) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        const regex = filePath.match(/blob\/([^/]+)\/(.*)/);
                        let reference = 'master';

                        if (regex) {
                            // if we have /blob/master/+path we extract the branch name "master" and add it as a parameter to the github api
                            // the ref can be branch name, tag, commit id
                            reference = regex[1];
                            filePath = filePath.replace(`blob/${reference}/`, '');
                        } // eslint-disable-next-line no-useless-catch


                        try {
                            const req = `https://raw.githubusercontent.com/${root}/${reference}/${filePath}`;
                            const response = yield axios_1.default.get(req);
                            return {
                                content: response.data,
                                cleanUrl: root + '/' + filePath
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                /**
                 * Handle an import statement based on http
                 * @param url The url of the import statement
                 * @param cleanUrl
                 */


                handleHttp(url, cleanUrl) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // eslint-disable-next-line no-useless-catch
                        try {
                            const response = yield axios_1.default.get(url);
                            return {
                                content: response.data,
                                cleanUrl
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                /**
                 * Handle an import statement based on https
                 * @param url The url of the import statement
                 * @param cleanUrl
                 */


                handleHttps(url, cleanUrl) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // eslint-disable-next-line no-useless-catch
                        try {
                            const response = yield axios_1.default.get(url);
                            return {
                                content: response.data,
                                cleanUrl
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                handleSwarm(url, cleanUrl) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // eslint-disable-next-line no-useless-catch
                        try {
                            const bzz = new bzz_node_1.BzzNode({
                                url: this.protocol + '//swarm-gateways.net'
                            });
                            const url = bzz.getDownloadURL(cleanUrl, {
                                mode: 'raw'
                            });
                            const response = yield axios_1.default.get(url);
                            return {
                                content: response.data,
                                cleanUrl
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                /**
                 * Handle an import statement based on IPFS
                 * @param url The url of the IPFS import statement
                 */


                handleIPFS(url) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // replace ipfs:// with /ipfs/
                        url = url.replace(/^ipfs:\/\/?/, 'ipfs/'); // eslint-disable-next-line no-useless-catch

                        try {
                            const req = 'https://ipfs.remixproject.org/' + url; // If you don't find greeter.sol on ipfs gateway use local
                            // const req = 'http://localhost:8080/' + url

                            const response = yield axios_1.default.get(req);
                            return {
                                content: response.data,
                                cleanUrl: url.replace('ipfs/', '')
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                /**
                 * Handle an import statement based on NPM
                 * @param url The url of the NPM import statement
                 */


                handleNpmImport(url) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        // eslint-disable-next-line no-useless-catch
                        try {

                            console.log(url);
                            const req = 'https://unpkg.com/' + url;
                            const response = yield axios_1.default.get(req);
                            console.log(response.data);
                            return {
                                content: response.data,
                                cleanUrl: url
                            };
                        } catch (e) {
                            throw e;
                        }
                    });
                }

                getHandlers() {
                    return [
                        {
                            type: 'github',
                            match: url => {
                                return /^(https?:\/\/)?(www.)?github.com\/([^/]*\/[^/]*)\/(.*)/.exec(url);
                            },
                            handle: match => this.handleGithubCall(match[3], match[4])
                        }, {
                            type: 'http',
                            match: url => {
                                return /^(http?:\/\/?(.*))$/.exec(url);
                            },
                            handle: match => this.handleHttp(match[1], match[2])
                        }, {
                            type: 'https',
                            match: url => {
                                return /^(https?:\/\/?(.*))$/.exec(url);
                            },
                            handle: match => this.handleHttps(match[1], match[2])
                        }, {
                            type: 'swarm',
                            match: url => {
                                return /^(bzz-raw?:\/\/?(.*))$/.exec(url);
                            },
                            handle: match => this.handleSwarm(match[1], match[2])
                        }, {
                            type: 'ipfs',
                            match: url => {
                                return /^(ipfs:\/\/?.+)/.exec(url);
                            },
                            handle: match => this.handleIPFS(match[1])
                        }, {
                            type: 'npm',
                            match: url => {
                                return /^[^/][^\n"?:*<>|]*$/g.exec(url);
                            },
                            handle: match => this.handleNpmImport(match[0])
                        }
                    ];
                }

                resolve(filePath, customHandlers) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        let imported = this.previouslyHandled[filePath];

                        if (imported) {
                            return imported;
                        }

                        const builtinHandlers = this.getHandlers();
                        const handlers = customHandlers ? [...builtinHandlers, ...customHandlers] : [...builtinHandlers];
                        const matchedHandler = handlers.filter(handler => handler.match(filePath));
                        const handler = matchedHandler[0];
                        const match = handler.match(filePath);
                        const {
                            content,
                            cleanUrl
                        } = yield handler.handle(match);
                        imported = {
                            content,
                            cleanUrl: cleanUrl || filePath,
                            type: handler.type
                        };
                        this.previouslyHandled[filePath] = imported;
                        return imported;
                    });
                }

            }

            exports.RemixURLResolver = RemixURLResolver;

            /***/
        }),

        /***/ 1795:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompilerArtefacts = void 0;

            var _engine = __webpack_require__(509);

            var _remixSolidity = __webpack_require__(556);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const profile = {
                name: 'compilerArtefacts',
                methods: ['get', 'addResolvedContract', 'getCompilerAbstract', 'getAllContractDatas', 'getLastCompilationResult'],
                events: [],
                version: '0.0.1'
            };

            class CompilerArtefacts extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "compilersArtefactsPerFile", void 0);

                    _defineProperty(this, "compilersArtefacts", void 0);

                    this.compilersArtefacts = {};
                    this.compilersArtefactsPerFile = {};
                }

                clear() {
                    this.compilersArtefacts = {};
                    this.compilersArtefactsPerFile = {};
                }

                onActivation() {
                    const saveCompilationPerFileResult = (file, source, languageVersion, data) => {
                        this.compilersArtefactsPerFile[file] = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                    };

                    this.on('solidity', 'compilationFinished', (file, source, languageVersion, data) => {
                        this.compilersArtefacts.__last = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                        saveCompilationPerFileResult(file, source, languageVersion, data);
                    });
                    this.on('vyper', 'compilationFinished', (file, source, languageVersion, data) => {
                        this.compilersArtefacts.__last = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                        saveCompilationPerFileResult(file, source, languageVersion, data);
                    });
                    this.on('lexon', 'compilationFinished', (file, source, languageVersion, data) => {
                        this.compilersArtefacts.__last = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                        saveCompilationPerFileResult(file, source, languageVersion, data);
                    });
                    this.on('yulp', 'compilationFinished', (file, source, languageVersion, data) => {
                        this.compilersArtefacts.__last = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                        saveCompilationPerFileResult(file, source, languageVersion, data);
                    });
                    this.on('solidityUnitTesting', 'compilationFinished', (file, source, languageVersion, data) => {
                        this.compilersArtefacts.__last = new _remixSolidity.CompilerAbstract(languageVersion, data, source);
                        saveCompilationPerFileResult(file, source, languageVersion, data);
                    });
                }

                getLastCompilationResult() {
                    return this.compilersArtefacts.__last;
                }

                getAllContractDatas() {
                    const contractsData = {};
                    Object.keys(this.compilersArtefactsPerFile).map(targetFile => {
                        const contracts = this.compilersArtefactsPerFile[targetFile].getContracts();
                        Object.keys(contracts).map(file => {
                            contractsData[file] = contracts[file];
                        });
                    }); // making sure we save last compilation result in there

                    if (this.compilersArtefacts.__last) {
                        const contracts = this.compilersArtefacts.__last.getContracts();

                        Object.keys(contracts).map(file => {
                            contractsData[file] = contracts[file];
                        });
                    }

                    return contractsData;
                }

                getCompilerAbstract(file) {
                    return this.compilersArtefactsPerFile[file];
                } // compilerData is a CompilerAbstract object


                addResolvedContract(address, compilerData) {
                    this.compilersArtefacts[address] = compilerData;
                }

                isResolved(address) {
                    return this.compilersArtefacts[address] !== undefined;
                }

                get(key) {
                    return this.compilersArtefacts[key];
                }

            }

            exports.CompilerArtefacts = CompilerArtefacts;

            /***/
        }),

        /***/ 1796:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.EditorContextListener = void 0;

            var _engine = __webpack_require__(509);

            var _remixDebug = __webpack_require__(642);

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            const {
                AstWalker
            } = __webpack_require__(600);

            const profile = {
                name: 'contextualListener',
                methods: ['referencesOf', 'getActiveHighlights', 'gasEstimation', 'declarationOf'],
                events: [],
                version: '0.0.1'
            };

            /*
  trigger contextChanged(nodes)
*/

            class EditorContextListener extends _engine.Plugin {
                constructor() {
                    super(profile);

                    _defineProperty(this, "_index", void 0);

                    _defineProperty(this, "_activeHighlights", void 0);

                    _defineProperty(this, "astWalker", void 0);

                    _defineProperty(this, "currentPosition", void 0);

                    _defineProperty(this, "currentFile", void 0);

                    _defineProperty(this, "nodes", void 0);

                    _defineProperty(this, "results", void 0);

                    _defineProperty(this, "estimationObj", void 0);

                    _defineProperty(this, "creationCost", void 0);

                    _defineProperty(this, "codeDepositCost", void 0);

                    _defineProperty(this, "contract", void 0);

                    _defineProperty(this, "activated", void 0);

                    this.activated = false;
                    this._index = {
                        Declarations: {},
                        FlatReferences: {}
                    };
                    this._activeHighlights = [];
                    this.astWalker = new AstWalker();
                }

                onActivation() {
                    this.on('editor', 'contentChanged', () => {
                        this._stopHighlighting();
                    });
                    this.on('solidity', 'compilationFinished', (file, source, languageVersion, data) => {
                        if (languageVersion.indexOf('soljson') !== 0) {
                            return;
                        }

                        this._stopHighlighting();

                        this._index = {
                            Declarations: {},
                            FlatReferences: {}
                        };

                        this._buildIndex(data, source);
                    });
                    setInterval(async () => {
                        const compilationResult = await this.call('compilerArtefacts', 'getLastCompilationResult');

                        if (compilationResult && compilationResult.languageversion.indexOf('soljson') === 0) {
                            this._highlightItems(await this.call('editor', 'getCursorPosition'), compilationResult, await this.call('fileManager', 'file'));
                        }
                    }, 1000);
                    this.activated = true;
                }

                getActiveHighlights() {
                    return [...this._activeHighlights];
                }

                declarationOf(node) {
                    if (node && node.referencedDeclaration) {
                        return this._index.FlatReferences[node.referencedDeclaration];
                    }

                    return null;
                }

                referencesOf(node) {
                    return this._index.Declarations[node.id];
                }

                async _highlightItems(cursorPosition, compilationResult, file) {
                    if (this.currentPosition === cursorPosition) {
                        return;
                    }

                    this._stopHighlighting();

                    this.currentPosition = cursorPosition;
                    this.currentFile = file;

                    if (compilationResult && compilationResult.data && compilationResult.data.sources[file]) {
                        const nodes = _remixDebug.sourceMappingDecoder.nodesAtPosition(null, cursorPosition, compilationResult.data.sources[file]);

                        this.nodes = nodes;

                        if (nodes && nodes.length && nodes[nodes.length - 1]) {
                            await this._highlightExpressions(nodes[nodes.length - 1], compilationResult);
                        }

                        this.emit('contextChanged', nodes);
                    }
                }

                _buildIndex(compilationResult, source) {
                    if (compilationResult && compilationResult.sources) {
                        const callback = node => {
                            if (node && node.referencedDeclaration) {
                                if (!this._index.Declarations[node.referencedDeclaration]) {
                                    this._index.Declarations[node.referencedDeclaration] = [];
                                }

                                this._index.Declarations[node.referencedDeclaration].push(node);
                            }

                            this._index.FlatReferences[node.id] = node;
                        };

                        for (const s in compilationResult.sources) {
                            this.astWalker.walkFull(compilationResult.sources[s].ast, callback);
                        }
                    }
                }

                async _highlight(node, compilationResult) {
                    if (!node) {
                        return;
                    }

                    const position = _remixDebug.sourceMappingDecoder.decode(node.src);

                    const fileTarget = compilationResult.getSourceName(position.file);

                    const nodeFound = this._activeHighlights.find(el => el.fileTarget === fileTarget && el.position.file === position.file && el.position.length === position.length && el.position.start === position.start);

                    if (nodeFound) {
                        return;
                    } // if the content is already highlighted, do nothing.

                    await this._highlightInternal(position, node, compilationResult);

                    if (compilationResult && compilationResult.languageversion.indexOf('soljson') === 0) {
                        this._activeHighlights.push({
                            position,
                            fileTarget,
                            nodeId: node.id
                        });
                    }
                }

                async _highlightInternal(position, node, compilationResult) {
                    if (node.nodeType === 'Block') {
                        return;
                    }

                    if (compilationResult && compilationResult.languageversion.indexOf('soljson') === 0) {
                        let lineColumn = await this.call('offsetToLineColumnConverter', 'offsetToLineColumn', position, position.file, compilationResult.getSourceCode().sources, compilationResult.getAsts());

                        if (node.nodes && node.nodes.length) {
                            // If node has children, highlight the entire line. if not, just highlight the current source position of the node.
                            lineColumn = {
                                start: {
                                    line: lineColumn.start.line,
                                    column: 0
                                },
                                end: {
                                    line: lineColumn.start.line + 1,
                                    column: 0
                                }
                            };
                        }

                        const fileName = compilationResult.getSourceName(position.file);

                        if (fileName) {
                            return await this.call('editor', 'highlight', lineColumn, fileName, '', {
                                focus: false
                            });
                        }
                    }

                    return null;
                }

                async _highlightExpressions(node, compilationResult) {
                    const highlights = async id => {
                        if (this._index.Declarations && this._index.Declarations[id]) {
                            const refs = this._index.Declarations[id];

                            for (const ref in refs) {
                                const node = refs[ref];
                                await this._highlight(node, compilationResult);
                            }
                        }
                    };

                    if (node && node.referencedDeclaration) {
                        await highlights(node.referencedDeclaration);
                        const current = this._index.FlatReferences[node.referencedDeclaration];
                        await this._highlight(current, compilationResult);
                    } else {
                        await highlights(node.id);
                        await this._highlight(node, compilationResult);
                    }

                    this.results = compilationResult;
                }

                _stopHighlighting() {
                    this.call('editor', 'discardHighlight');
                    this.emit('stopHighlighting');
                    this._activeHighlights = [];
                }

                gasEstimation(node) {
                    this._loadContractInfos(node);

                    let executionCost, codeDepositCost;

                    if (node.nodeType === 'FunctionDefinition') {
                        const visibility = node.visibility;

                        if (node.kind !== 'constructor') {
                            const fnName = node.name;

                            const fn = fnName + this._getInputParams(node);

                            if (visibility === 'public' || visibility === 'external') {
                                executionCost = this.estimationObj === null ? '-' : this.estimationObj.external[fn];
                            } else if (visibility === 'private' || visibility === 'internal') {
                                executionCost = this.estimationObj === null ? '-' : this.estimationObj.internal[fn];
                            }
                        } else {
                            executionCost = this.creationCost;
                            codeDepositCost = this.codeDepositCost;
                        }
                    } else {
                        executionCost = '-';
                    }

                    return {
                        executionCost,
                        codeDepositCost
                    };
                }

                _loadContractInfos(node) {
                    const path = this.nodes.length && this.nodes[0].absolutePath || this.results.source.target;

                    for (const i in this.nodes) {
                        if (this.nodes[i].id === node.scope) {
                            const contract = this.nodes[i];
                            this.contract = this.results.data.contracts[path][contract.name];

                            if (contract) {
                                this.estimationObj = this.contract.evm.gasEstimates;
                                this.creationCost = this.estimationObj === null ? '-' : this.estimationObj.creation.totalCost;
                                this.codeDepositCost = this.estimationObj === null ? '-' : this.estimationObj.creation.codeDepositCost;
                            }
                        }
                    }
                }

                _getInputParams(node) {
                    const params = [];
                    const target = node.parameters; // for (const i in node.children) {
                    //   if (node.children[i].name === 'ParameterList') {
                    //     target = node.children[i]
                    //     break
                    //   }
                    // }

                    if (target) {
                        const children = target.parameters;

                        for (const j in children) {
                            if (children[j].nodeType === 'VariableDeclaration') {
                                params.push(children[j].typeDescriptions.typeString);
                            }
                        }
                    }

                    return '(' + params.toString() + ')';
                }

            }

            exports.EditorContextListener = EditorContextListener;

            /***/
        }),

        /***/ 1797:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* global fetch */


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.GistHandler = void 0;

            var _engine = __webpack_require__(509);

            const profile = {
                name: 'gistHandler',
                methods: ['load'],
                events: [],
                version: '0.0.1'
            };

            class GistHandler extends _engine.Plugin {
                constructor() {
                    super(profile);
                }

                async handleLoad(gistId, cb) {
                    if (!cb) {
                        cb = () => {
                        };
                    }
                    var loadingFromGist = false;

                    if (!gistId) {
                        loadingFromGist = true;
                        let value;

                        try {
                            value = await (() => {
                                return new Promise((resolve, reject) => {
                                    const modalContent = {
                                        id: 'gisthandler',
                                        title: 'Load a Gist',
                                        message: 'Enter the ID of the Gist or URL you would like to load.',
                                        modalType: 'prompt',
                                        okLabel: 'OK',
                                        cancelLabel: 'Cancel',
                                        okFn: value => {
                                            setTimeout(() => resolve(value), 0);
                                        },
                                        cancelFn: () => {
                                            setTimeout(() => reject(new Error('Canceled')), 0);
                                        },
                                        hideFn: () => {
                                            setTimeout(() => reject(new Error('Hide')), 0);
                                        }
                                    };
                                    this.call('notification', 'modal', modalContent);
                                });
                            })();
                        } catch (e) {
                            // the modal has been canceled
                            return;
                        }

                        if (value !== '') {
                            gistId = getGistId(value);

                            if (gistId) {
                                cb(gistId);
                            } else {
                                const modalContent = {
                                    id: 'gisthandler',
                                    title: 'Gist load error',
                                    message: 'Error while loading gist. Please provide a valid Gist ID or URL.'
                                };
                                this.call('notification', 'alert', modalContent);
                            }
                        } else {
                            const modalContent = {
                                id: 'gisthandlerEmpty',
                                title: 'Gist load error',
                                message: 'Error while loading gist. Id cannot be empty.'
                            };
                            this.call('notification', 'alert', modalContent);
                        }

                        return loadingFromGist;
                    } else {
                        loadingFromGist = !!gistId;
                    }

                    if (loadingFromGist) {
                        cb(gistId);
                    }

                    return loadingFromGist;
                }

                load(gistId) {
                    const self = this;
                    return self.handleLoad(gistId, async gistId => {
                        let data;

                        try {
                            data = await (await fetch(`https://api.github.com/gists/${gistId}`)).json();

                            if (!data.files) {
                                const modalContent = {
                                    id: 'gisthandler',
                                    title: 'Gist load error',
                                    message: data.message,
                                    modalType: 'alert',
                                    okLabel: 'OK'
                                };
                                await this.call('notification', 'modal', modalContent);
                                return;
                            }
                        } catch (e) {
                            const modalContent = {
                                id: 'gisthandler',
                                title: 'Gist load error',
                                message: e.message
                            };
                            await this.call('notification', 'alert', modalContent);
                            return;
                        }

                        const obj = {};
                        Object.keys(data.files).forEach(element => {
                            const path = element.replace(/\.\.\./g, '/');
                            obj['/' + 'gist-' + gistId + '/' + path] = data.files[element];
                        });
                        this.call('fileManager', 'setBatchFiles', obj, 'workspace', true, async errorSavingFiles => {
                            if (errorSavingFiles) {
                                const modalContent = {
                                    id: 'gisthandler',
                                    title: 'Gist load error',
                                    message: errorSavingFiles.message || errorSavingFiles
                                };
                                this.call('notification', 'alert', modalContent);
                            }
                        });
                    });
                }

            }

            exports.GistHandler = GistHandler;

            const getGistId = str => {
                var idr = /[0-9A-Fa-f]{8,}/;
                var match = idr.exec(str);
                return match ? match[0] : null;
            };

            /***/
        }),

        /***/ 1798:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ConfigPlugin = void 0;

            var _engine = __webpack_require__(509);

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            var _registry = _interopRequireDefault(__webpack_require__(576));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var profile = {
                name: 'config',
                displayName: 'Config',
                description: 'Config',
                methods: ['getAppParameter', 'setAppParameter']
            };

            var ConfigPlugin = /*#__PURE__*/function (_Plugin) {
                _inherits(ConfigPlugin, _Plugin);

                var _super = _createSuper(ConfigPlugin);

                function ConfigPlugin() {
                    _classCallCheck(this, ConfigPlugin);

                    return _super.call(this, profile);
                }

                _createClass(ConfigPlugin, [
                    {
                        key: "getAppParameter",
                        value: function getAppParameter(name) {
                            var queryParams = new _queryParams["default"]();
                            var params = queryParams.get();

                            var config = _registry["default"].getInstance().get('config').api;

                            var param = params[name] ? params[name] : config.get(name);
                            if (param === 'true') {
                                return true;
                            }
                            if (param === 'false') {
                                return false;
                            }
                            return param;
                        }
                    }, {
                        key: "setAppParameter",
                        value: function setAppParameter(name, value) {
                            var config = _registry["default"].getInstance().get('config').api;

                            config.set(name, value);
                        }
                    }
                ]);

                return ConfigPlugin;
            }(_engine.Plugin);

            exports.ConfigPlugin = ConfigPlugin;

            /***/
        }),

        /***/ 1799:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Layout = void 0;

            var _engine = __webpack_require__(509);

            var _events = __webpack_require__(510);

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'layout',
                description: 'layout',
                methods: ['minimize']
            };

            var Layout = /*#__PURE__*/function (_Plugin) {
                _inherits(Layout, _Plugin);

                var _super = _createSuper(Layout);

                function Layout() {
                    var _this;

                    _classCallCheck(this, Layout);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "event", void 0);

                    _defineProperty(_assertThisInitialized(_this), "panels", void 0);

                    _this.event = new _events.EventEmitter();
                    return _this;
                }

                _createClass(Layout, [
                    {
                        key: "onActivation",
                        value: function () {
                            var _onActivation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                var _this2 = this;

                                var queryParams, params;
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                this.on('fileManager', 'currentFileChanged', function () {
                                                    _this2.panels.editor.active = true;
                                                    _this2.panels.main.active = false;

                                                    _this2.event.emit('change', null);
                                                });
                                                this.on('tabs', 'openFile', function () {
                                                    _this2.panels.editor.active = true;
                                                    _this2.panels.main.active = false;

                                                    _this2.event.emit('change', null);
                                                });
                                                this.on('tabs', 'switchApp', function (name) {
                                                    _this2.call('mainPanel', 'showContent', name);

                                                    _this2.panels.editor.active = false;
                                                    _this2.panels.main.active = true;

                                                    _this2.event.emit('change', null);
                                                });
                                                this.on('tabs', 'closeApp', function (name) {
                                                    _this2.panels.editor.active = true;
                                                    _this2.panels.main.active = false;

                                                    _this2.event.emit('change', null);
                                                });
                                                this.on('tabs', 'tabCountChanged', /*#__PURE__*/function () {
                                                    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(count) {
                                                        return regeneratorRuntime.wrap(function _callee$(_context) {
                                                            while (1) {
                                                                switch (_context.prev = _context.next) {
                                                                    case 0:
                                                                        if (count) {
                                                                            _context.next = 3;
                                                                            break;
                                                                        }

                                                                        _context.next = 3;
                                                                        return _this2.call('manager', 'activatePlugin', 'home');

                                                                    case 3:
                                                                    case "end":
                                                                        return _context.stop();
                                                                }
                                                            }
                                                        }, _callee);
                                                    }));

                                                    return function (_x) {
                                                        return _ref.apply(this, arguments);
                                                    };
                                                }());
                                                this.on('manager', 'activate', function (profile) {
                                                    switch (profile.name) {
                                                        case 'filePanel':
                                                            _this2.call('menuicons', 'select', 'filePanel');

                                                            break;
                                                    }
                                                });
                                                document.addEventListener('keypress', function (e) {
                                                    if (e.shiftKey && e.ctrlKey) {
                                                        if (e.code === 'KeyF') {
                                                            // Ctrl+Shift+F
                                                            _this2.call('menuicons', 'select', 'filePanel');
                                                        } else if (e.code === 'KeyA') {
                                                            // Ctrl+Shift+A
                                                            _this2.call('menuicons', 'select', 'pluginManager');
                                                        } else if (e.code === 'KeyS') {
                                                            //  Ctrl+Shift+S
                                                            _this2.call('menuicons', 'select', 'settings');
                                                        }

                                                        e.preventDefault();
                                                    }
                                                });
                                                queryParams = new _queryParams["default"]();
                                                params = queryParams.get();

                                                if (params.minimizeterminal || params.embed) {
                                                    this.panels.terminal.minimized = true;
                                                    this.event.emit('change', this.panels);
                                                    this.emit('change', this.panels);
                                                }

                                                if (params.minimizesidepanel || params.embed) {
                                                    this.event.emit('minimizesidepanel');
                                                }

                                            case 11:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function onActivation() {
                                return _onActivation.apply(this, arguments);
                            }

                            return onActivation;
                        }()
                    }, {
                        key: "minimize",
                        value: function minimize(name, minimized) {
                            this.panels[name].minimized = minimized;
                            this.event.emit('change', null);
                        }
                    }
                ]);

                return Layout;
            }(_engine.Plugin);

            exports.Layout = Layout;

            /***/
        }),

        /***/ 1800:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.NotificationPlugin = void 0;

            var _engine = __webpack_require__(509);

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'notification',
                displayName: 'Notification',
                description: 'Displays notifications',
                methods: ['modal', 'alert', 'toast']
            };

            var NotificationPlugin = /*#__PURE__*/function (_Plugin) {
                _inherits(NotificationPlugin, _Plugin);

                var _super = _createSuper(NotificationPlugin);

                function NotificationPlugin() {
                    var _this;

                    _classCallCheck(this, NotificationPlugin);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "dispatcher", void 0);

                    return _this;
                }

                _createClass(NotificationPlugin, [
                    {
                        key: "setDispatcher",
                        value: function setDispatcher(dispatcher) {
                            this.dispatcher = dispatcher;
                        }
                    }, {
                        key: "modal",
                        value: function () {
                            var _modal = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                return _context.abrupt("return", this.dispatcher.modal(args));

                                            case 1:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function modal(_x) {
                                return _modal.apply(this, arguments);
                            }

                            return modal;
                        }()
                    }, {
                        key: "alert",
                        value: function () {
                            var _alert = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(args) {
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                return _context2.abrupt("return", this.dispatcher.alert(args));

                                            case 1:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function alert(_x2) {
                                return _alert.apply(this, arguments);
                            }

                            return alert;
                        }()
                    }, {
                        key: "toast",
                        value: function () {
                            var _toast = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(message) {
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                this.dispatcher.toast(message);

                                            case 1:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function toast(_x3) {
                                return _toast.apply(this, arguments);
                            }

                            return toast;
                        }()
                    }
                ]);

                return NotificationPlugin;
            }(_engine.Plugin);

            exports.NotificationPlugin = NotificationPlugin;

            /***/
        }),

        /***/ 1801:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Blockchain = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _web = _interopRequireDefault(__webpack_require__(521));

            var _engine = __webpack_require__(509);

            var _ethereumjsUtil = __webpack_require__(493);

            var _async = __webpack_require__(541);

            var _events = __webpack_require__(510);

            var _util = __webpack_require__(511);

            var _executionContext = __webpack_require__(1802);

            var _vm = _interopRequireDefault(__webpack_require__(1803));

            var _injected = _interopRequireDefault(__webpack_require__(1977));

            var _node = _interopRequireDefault(__webpack_require__(1978));

            var _remixLib = __webpack_require__(508);

            var _helper = __webpack_require__(1979);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
            }

            function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
                    return Array.from(iter);
                }
            }

            function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr)) {
                    return _arrayLikeToArray(arr);
                }
            }

            function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                        if (it) {
                            o = it;
                        }
                        var i = 0;
                        var F = function F() {
                        };
                        return {
                            s: F, n: function n() {
                                if (i >= o.length) {
                                    return {done: true};
                                }
                                return {done: false, value: o[i++]};
                            }, e: function e(_e) {
                                throw _e;
                            }, f: F
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return {
                    s: function s() {
                        it = it.call(o);
                    }, n: function n() {
                        var step = it.next();
                        normalCompletion = step.done;
                        return step;
                    }, e: function e(_e2) {
                        didErr = true;
                        err = _e2;
                    }, f: function f() {
                        try {
                            if (!normalCompletion && it["return"] != null) {
                                it["return"]();
                            }
                        } finally {
                            if (didErr) {
                                throw err;
                            }
                        }
                    }
                };
            }

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) {
                    return;
                }
                if (typeof o === "string") {
                    return _arrayLikeToArray(o, minLen);
                }
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor) {
                    n = o.constructor.name;
                }
                if (n === "Map" || n === "Set") {
                    return Array.from(o);
                }
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
                    return _arrayLikeToArray(o, minLen);
                }
            }

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) {
                    len = arr.length;
                }
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var txFormat = _remixLib.execution.txFormat,
                txExecution = _remixLib.execution.txExecution,
                typeConversion = _remixLib.execution.typeConversion,
                Txlistener = _remixLib.execution.txListener,
                TxRunner = _remixLib.execution.TxRunner,
                TxRunnerWeb3 = _remixLib.execution.TxRunnerWeb3,
                txHelper = _remixLib.execution.txHelper;
            var resultToRemixTx = _remixLib.helpers.txResultHelper;

            var packageJson = __webpack_require__(194);

            var _paq = window._paq = window._paq || []; //eslint-disable-line


            var profile = {
                name: 'blockchain',
                displayName: 'Blockchain',
                description: 'Blockchain - Logic',
                methods: [],
                version: packageJson.version
            };

            var Blockchain = /*#__PURE__*/function (_Plugin) {
                _inherits(Blockchain, _Plugin);

                var _super = _createSuper(Blockchain);

                // NOTE: the config object will need to be refactored out in remix-lib
                function Blockchain(config) {
                    var _this;

                    _classCallCheck(this, Blockchain);

                    _this = _super.call(this, profile);
                    _this.event = new _remixLib.EventManager();
                    _this.executionContext = new _executionContext.ExecutionContext();
                    _this.events = new _events.EventEmitter();
                    _this.config = config;
                    var web3Runner = new TxRunnerWeb3({
                        config: _this.config,
                        detectNetwork: function detectNetwork(cb) {
                            _this.executionContext.detectNetwork(cb);
                        },
                        isVM: function isVM() {
                            return _this.executionContext.isVM();
                        },
                        personalMode: function personalMode() {
                            return _this.getProvider() === 'web3' ? _this.config.get('settings/personal-mode') : false;
                        }
                    }, function (_) {
                        return _this.executionContext.web3();
                    }, function (_) {
                        return _this.executionContext.currentblockGasLimit();
                    });
                    _this.txRunner = new TxRunner(web3Runner, {
                        runAsync: true
                    });

                    _this.executionContext.event.register('contextChanged', _this.resetEnvironment.bind(_assertThisInitialized(_this)));

                    _this.networkcallid = 0;
                    _this.networkStatus = {
                        name: ' - ',
                        id: ' - '
                    };

                    _this.setupEvents();

                    _this.setupProviders();

                    return _this;
                }

                _createClass(Blockchain, [
                    {
                        key: "setupEvents",
                        value: function setupEvents() {
                            var _this2 = this;

                            this.executionContext.event.register('contextChanged', function (context, silent) {
                                _this2.event.trigger('contextChanged', [context, silent]);
                            });
                            this.executionContext.event.register('addProvider', function (network) {
                                _this2.event.trigger('addProvider', [network]);
                            });
                            this.executionContext.event.register('removeProvider', function (name) {
                                _this2.event.trigger('removeProvider', [name]);
                            });
                            setInterval(function () {
                                _this2.detectNetwork(function (error, network) {
                                    _this2.networkStatus = {
                                        network: network,
                                        error: error
                                    };

                                    _this2.event.trigger('networkStatus', [_this2.networkStatus]);
                                });
                            }, 1000);
                        }
                    }, {
                        key: "getCurrentNetworkStatus",
                        value: function getCurrentNetworkStatus() {
                            return this.networkStatus;
                        }
                    }, {
                        key: "setupProviders",
                        value: function setupProviders() {
                            this.providers = {};
                            this.providers.vm = new _vm["default"](this.executionContext);
                            this.providers.injected = new _injected["default"](this.executionContext);
                            this.providers.web3 = new _node["default"](this.executionContext, this.config);
                        }
                    }, {
                        key: "getCurrentProvider",
                        value: function getCurrentProvider() {
                            var provider = this.getProvider();
                            if (this.providers[provider]) {
                                return this.providers[provider];
                            }
                            return this.providers.web3; // default to the common type of provider
                        }
                        /** Return the list of accounts */
                        // note: the dual promise/callback is kept for now as it was before

                    }, {
                        key: "getAccounts",
                        value: function getAccounts(cb) {
                            var _this3 = this;

                            return new Promise(function (resolve, reject) {
                                _this3.getCurrentProvider().getAccounts(function (error, accounts) {
                                    if (cb) {
                                        return cb(error, accounts);
                                    }

                                    if (error) {
                                        reject(error);
                                    }

                                    resolve(accounts);
                                });
                            });
                        }
                    }, {
                        key: "deployContractAndLibraries",
                        value: function deployContractAndLibraries(selectedContract, args, contractMetadata, compilerContracts, callbacks, confirmationCb) {
                            var _this4 = this;

                            var continueCb = callbacks.continueCb,
                                promptCb = callbacks.promptCb,
                                statusCb = callbacks.statusCb,
                                finalCb = callbacks.finalCb;
                            var constructor = selectedContract.getConstructorInterface();
                            txFormat.buildData(selectedContract.name, selectedContract.object, compilerContracts, true, constructor, args, function (error, data) {
                                if (error) {
                                    return statusCb("creation of ".concat(selectedContract.name, " errored: ").concat(error.message ? error.message : error));
                                }
                                statusCb("creation of ".concat(selectedContract.name, " pending..."));

                                _this4.createContract(selectedContract, data, continueCb, promptCb, confirmationCb, finalCb);
                            }, statusCb, function (data, runTxCallback) {
                                // called for libraries deployment
                                _this4.runTx(data, confirmationCb, continueCb, promptCb, runTxCallback);
                            });
                        }
                    }, {
                        key: "deployContractWithLibrary",
                        value: function deployContractWithLibrary(selectedContract, args, contractMetadata, compilerContracts, callbacks, confirmationCb) {
                            var _this5 = this;

                            var continueCb = callbacks.continueCb,
                                promptCb = callbacks.promptCb,
                                statusCb = callbacks.statusCb,
                                finalCb = callbacks.finalCb;
                            var constructor = selectedContract.getConstructorInterface();
                            txFormat.encodeConstructorCallAndLinkLibraries(selectedContract.object, args, constructor, contractMetadata.linkReferences, selectedContract.bytecodeLinkReferences, function (error, data) {
                                if (error) {
                                    return statusCb("creation of ".concat(selectedContract.name, " errored: ").concat(error.message ? error.message : error));
                                }
                                statusCb("creation of ".concat(selectedContract.name, " pending..."));

                                _this5.createContract(selectedContract, data, continueCb, promptCb, confirmationCb, finalCb);
                            });
                        }
                    }, {
                        key: "createContract",
                        value: function createContract(selectedContract, data, continueCb, promptCb, confirmationCb, finalCb) {
                            if (data) {
                                data.contractName = selectedContract.name;
                                data.linkReferences = selectedContract.bytecodeLinkReferences;
                                data.contractABI = selectedContract.abi;
                            }

                            this.runTx({
                                data: data,
                                useCall: false
                            }, confirmationCb, continueCb, promptCb, function (error, txResult, address) {
                                if (error) {
                                    return finalCb("creation of ".concat(selectedContract.name, " errored: ").concat(error.message ? error.message : error));
                                }

                                if (txResult.receipt.status === false || txResult.receipt.status === '0x0') {
                                    return finalCb("creation of ".concat(selectedContract.name, " errored: transaction execution failed"));
                                }

                                finalCb(null, selectedContract, address);
                            });
                        }
                    }, {
                        key: "determineGasPrice",
                        value: function determineGasPrice(cb) {
                            var _this6 = this;

                            this.getCurrentProvider().getGasPrice(function (error, gasPrice) {
                                var warnMessage = ' Please fix this issue before sending any transaction. ';

                                if (error) {
                                    return cb('Unable to retrieve the current network gas price.' + warnMessage + error);
                                }

                                try {
                                    var gasPriceValue = _this6.fromWei(gasPrice, false, 'gwei');

                                    cb(null, gasPriceValue);
                                } catch (e) {
                                    cb(warnMessage + e.message, null, false);
                                }
                            });
                        }
                    }, {
                        key: "getInputs",
                        value: function getInputs(funABI) {
                            if (!funABI.inputs) {
                                return '';
                            }

                            return txHelper.inputParametersDeclarationToString(funABI.inputs);
                        }
                    }, {
                        key: "fromWei",
                        value: function fromWei(value, doTypeConversion, unit) {
                            if (doTypeConversion) {
                                return _web["default"].utils.fromWei(typeConversion.toInt(value), unit || 'ether');
                            }

                            return _web["default"].utils.fromWei(value.toString(10), unit || 'ether');
                        }
                    }, {
                        key: "toWei",
                        value: function toWei(value, unit) {
                            return _web["default"].utils.toWei(value, unit || 'gwei');
                        }
                    }, {
                        key: "calculateFee",
                        value: function calculateFee(gas, gasPrice, unit) {
                            return _web["default"].utils.toBN(gas).mul(_web["default"].utils.toBN(_web["default"].utils.toWei(gasPrice.toString(10), unit || 'gwei')));
                        }
                    }, {
                        key: "determineGasFees",
                        value: function determineGasFees(tx) {
                            var _this7 = this;

                            var determineGasFeesCb = function determineGasFeesCb(gasPrice, cb) {
                                var txFeeText, priceStatus; // TODO: this try catch feels like an anti pattern, can/should be
                                // removed, but for now keeping the original logic

                                try {
                                    var fee = _this7.calculateFee(tx.gas, gasPrice);

                                    txFeeText = ' ' + _this7.fromWei(fee, false, 'ether') + ' Ether';
                                    priceStatus = true;
                                } catch (e) {
                                    txFeeText = ' Please fix this issue before sending any transaction. ' + e.message;
                                    priceStatus = false;
                                }

                                cb(txFeeText, priceStatus);
                            };

                            return determineGasFeesCb;
                        }
                    }, {
                        key: "changeExecutionContext",
                        value: function changeExecutionContext(context, confirmCb, infoCb, cb) {
                            return this.executionContext.executionContextChange(context, null, confirmCb, infoCb, cb);
                        }
                    }, {
                        key: "setProviderFromEndpoint",
                        value: function setProviderFromEndpoint(target, context, cb) {
                            return this.executionContext.setProviderFromEndpoint(target, context, cb);
                        }
                    }, {
                        key: "detectNetwork",
                        value: function detectNetwork(cb) {
                            return this.executionContext.detectNetwork(cb);
                        }
                    }, {
                        key: "getProvider",
                        value: function getProvider() {
                            return this.executionContext.getProvider();
                        }
                    }, {
                        key: "getInjectedWeb3Address",
                        value: function getInjectedWeb3Address() {
                            return this.executionContext.getSelectedAddress();
                        }
                        /**
                         * return the fork name applied to the current envionment
                         * @return {String} - fork name
                         */

                    }, {
                        key: "getCurrentFork",
                        value: function getCurrentFork() {
                            return this.executionContext.getCurrentFork();
                        }
                    }, {
                        key: "isWeb3Provider",
                        value: function isWeb3Provider() {
                            var isVM = this.getProvider() === 'vm';
                            var isInjected = this.getProvider() === 'injected';
                            return !isVM && !isInjected;
                        }
                    }, {
                        key: "isInjectedWeb3",
                        value: function isInjectedWeb3() {
                            return this.getProvider() === 'injected';
                        }
                    }, {
                        key: "signMessage",
                        value: function signMessage(message, account, passphrase, cb) {
                            this.getCurrentProvider().signMessage(message, account, passphrase, cb);
                        }
                    }, {
                        key: "web3",
                        value: function web3() {
                            // @todo(https://github.com/ethereum/remix-project/issues/431)
                            var isVM = this.getProvider() === 'vm';

                            if (isVM) {
                                return this.providers.vm.web3;
                            }

                            return this.executionContext.web3();
                        }
                    }, {
                        key: "getTxListener",
                        value: function getTxListener(opts) {
                            opts.event = {
                                // udapp: this.udapp.event
                                udapp: this.event
                            };
                            var txlistener = new Txlistener(opts, this.executionContext);
                            return txlistener;
                        }
                    }, {
                        key: "runOrCallContractMethod",
                        value: function runOrCallContractMethod(contractName, contractAbi, funABI, contract, value, address, callType, lookupOnly, logMsg, logCallback, outputCb, confirmationCb, continueCb, promptCb) {
                            var _this8 = this;

                            // contractsDetails is used to resolve libraries
                            txFormat.buildData(contractName, contractAbi, {}, false, funABI, callType, function (error, data) {
                                if (error) {
                                    return logCallback("".concat(logMsg, " errored: ").concat(error.message ? error.message : error));
                                }

                                if (!lookupOnly) {
                                    logCallback("".concat(logMsg, " pending ... "));
                                } else {
                                    logCallback("".concat(logMsg));
                                }

                                if (funABI.type === 'fallback') {
                                    data.dataHex = value;
                                }

                                if (data) {
                                    data.contractName = contractName;
                                    data.contractABI = contractAbi;
                                    data.contract = contract;
                                }

                                var useCall = funABI.stateMutability === 'view' || funABI.stateMutability === 'pure';

                                _this8.runTx({
                                    to: address,
                                    data: data,
                                    useCall: useCall
                                }, confirmationCb, continueCb, promptCb, function (error, txResult, _address, returnValue) {
                                    if (error) {
                                        return logCallback("".concat(logMsg, " errored: ").concat(error.message ? error.message : error));
                                    }

                                    if (lookupOnly) {
                                        outputCb(returnValue);
                                    }
                                });
                            }, function (msg) {
                                logCallback(msg);
                            }, function (data, runTxCallback) {
                                // called for libraries deployment
                                _this8.runTx(data, confirmationCb, runTxCallback, promptCb, function () {
                                });
                            });
                        }
                    }, {
                        key: "context",
                        value: function context() {
                            return this.executionContext.isVM() ? 'memory' : 'blockchain';
                        } // NOTE: the config is only needed because exectuionContext.init does
                        // if config.get('settings/always-use-vm'), we can simplify this later

                    }, {
                        key: "resetAndInit",
                        value: function resetAndInit(config, transactionContextAPI) {
                            this.transactionContextAPI = transactionContextAPI;
                            this.executionContext.init(config);
                            this.executionContext.stopListenOnLastBlock();
                            this.executionContext.listenOnLastBlock();
                            this.resetEnvironment();
                        }
                    }, {
                        key: "addProvider",
                        value: function addProvider(provider) {
                            this.executionContext.addProvider(provider);
                        }
                    }, {
                        key: "removeProvider",
                        value: function removeProvider(name) {
                            this.executionContext.removeProvider(name);
                        } // TODO : event should be triggered by Udapp instead of TxListener

                        /** Listen on New Transaction. (Cannot be done inside constructor because txlistener doesn't exist yet) */

                    }, {
                        key: "startListening",
                        value: function startListening(txlistener) {
                            var _this9 = this;

                            txlistener.event.register('newTransaction', function (tx, receipt) {
                                _this9.events.emit('newTransaction', tx, receipt);
                            });
                        }
                    }, {
                        key: "resetEnvironment",
                        value: function resetEnvironment() {
                            var _this10 = this;

                            this.getCurrentProvider().resetEnvironment(); // TODO: most params here can be refactored away in txRunner

                            var web3Runner = new TxRunnerWeb3({
                                config: this.config,
                                detectNetwork: function detectNetwork(cb) {
                                    _this10.executionContext.detectNetwork(cb);
                                },
                                isVM: function isVM() {
                                    return _this10.executionContext.isVM();
                                },
                                personalMode: function personalMode() {
                                    return _this10.getProvider() === 'web3' ? _this10.config.get('settings/personal-mode') : false;
                                }
                            }, function (_) {
                                return _this10.executionContext.web3();
                            }, function (_) {
                                return _this10.executionContext.currentblockGasLimit();
                            });
                            web3Runner.event.register('transactionBroadcasted', function (txhash) {
                                _this10.executionContext.detectNetwork(function (error, network) {
                                    if (error || !network) {
                                        return;
                                    }
                                    if (network.name === 'VM') {
                                        return;
                                    }

                                    _this10.call('terminal', 'logHtml', /*#__PURE__*/_react["default"].createElement("a", {
                                        href: (0, _helper.etherScanLink)(network.name, txhash),
                                        target: "_blank"
                                    }, "view on etherscan"));
                                });
                            });
                            this.txRunner = new TxRunner(web3Runner, {
                                runAsync: true
                            });
                        }
                        /**
                         * Create a VM Account
                         * @param {{privateKey: string, balance: string}} newAccount The new account to create
                         */

                    }, {
                        key: "createVMAccount",
                        value: function createVMAccount(newAccount) {
                            if (this.getProvider() !== 'vm') {
                                throw new Error('plugin API does not allow creating a new account through web3 connection. Only vm mode is allowed');
                            }

                            return this.providers.vm.createVMAccount(newAccount);
                        }
                    }, {
                        key: "newAccount",
                        value: function newAccount(_password, passwordPromptCb, cb) {
                            return this.getCurrentProvider().newAccount(passwordPromptCb, cb);
                        }
                        /** Get the balance of an address, and convert wei to ether */

                    }, {
                        key: "getBalanceInEther",
                        value: function getBalanceInEther(address, cb) {
                            this.getCurrentProvider().getBalanceInEther(address, cb);
                        }
                    }, {
                        key: "pendingTransactionsCount",
                        value: function pendingTransactionsCount() {
                            return Object.keys(this.txRunner.pendingTxs).length;
                        }
                        /**
                         * This function send a tx only to javascript VM or testnet, will return an error for the mainnet
                         * SHOULD BE TAKEN CAREFULLY!
                         *
                         * @param {Object} tx    - transaction.
                         */

                    }, {
                        key: "sendTransaction",
                        value: function sendTransaction(tx) {
                            var _this11 = this;

                            return new Promise(function (resolve, reject) {
                                _this11.executionContext.detectNetwork(function (error, network) {
                                    if (error) {
                                        return reject(error);
                                    }

                                    if (network.name === 'Main' && network.id === '1') {
                                        return reject(new Error('It is not allowed to make this action against mainnet'));
                                    }

                                    _this11.txRunner.rawRun(tx, function (network, tx, gasEstimation, continueTxExecution, cancelCb) {
                                        continueTxExecution();
                                    }, function (error, continueTxExecution, cancelCb) {
                                        if (error) {
                                            reject(error);
                                        } else {
                                            continueTxExecution();
                                        }
                                    }, function (okCb, cancelCb) {
                                        okCb();
                                    }, /*#__PURE__*/function () {
                                        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(error, result) {
                                            var execResult;
                                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                                while (1) {
                                                    switch (_context.prev = _context.next) {
                                                        case 0:
                                                            if (!error) {
                                                                _context.next = 2;
                                                                break;
                                                            }

                                                            return _context.abrupt("return", reject(error));

                                                        case 2:
                                                            _context.prev = 2;
                                                            _context.next = 5;
                                                            return _this11.web3().eth.getExecutionResultFromSimulator(result.transactionHash);

                                                        case 5:
                                                            execResult = _context.sent;
                                                            resolve(resultToRemixTx(result, execResult));
                                                            _context.next = 12;
                                                            break;

                                                        case 9:
                                                            _context.prev = 9;
                                                            _context.t0 = _context["catch"](2);
                                                            reject(_context.t0);

                                                        case 12:
                                                        case "end":
                                                            return _context.stop();
                                                    }
                                                }
                                            }, _callee, null, [[2, 9]]);
                                        }));

                                        return function (_x, _x2) {
                                            return _ref.apply(this, arguments);
                                        };
                                    }());
                                });
                            });
                        }
                    }, {
                        key: "runTx",
                        value: function runTx(args, confirmationCb, continueCb, promptCb, cb) {
                            var _this12 = this;

                            var self = this;
                            (0, _async.waterfall)([
                                function getGasLimit(next) {
                                    if (self.transactionContextAPI.getGasLimit) {
                                        return self.transactionContextAPI.getGasLimit(next);
                                    }

                                    next(null, 3000000);
                                }, function queryValue(gasLimit, next) {
                                    if (args.value) {
                                        return next(null, args.value, gasLimit);
                                    }

                                    if (args.useCall || !self.transactionContextAPI.getValue) {
                                        return next(null, 0, gasLimit);
                                    }

                                    self.transactionContextAPI.getValue(function (err, value) {
                                        next(err, value, gasLimit);
                                    });
                                }, function getAccount(value, gasLimit, next) {
                                    if (args.from) {
                                        return next(null, args.from, value, gasLimit);
                                    }

                                    if (self.transactionContextAPI.getAddress) {
                                        return self.transactionContextAPI.getAddress(function (err, address) {
                                            next(err, address, value, gasLimit);
                                        });
                                    }

                                    self.getAccounts(function (err, accounts) {
                                        var address = accounts[0];
                                        if (err) {
                                            return next(err);
                                        }
                                        if (!address) {
                                            return next('No accounts available');
                                        } // if (self.executionContext.isVM() && !self.providers.vm.accounts[address]) {

                                        if (self.executionContext.isVM() && !self.providers.vm.RemixSimulatorProvider.Accounts.accounts[address]) {
                                            return next('Invalid account selected');
                                        }

                                        next(null, address, value, gasLimit);
                                    });
                                }, function runTransaction(fromAddress, value, gasLimit, next) {
                                    var tx = {
                                        to: args.to,
                                        data: args.data.dataHex,
                                        useCall: args.useCall,
                                        from: fromAddress,
                                        value: value,
                                        gasLimit: gasLimit,
                                        timestamp: args.data.timestamp
                                    };
                                    var payLoad = {
                                        funAbi: args.data.funAbi,
                                        funArgs: args.data.funArgs,
                                        contractBytecode: args.data.contractBytecode,
                                        contractName: args.data.contractName,
                                        contractABI: args.data.contractABI,
                                        linkReferences: args.data.linkReferences
                                    };
                                    if (!tx.timestamp) {
                                        tx.timestamp = Date.now();
                                    }
                                    var timestamp = tx.timestamp;
                                    self.event.trigger('initiatingTransaction', [timestamp, tx, payLoad]);
                                    self.txRunner.rawRun(tx, confirmationCb, continueCb, promptCb, /*#__PURE__*/function () {
                                        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(error, result) {
                                            var isVM, eventName;
                                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                                while (1) {
                                                    switch (_context2.prev = _context2.next) {
                                                        case 0:
                                                            if (!error) {
                                                                _context2.next = 2;
                                                                break;
                                                            }

                                                            return _context2.abrupt("return", next(error));

                                                        case 2:
                                                            isVM = self.executionContext.isVM();

                                                            if (!(isVM && tx.useCall)) {
                                                                _context2.next = 13;
                                                                break;
                                                            }

                                                            _context2.prev = 4;
                                                            _context2.next = 7;
                                                            return self.web3().eth.getHashFromTagBySimulator(timestamp);

                                                        case 7:
                                                            result.transactionHash = _context2.sent;
                                                            _context2.next = 13;
                                                            break;

                                                        case 10:
                                                            _context2.prev = 10;
                                                            _context2.t0 = _context2["catch"](4);
                                                            console.log('unable to retrieve back the "call" hash', _context2.t0);

                                                        case 13:
                                                            eventName = tx.useCall ? 'callExecuted' : 'transactionExecuted';
                                                            self.event.trigger(eventName, [error, tx.from, tx.to, tx.data, tx.useCall, result, timestamp, payLoad]);

                                                            if (error && typeof error !== 'string') {
                                                                if (error.message) {
                                                                    error = error.message;
                                                                } else {
                                                                    try {
                                                                        error = 'error: ' + JSON.stringify(error);
                                                                    } catch (e) {
                                                                    }
                                                                }
                                                            }

                                                            next(error, result, tx);

                                                        case 17:
                                                        case "end":
                                                            return _context2.stop();
                                                    }
                                                }
                                            }, _callee2, null, [[4, 10]]);
                                        }));

                                        return function (_x3, _x4) {
                                            return _ref2.apply(this, arguments);
                                        };
                                    }());
                                }
                            ], /*#__PURE__*/function () {
                                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(error, txResult, tx) {
                                    var isVM, execResult, returnValue, hhlogs, finalLogs, _iterator, _step, log,
                                        formattedLog, compiledContracts, vmError, address;

                                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                        while (1) {
                                            switch (_context3.prev = _context3.next) {
                                                case 0:
                                                    if (!error) {
                                                        _context3.next = 2;
                                                        break;
                                                    }

                                                    return _context3.abrupt("return", cb(error));

                                                case 2:
                                                    /*
                  value of txResult is inconsistent:
                      - transact to contract:
                        {"receipt": { ... }, "tx":{ ... }, "transactionHash":"0x7ba4c05075210fdbcf4e6660258379db5cc559e15703f9ac6f970a320c2dee09"}
                      - call to contract:
                        {"result":"0x0000000000000000000000000000000000000000000000000000000000000000","transactionHash":"0x5236a76152054a8aad0c7135bcc151f03bccb773be88fbf4823184e47fc76247"}
                  */
                                                    isVM = _this12.executionContext.isVM();
                                                    returnValue = null;

                                                    if (!isVM) {
                                                        _context3.next = 20;
                                                        break;
                                                    }

                                                    _context3.next = 7;
                                                    return _this12.web3().eth.getHHLogsForTx(txResult.transactionHash);

                                                case 7:
                                                    hhlogs = _context3.sent;

                                                    if (hhlogs && hhlogs.length) {
                                                        finalLogs = '<b>console.log:</b>\n';
                                                        _iterator = _createForOfIteratorHelper(hhlogs);

                                                        try {
                                                            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                                                                log = _step.value;
                                                                formattedLog = void 0; // Hardhat implements the same formatting options that can be found in Node.js' console.log,
                                                                // which in turn uses util.format: https://nodejs.org/dist/latest-v12.x/docs/api/util.html#util_util_format_format_args
                                                                // For example: console.log("Name: %s, Age: %d", remix, 6) will log 'Name: remix, Age: 6'
                                                                // We check first arg to determine if 'util.format' is needed

                                                                if (typeof log[0] === 'string' && (log[0].includes('%s') || log[0].includes('%d'))) {
                                                                    formattedLog = _util.format.apply(void 0, [log[0]].concat(_toConsumableArray(log.slice(1))));
                                                                } else {
                                                                    formattedLog = log.join(' ');
                                                                }

                                                                finalLogs = finalLogs + '&emsp;' + formattedLog + '\n';
                                                            }
                                                        } catch (err) {
                                                            _iterator.e(err);
                                                        } finally {
                                                            _iterator.f();
                                                        }

                                                        _paq.push(['trackEvent', 'udapp', 'hardhat', 'console.log']);

                                                        _this12.call('terminal', 'log', {
                                                            type: 'info',
                                                            value: finalLogs
                                                        });
                                                    }

                                                    _context3.next = 11;
                                                    return _this12.web3().eth.getExecutionResultFromSimulator(txResult.transactionHash);

                                                case 11:
                                                    execResult = _context3.sent;

                                                    if (!execResult) {
                                                        _context3.next = 20;
                                                        break;
                                                    }

                                                    // if it's not the VM, we don't have return value. We only have the transaction, and it does not contain the return value.
                                                    returnValue = execResult ? execResult.returnValue : (0, _ethereumjsUtil.toBuffer)((0, _ethereumjsUtil.addHexPrefix)(txResult.result) || '0x0000000000000000000000000000000000000000000000000000000000000000');
                                                    _context3.next = 16;
                                                    return _this12.call('compilerArtefacts', 'getAllContractDatas');

                                                case 16:
                                                    compiledContracts = _context3.sent;
                                                    vmError = txExecution.checkVMError(execResult, compiledContracts);

                                                    if (!vmError.error) {
                                                        _context3.next = 20;
                                                        break;
                                                    }

                                                    return _context3.abrupt("return", cb(vmError.message));

                                                case 20:
                                                    if (!isVM && tx && tx.useCall) {
                                                        returnValue = (0, _ethereumjsUtil.toBuffer)((0, _ethereumjsUtil.addHexPrefix)(txResult.result));
                                                    }

                                                    address = null;

                                                    if (txResult && txResult.receipt) {
                                                        address = txResult.receipt.contractAddress;
                                                    }

                                                    cb(error, txResult, address, returnValue);

                                                case 24:
                                                case "end":
                                                    return _context3.stop();
                                            }
                                        }
                                    }, _callee3);
                                }));

                                return function (_x5, _x6, _x7) {
                                    return _ref3.apply(this, arguments);
                                };
                            }());
                        }
                    }
                ]);

                return Blockchain;
            }(_engine.Plugin);

            exports.Blockchain = Blockchain;

            /***/
        }),

        /***/ 1802:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* global ethereum */


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ExecutionContext = void 0;

            var _web2 = _interopRequireDefault(__webpack_require__(521));

            var _remixLib = __webpack_require__(508);

            var _events = _interopRequireDefault(__webpack_require__(620));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            var _web;

            if (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {
                var injectedProvider = window.ethereum;
                _web = new _web2["default"](injectedProvider);
            } else {
                _web = new _web2["default"](new _web2["default"].providers.HttpProvider('http://localhost:8545'));
            }
            /*
  trigger contextChanged, web3EndpointChanged
*/


            var ExecutionContext = /*#__PURE__*/function () {
                function ExecutionContext() {
                    _classCallCheck(this, ExecutionContext);

                    this.event = new _events["default"]();
                    this.executionContext = null;
                    this.lastBlock = null;
                    this.blockGasLimitDefault = 4300000;
                    this.blockGasLimit = this.blockGasLimitDefault;
                    this.currentFork = 'london';
                    this.mainNetGenesisHash = '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3';
                    this.customNetWorks = {};
                    this.blocks = {};
                    this.latestBlockNumber = 0;
                    this.txs = {};
                    this.customWeb3 = {}; // mapping between a context name and a web3.js instance
                }

                _createClass(ExecutionContext, [
                    {
                        key: "init",
                        value: function init(config) {
                            if (config.get('settings/always-use-vm')) {
                                this.executionContext = 'vm';
                            } else {
                                this.executionContext = injectedProvider ? 'injected' : 'vm';
                                if (this.executionContext === 'injected') {

                                    this.askPermission();
                                }
                            }
                        }
                    }, {
                        key: "askPermission",
                        value: function askPermission() {
                            // metamask
                            if (ethereum && typeof ethereum.enable === 'function') {
                                ethereum.enable();
                            }
                        }
                    }, {
                        key: "getProvider",
                        value: function getProvider() {
                            return this.executionContext;
                        }
                    }, {
                        key: "getSelectedAddress",
                        value: function getSelectedAddress() {
                            return injectedProvider ? injectedProvider.selectedAddress : null;
                        }
                    }, {
                        key: "getCurrentFork",
                        value: function getCurrentFork() {
                            return this.currentFork;
                        }
                    }, {
                        key: "isVM",
                        value: function isVM() {
                            return this.executionContext === 'vm';
                        }
                    }, {
                        key: "setWeb3",
                        value: function setWeb3(context, web3) {
                            this.customWeb3[context] = web3;
                        }
                    }, {
                        key: "web3",
                        value: function web3() {
                            if (this.customWeb3[this.executionContext]) {
                                return this.customWeb3[this.executionContext];
                            }
                            return _web;
                        }
                    }, {
                        key: "detectNetwork",
                        value: function detectNetwork(callback) {
                            var _this = this;

                            if (this.isVM()) {
                                callback(null, {
                                    id: '-',
                                    name: 'VM'
                                });
                            } else {
                                _web.eth.net.getId(function (err, id) {
                                    var name = null;
                                    if (err) {
                                        name = 'Unknown';
                                    }// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md
                                    else if (id === 1) {
                                        name = 'Main';
                                    } else if (id === 3) {
                                        name = 'Ropsten';
                                    } else if (id === 4) {
                                        name = 'Rinkeby';
                                    } else if (id === 5) {
                                        name = 'Goerli';
                                    } else if (id === 42) {
                                        name = 'Kovan';
                                    } else {
                                        name = 'Custom';
                                    }

                                    if (id === '1') {
                                        _web.eth.getBlock(0, function (error, block) {
                                            if (error) {
                                                console.log('cant query first block');
                                            }
                                            if (block && block.hash !== _this.mainNetGenesisHash) {
                                                name = 'Custom';
                                            }
                                            callback(err, {
                                                id: id,
                                                name: name,
                                                lastBlock: _this.lastBlock,
                                                currentFork: _this.currentFork
                                            });
                                        });
                                    } else {
                                        callback(err, {
                                            id: id,
                                            name: name,
                                            lastBlock: _this.lastBlock,
                                            currentFork: _this.currentFork
                                        });
                                    }
                                });
                            }
                        }
                    }, {
                        key: "removeProvider",
                        value: function removeProvider(name) {
                            if (name && this.customNetWorks[name]) {
                                if (this.executionContext === name) {
                                    this.setContext('vm', null, null, null);
                                }
                                delete this.customNetWorks[name];
                                this.event.trigger('removeProvider', [name]);
                            }
                        }
                    }, {
                        key: "addProvider",
                        value: function addProvider(network) {
                            if (network && network.name && !this.customNetWorks[network.name]) {
                                this.customNetWorks[network.name] = network;
                                this.event.trigger('addProvider', [network]);
                            }
                        }
                    }, {
                        key: "internalWeb3",
                        value: function internalWeb3() {
                            return _web;
                        }
                    }, {
                        key: "blankWeb3",
                        value: function blankWeb3() {
                            return new _web2["default"]();
                        }
                    }, {
                        key: "setContext",
                        value: function setContext(context, endPointUrl, confirmCb, infoCb) {
                            this.executionContext = context;
                            this.executionContextChange(context, endPointUrl, confirmCb, infoCb, null);
                        }
                    }, {
                        key: "executionContextChange",
                        value: function () {
                            var _executionContextChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value, endPointUrl, confirmCb, infoCb, cb) {
                                var context, network;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                context = value.context;
                                                if (!cb) {
                                                    cb = function cb() {
                                                    };
                                                }
                                                if (!confirmCb) {
                                                    confirmCb = function confirmCb() {
                                                    };
                                                }
                                                if (!infoCb) {
                                                    infoCb = function infoCb() {
                                                    };
                                                }

                                                if (!(context === 'vm')) {
                                                    _context.next = 9;
                                                    break;
                                                }

                                                this.executionContext = context;
                                                this.currentFork = value.fork;
                                                this.event.trigger('contextChanged', ['vm']);
                                                return _context.abrupt("return", cb());

                                            case 9:
                                                if (!(context === 'injected')) {
                                                    _context.next = 22;
                                                    break;
                                                }

                                                if (!(injectedProvider === undefined)) {
                                                    _context.next = 15;
                                                    break;
                                                }

                                                infoCb('No injected Web3 provider found. Make sure your provider (e.g. MetaMask) is active and running (when recently activated you may have to reload the page).');
                                                return _context.abrupt("return", cb());

                                            case 15:
                                                this.askPermission();
                                                this.executionContext = context;

                                                _web.setProvider(injectedProvider);

                                                _context.next = 20;
                                                return this._updateChainContext();

                                            case 20:
                                                this.event.trigger('contextChanged', ['injected']);
                                                return _context.abrupt("return", cb());

                                            case 22:
                                                if (context === 'web3') {
                                                    confirmCb(cb);
                                                }

                                                if (this.customNetWorks[context]) {
                                                    network = this.customNetWorks[context];
                                                    this.setProviderFromEndpoint(network.provider, {
                                                        context: network.name
                                                    }, function (error) {
                                                        if (error) {
                                                            infoCb(error);
                                                        }
                                                        cb();
                                                    });
                                                }

                                            case 24:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function executionContextChange(_x, _x2, _x3, _x4, _x5) {
                                return _executionContextChange.apply(this, arguments);
                            }

                            return executionContextChange;
                        }()
                    }, {
                        key: "currentblockGasLimit",
                        value: function currentblockGasLimit() {
                            return this.blockGasLimit;
                        }
                    }, {
                        key: "stopListenOnLastBlock",
                        value: function stopListenOnLastBlock() {
                            if (this.listenOnLastBlockId) {
                                clearInterval(this.listenOnLastBlockId);
                            }
                            this.listenOnLastBlockId = null;
                        }
                    }, {
                        key: "_updateChainContext",
                        value: function () {
                            var _updateChainContext2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                var block;
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                if (!(this.getProvider() !== 'vm')) {
                                                    _context2.next = 27;
                                                    break;
                                                }

                                                _context2.prev = 1;
                                                _context2.next = 4;
                                                return _web.eth.getBlock('latest');

                                            case 4:
                                                block = _context2.sent;
                                                // we can't use the blockGasLimit cause the next blocks could have a lower limit : https://github.com/ethereum/remix/issues/506
                                                this.blockGasLimit = block && block.gasLimit ? Math.floor(block.gasLimit - 5 * block.gasLimit / 1024) : this.blockGasLimitDefault;
                                                this.lastBlock = block;
                                                _context2.prev = 7;
                                                _context2.t0 = _remixLib.execution;
                                                _context2.next = 11;
                                                return _web.eth.net.getId();

                                            case 11:
                                                _context2.t1 = _context2.sent;
                                                _context2.t2 = block.number;
                                                this.currentFork = _context2.t0.forkAt.call(_context2.t0, _context2.t1, _context2.t2);
                                                _context2.next = 21;
                                                break;

                                            case 16:
                                                _context2.prev = 16;
                                                _context2.t3 = _context2["catch"](7);
                                                this.currentFork = 'london';
                                                console.log("unable to detect fork, defaulting to ".concat(this.currentFork, ".."));
                                                console.error(_context2.t3);

                                            case 21:
                                                _context2.next = 27;
                                                break;

                                            case 23:
                                                _context2.prev = 23;
                                                _context2.t4 = _context2["catch"](1);
                                                console.error(_context2.t4);
                                                this.blockGasLimit = this.blockGasLimitDefault;

                                            case 27:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this, [[1, 23], [7, 16]]);
                            }));

                            function _updateChainContext() {
                                return _updateChainContext2.apply(this, arguments);
                            }

                            return _updateChainContext;
                        }()
                    }, {
                        key: "listenOnLastBlock",
                        value: function listenOnLastBlock() {
                            var _this2 = this;

                            this.listenOnLastBlockId = setInterval(function () {
                                _this2._updateChainContext();
                            }, 15000);
                        } // TODO: remove this when this function is moved

                    }, {
                        key: "setProviderFromEndpoint",
                        value: function setProviderFromEndpoint(endpoint, value, cb) {
                            var _this3 = this;

                            var oldProvider = _web.currentProvider;
                            var context = value.context;

                            _web.setProvider(endpoint);

                            _web.eth.net.isListening(function (err, isConnected) {
                                if (!err && isConnected === true) {
                                    _this3.executionContext = context;

                                    _this3._updateChainContext();

                                    _this3.event.trigger('contextChanged', [context]);

                                    _this3.event.trigger('web3EndpointChanged');

                                    cb();
                                } else if (isConnected === 'canceled') {
                                    _web.setProvider(oldProvider);

                                    cb();
                                } else {
                                    _web.setProvider(oldProvider);

                                    cb('Not possible to connect to the Web3 provider. Make sure the provider is running, a connection is open (via IPC or RPC) or that the provider plugin is properly configured.');
                                }
                            });
                        }
                    }, {
                        key: "txDetailsLink",
                        value: function txDetailsLink(network, hash) {
                            var transactionDetailsLinks = {
                                Main: 'https://www.etherscan.io/tx/',
                                Rinkeby: 'https://rinkeby.etherscan.io/tx/',
                                Ropsten: 'https://ropsten.etherscan.io/tx/',
                                Kovan: 'https://kovan.etherscan.io/tx/',
                                Goerli: 'https://goerli.etherscan.io/tx/'
                            };

                            if (transactionDetailsLinks[network]) {
                                return transactionDetailsLinks[network] + hash;
                            }
                        }
                    }
                ]);

                return ExecutionContext;
            }();

            exports.ExecutionContext = ExecutionContext;

            /***/
        }),

        /***/ 1803:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            descriptor.writable = true;
                        }
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) {
                        _defineProperties(Constructor.prototype, protoProps);
                    }
                    if (staticProps) {
                        _defineProperties(Constructor, staticProps);
                    }
                    return Constructor;
                }

                var Web3 = __webpack_require__(521);

                var _require = __webpack_require__(493),
                    BN = _require.BN,
                    privateToAddress = _require.privateToAddress,
                    hashPersonalMessage = _require.hashPersonalMessage;

                var _require2 = __webpack_require__(1026),
                    Provider = _require2.Provider,
                    extend = _require2.extend;

                var VMProvider = /*#__PURE__*/function () {
                    function VMProvider(executionContext) {
                        _classCallCheck(this, VMProvider);

                        this.executionContext = executionContext;
                    }

                    _createClass(VMProvider, [
                        {
                            key: "getAccounts",
                            value: function getAccounts(cb) {
                                this.web3.eth.getAccounts(function (err, accounts) {
                                    if (err) {
                                        return cb('No accounts?');
                                    }

                                    return cb(null, accounts);
                                });
                            }
                        }, {
                            key: "resetEnvironment",
                            value: function resetEnvironment() {
                                this.accounts = {};
                                this.RemixSimulatorProvider = new Provider({
                                    fork: this.executionContext.getCurrentFork()
                                });
                                this.RemixSimulatorProvider.init();
                                this.web3 = new Web3(this.RemixSimulatorProvider);
                                extend(this.web3);
                                this.accounts = {};
                                this.executionContext.setWeb3('vm', this.web3);
                            } // TODO: is still here because of the plugin API
                            // can be removed later when we update the API

                        }, {
                            key: "createVMAccount",
                            value: function createVMAccount(newAccount) {
                                var privateKey = newAccount.privateKey,
                                    balance = newAccount.balance;

                                this.RemixSimulatorProvider.Accounts._addAccount(privateKey, balance);

                                var privKey = Buffer.from(privateKey, 'hex');
                                return '0x' + privateToAddress(privKey).toString('hex');
                            }
                        }, {
                            key: "newAccount",
                            value: function newAccount(_passwordPromptCb, cb) {
                                this.RemixSimulatorProvider.Accounts.newAccount(cb);
                            }
                        }, {
                            key: "getBalanceInEther",
                            value: function getBalanceInEther(address, cb) {
                                this.web3.eth.getBalance(address, function (err, res) {
                                    if (err) {
                                        return cb(err);
                                    }

                                    cb(null, Web3.utils.fromWei(new BN(res).toString(10), 'ether'));
                                });
                            }
                        }, {
                            key: "getGasPrice",
                            value: function getGasPrice(cb) {
                                this.web3.eth.getGasPrice(cb);
                            }
                        }, {
                            key: "signMessage",
                            value: function signMessage(message, account, _passphrase, cb) {
                                var messageHash = hashPersonalMessage(Buffer.from(message));
                                this.web3.eth.sign(message, account, function (error, signedData) {
                                    if (error) {
                                        return cb(error);
                                    }

                                    cb(null, '0x' + messageHash.toString('hex'), signedData);
                                });
                            }
                        }, {
                            key: "getProvider",
                            value: function getProvider() {
                                return 'vm';
                            }
                        }
                    ]);

                    return VMProvider;
                }();

                module.exports = VMProvider;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1804:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.extend = exports.Provider = void 0;

            const tslib_1 = __webpack_require__(494);

            const blocks_1 = __webpack_require__(1805);

            const logs_1 = __webpack_require__(1806);

            const merge_1 = (0, tslib_1.__importDefault)(__webpack_require__(1809));

            const accounts_1 = __webpack_require__(1810);

            const filters_1 = __webpack_require__(1811);

            const misc_1 = __webpack_require__(1812);

            const net_1 = __webpack_require__(1814);

            const transactions_1 = __webpack_require__(1815);

            const debug_1 = __webpack_require__(1817);

            const genesis_1 = __webpack_require__(1818);

            const vm_context_1 = __webpack_require__(1819);

            class Provider {
                constructor(options = {}) {
                    this.options = options;
                    this.connected = true;
                    this.vmContext = new vm_context_1.VMContext(options['fork']);
                    this.Accounts = new accounts_1.Accounts(this.vmContext);
                    this.Transactions = new transactions_1.Transactions(this.vmContext);
                    this.methods = {};
                    this.methods = (0, merge_1.default)(this.methods, this.Accounts.methods());
                    this.methods = (0, merge_1.default)(this.methods, new blocks_1.Blocks(this.vmContext, options).methods());
                    this.methods = (0, merge_1.default)(this.methods, (0, misc_1.methods)());
                    this.methods = (0, merge_1.default)(this.methods, new filters_1.Filters(this.vmContext).methods());
                    this.methods = (0, merge_1.default)(this.methods, (0, net_1.methods)());
                    this.methods = (0, merge_1.default)(this.methods, this.Transactions.methods());
                    this.methods = (0, merge_1.default)(this.methods, new debug_1.Debug(this.vmContext).methods());
                }

                init() {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        yield (0, genesis_1.generateBlock)(this.vmContext);
                        yield this.Accounts.resetAccounts();
                        this.Transactions.init(this.Accounts.accounts);
                    });
                }

                sendAsync(payload, callback) {
                    // log.info('payload method is ', payload.method) // commented because, this floods the IDE console
                    const method = this.methods[payload.method];

                    if (this.options.logDetails) {
                        (0, logs_1.info)(payload);
                    }

                    if (method) {
                        return method.call(method, payload, (err, result) => {
                            if (this.options.logDetails) {
                                (0, logs_1.info)(err);
                                (0, logs_1.info)(result);
                            }

                            if (err) {
                                return callback(err);
                            }

                            const response = {
                                id: payload.id,
                                jsonrpc: '2.0',
                                result: result
                            };
                            callback(null, response);
                        });
                    }

                    callback(new Error('unknown method ' + payload.method));
                }

                send(payload, callback) {
                    this.sendAsync(payload, callback || function () {
                    });
                }

                isConnected() {
                    return true;
                }

                disconnect() {
                    return false;
                }

                supportsSubscriptions() {
                    return true;
                }

                on(type, cb) {
                    this.vmContext.logsManager.addListener(type, cb);
                }

            }

            exports.Provider = Provider;

            function extend(web3) {
                if (!web3.extend) {
                    return;
                } // DEBUG


                const methods = [];

                if (!(web3.eth && web3.eth.getExecutionResultFromSimulator)) {
                    methods.push(new web3.extend.Method({
                        name: 'getExecutionResultFromSimulator',
                        call: 'eth_getExecutionResultFromSimulator',
                        inputFormatter: [null],
                        params: 1
                    }));
                }

                if (!(web3.eth && web3.eth.getHHLogsForTx)) {
                    methods.push(new web3.extend.Method({
                        name: 'getHHLogsForTx',
                        call: 'eth_getHHLogsForTx',
                        inputFormatter: [null],
                        params: 1
                    }));
                }

                if (!(web3.eth && web3.eth.getHashFromTagBySimulator)) {
                    methods.push(new web3.extend.Method({
                        name: 'getHashFromTagBySimulator',
                        call: 'eth_getHashFromTagBySimulator',
                        inputFormatter: [null],
                        params: 1
                    }));
                }

                if (methods.length > 0) {
                    web3.extend({
                        property: 'eth',
                        methods: methods,
                        properties: []
                    });
                }
            }

            exports.extend = extend;

            /***/
        }),

        /***/ 1805:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Blocks = void 0;

            class Blocks {
                constructor(vmContext, _options) {
                    this.vmContext = vmContext;
                    const options = _options || {};
                    this.coinbase = options.coinbase || '0x0000000000000000000000000000000000000000';
                }

                methods() {
                    return {
                        eth_getBlockByNumber: this.eth_getBlockByNumber.bind(this),
                        eth_gasPrice: this.eth_gasPrice.bind(this),
                        eth_coinbase: this.eth_coinbase.bind(this),
                        eth_blockNumber: this.eth_blockNumber.bind(this),
                        eth_getBlockByHash: this.eth_getBlockByHash.bind(this),
                        eth_getBlockTransactionCountByHash: this.eth_getBlockTransactionCountByHash.bind(this),
                        eth_getBlockTransactionCountByNumber: this.eth_getBlockTransactionCountByNumber.bind(this),
                        eth_getUncleCountByBlockHash: this.eth_getUncleCountByBlockHash.bind(this),
                        eth_getUncleCountByBlockNumber: this.eth_getUncleCountByBlockNumber.bind(this),
                        eth_getStorageAt: this.eth_getStorageAt.bind(this)
                    };
                }

                eth_getBlockByNumber(payload, cb) {
                    let blockIndex = payload.params[0];

                    if (blockIndex === 'latest') {
                        blockIndex = this.vmContext.latestBlockNumber;
                    }

                    if (Number.isInteger(blockIndex)) {
                        blockIndex = '0x' + blockIndex.toString(16);
                    }

                    const block = this.vmContext.blocks[blockIndex];

                    if (!block) {
                        return cb(new Error('block not found'));
                    }

                    const b = {
                        baseFeePerGas: '0x01',
                        number: this.toHex(block.header.number),
                        hash: this.toHex(block.hash()),
                        parentHash: this.toHex(block.header.parentHash),
                        nonce: this.toHex(block.header.nonce),
                        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
                        logsBloom: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331',
                        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
                        stateRoot: this.toHex(block.header.stateRoot),
                        miner: this.coinbase,
                        difficulty: this.toHex(block.header.difficulty),
                        totalDifficulty: this.toHex(block.header.totalDifficulty),
                        extraData: this.toHex(block.header.extraData),
                        size: '0x027f07',
                        gasLimit: this.toHex(block.header.gasLimit),
                        gasUsed: this.toHex(block.header.gasUsed),
                        timestamp: this.toHex(block.header.timestamp),
                        transactions: block.transactions.map(t => '0x' + t.hash().toString('hex')),
                        uncles: []
                    };
                    cb(null, b);
                }

                toHex(value) {
                    if (!value) {
                        return '0x0';
                    }
                    const v = value.toString('hex');
                    return v === '0x' || v === '' ? '0x0' : '0x' + v;
                }

                eth_getBlockByHash(payload, cb) {
                    const block = this.vmContext.blocks[payload.params[0]];
                    const b = {
                        baseFeePerGas: '0x01',
                        number: this.toHex(block.header.number),
                        hash: this.toHex(block.hash()),
                        parentHash: this.toHex(block.header.parentHash),
                        nonce: this.toHex(block.header.nonce),
                        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
                        logsBloom: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331',
                        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
                        stateRoot: this.toHex(block.header.stateRoot),
                        miner: this.coinbase,
                        difficulty: this.toHex(block.header.difficulty),
                        totalDifficulty: this.toHex(block.header.totalDifficulty),
                        extraData: this.toHex(block.header.extraData),
                        size: '0x027f07',
                        gasLimit: this.toHex(block.header.gasLimit),
                        gasUsed: this.toHex(block.header.gasUsed),
                        timestamp: this.toHex(block.header.timestamp),
                        transactions: block.transactions.map(t => '0x' + t.hash().toString('hex')),
                        uncles: []
                    };
                    cb(null, b);
                }

                eth_gasPrice(payload, cb) {
                    cb(null, 1);
                }

                eth_coinbase(payload, cb) {
                    cb(null, this.coinbase);
                }

                eth_blockNumber(payload, cb) {
                    cb(null, parseInt(this.vmContext.latestBlockNumber));
                }

                eth_getBlockTransactionCountByHash(payload, cb) {
                    const block = this.vmContext.blocks[payload.params[0]];
                    cb(null, block.transactions.length);
                }

                eth_getBlockTransactionCountByNumber(payload, cb) {
                    const block = this.vmContext.blocks[payload.params[0]];
                    cb(null, block.transactions.length);
                }

                eth_getUncleCountByBlockHash(payload, cb) {
                    cb(null, 0);
                }

                eth_getUncleCountByBlockNumber(payload, cb) {
                    cb(null, 0);
                }

                eth_getStorageAt(payload, cb) {
                    const [address, position, blockNumber] = payload.params;
                    this.vmContext.web3().debug.storageRangeAt(blockNumber, 'latest', address.toLowerCase(), position, 1, (err, result) => {
                        if (err || result.storage && Object.values(result.storage).length === 0) {
                            return cb(err, '');
                        }

                        const value = Object.values(result.storage)[0]['value'];
                        cb(err, value);
                    });
                }

            }

            exports.Blocks = Blocks;

            /***/
        }),

        /***/ 1806:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (process) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.error = exports.warn = exports.dir = exports.info = exports.log = void 0;

                const tslib_1 = __webpack_require__(494);

                const ansi_gray_1 = (0, tslib_1.__importDefault)(__webpack_require__(1807));
                const time_stamp_1 = (0, tslib_1.__importDefault)(__webpack_require__(1027));
                const color_support_1 = (0, tslib_1.__importDefault)(__webpack_require__(1028));

                function hasFlag(flag) {
                    return typeof process !== 'undefined' && process.argv.indexOf('--' + flag) !== -1;
                }

                function addColor(str) {
                    if (hasFlag('no-color')) {
                        return str;
                    }

                    if (hasFlag('color')) {
                        return (0, ansi_gray_1.default)(str);
                    }

                    if ((0, color_support_1.default)()) {
                        return (0, ansi_gray_1.default)(str);
                    }

                    return str;
                }

                function stdout(arg) {
                    if (typeof process === 'undefined' || !process.stdout) {
                        return;
                    }
                    process.stdout.write(arg);
                }

                function stderr(arg) {
                    if (typeof process === 'undefined' || process.stderr) {
                        return;
                    }
                    process.stderr.write(arg);
                }

                function getTimestamp() {
                    const coloredTimestamp = addColor((0, time_stamp_1.default)('HH:mm:ss'));
                    return '[' + coloredTimestamp + ']';
                }

                function log(...args) {
                    const time = getTimestamp();
                    stdout(time + ' ');
                    console.log(args);
                }

                exports.log = log;

                function info(...args) {
                    const time = getTimestamp();
                    stdout(time + ' ');
                    console.info(args);
                }

                exports.info = info;

                function dir(...args) {
                    const time = getTimestamp();
                    stdout(time + ' ');
                    console.dir(args);
                }

                exports.dir = dir;

                function warn(...args) {
                    const time = getTimestamp();
                    stderr(time + ' ');
                    console.warn(args);
                }

                exports.warn = warn;

                function error(...args) {
                    const time = getTimestamp();
                    stderr(time + ' ');
                    console.error(args);
                }

                exports.error = error;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(500)))

            /***/
        }),

        /***/ 1810:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.Accounts = void 0;

                const tslib_1 = __webpack_require__(494);

                const ethereumjs_util_1 = __webpack_require__(493);

                const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));
                const crypto = (0, tslib_1.__importStar)(__webpack_require__(586));

                class Accounts {
                    constructor(vmContext) {
                        this.web3 = new web3_1.default();
                        this.vmContext = vmContext; // TODO: make it random and/or use remix-libs

                        this.accounts = {};
                        this.accountsKeys = {};
                    }

                    resetAccounts() {
                        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                            this.accounts = {};
                            this.accountsKeys = {};
                            yield this._addAccount('503f38a9c967ed597e47fe25643985f032b072db8075426a92110f82df48dfcb', '0x56BC75E2D63100000');
                            yield this._addAccount('7e5bfb82febc4c2c8529167104271ceec190eafdca277314912eaabdb67c6e5f', '0x56BC75E2D63100000');
                            yield this._addAccount('cc6d63f85de8fef05446ebdd3c537c72152d0fc437fd7aa62b3019b79bd1fdd4', '0x56BC75E2D63100000');
                            yield this._addAccount('638b5c6c8c5903b15f0d3bf5d3f175c64e6e98a10bdb9768a2003bf773dcb86a', '0x56BC75E2D63100000');
                            yield this._addAccount('f49bf239b6e554fdd08694fde6c67dac4d01c04e0dda5ee11abee478983f3bc0', '0x56BC75E2D63100000');
                            yield this._addAccount('adeee250542d3790253046eee928d8058fd544294a5219bea152d1badbada395', '0x56BC75E2D63100000');
                            yield this._addAccount('097ffe12069dcb3c3d99e6771e2cbf491a9b8b2f93ff4d3468f550c5e8264755', '0x56BC75E2D63100000');
                            yield this._addAccount('5f58e8b9f1867ef00578b6f03e159428ab168f776aa445bc3ecdb02c7db8e865', '0x56BC75E2D63100000');
                            yield this._addAccount('290e721ac87c7b3f31bef7b70104b9280ed3fa1425a59451490c9c02bf50d08f', '0x56BC75E2D63100000');
                            yield this._addAccount('27efe944ff128cf510ab447b529eec28772f13bf65ebf1cbd504192c4f26e9d8', '0x56BC75E2D63100000');
                            yield this._addAccount('3cd7232cd6f3fc66a57a6bedc1a8ed6c228fff0a327e169c2bcc5e869ed49511', '0x56BC75E2D63100000');
                            yield this._addAccount('2ac6c190b09897cd8987869cc7b918cfea07ee82038d492abce033c75c1b1d0c', '0x56BC75E2D63100000');
                            yield this._addAccount('dae9801649ba2d95a21e688b56f77905e5667c44ce868ec83f82e838712a2c7a', '0x56BC75E2D63100000');
                            yield this._addAccount('d74aa6d18aa79a05f3473dd030a97d3305737cbc8337d940344345c1f6b72eea', '0x56BC75E2D63100000');
                            yield this._addAccount('71975fbf7fe448e004ac7ae54cad0a383c3906055a65468714156a07385e96ce', '0x56BC75E2D63100000');
                        });
                    }

                    _addAccount(privateKey, balance) {
                        return new Promise((resolve, reject) => {
                            privateKey = Buffer.from(privateKey, 'hex');
                            const address = (0, ethereumjs_util_1.privateToAddress)(privateKey);
                            const addressStr = (0, ethereumjs_util_1.toChecksumAddress)('0x' + address.toString('hex'));
                            this.accounts[addressStr] = {
                                privateKey,
                                nonce: 0
                            };
                            this.accountsKeys[addressStr] = '0x' + privateKey.toString('hex');
                            const stateManager = this.vmContext.vm().stateManager;
                            stateManager.getAccount(ethereumjs_util_1.Address.fromString(addressStr)).then(account => {
                                account.balance = new ethereumjs_util_1.BN(balance.replace('0x', '') || 'f00000000000000001', 16);
                                stateManager.putAccount(ethereumjs_util_1.Address.fromString(addressStr), account).catch(error => {
                                    reject(error);
                                }).then(() => {
                                    resolve({});
                                });
                            }).catch(error => {
                                reject(error);
                            });
                        });
                    }

                    newAccount(cb) {
                        let privateKey;

                        do {
                            privateKey = crypto.randomBytes(32);
                        } while (!(0, ethereumjs_util_1.isValidPrivate)(privateKey));

                        this._addAccount(privateKey, '0x56BC75E2D63100000');

                        return cb(null, '0x' + (0, ethereumjs_util_1.privateToAddress)(privateKey).toString('hex'));
                    }

                    methods() {
                        return {
                            eth_accounts: this.eth_accounts.bind(this),
                            eth_getBalance: this.eth_getBalance.bind(this),
                            eth_sign: this.eth_sign.bind(this)
                        };
                    }

                    eth_accounts(_payload, cb) {
                        return cb(null, Object.keys(this.accounts));
                    }

                    eth_getBalance(payload, cb) {
                        const address = payload.params[0];
                        this.vmContext.vm().stateManager.getAccount(ethereumjs_util_1.Address.fromString(address)).then(account => {
                            cb(null, new ethereumjs_util_1.BN(account.balance).toString(10));
                        }).catch(error => {
                            cb(error);
                        });
                    }

                    eth_sign(payload, cb) {
                        const address = payload.params[0];
                        const message = payload.params[1];
                        const privateKey = this.accountsKeys[(0, ethereumjs_util_1.toChecksumAddress)(address)];

                        if (!privateKey) {
                            return cb(new Error('unknown account'));
                        }

                        const account = this.web3.eth.accounts.privateKeyToAccount(privateKey);
                        const data = account.sign(message);
                        cb(null, data.signature);
                    }

                }

                exports.Accounts = Accounts;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1811:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Filters = void 0;

            class Filters {
                constructor(vmContext) {
                    this.vmContext = vmContext;
                }

                methods() {
                    return {
                        eth_getLogs: this.eth_getLogs.bind(this),
                        eth_subscribe: this.eth_subscribe.bind(this),
                        eth_unsubscribe: this.eth_unsubscribe.bind(this)
                    };
                }

                eth_getLogs(payload, cb) {
                    const results = this.vmContext.logsManager.getLogsFor(payload.params[0]);
                    cb(null, results);
                }

                eth_subscribe(payload, cb) {
                    const subscriptionId = this.vmContext.logsManager.subscribe(payload.params);
                    cb(null, subscriptionId);
                }

                eth_unsubscribe(payload, cb) {
                    this.vmContext.logsManager.unsubscribe(payload.params[0]);
                    cb(null, true);
                }

                eth_newFilter(payload, cb) {
                    const filterId = this.vmContext.logsManager.newFilter('filter', payload.params[0]);
                    cb(null, filterId);
                }

                eth_newBlockFilter(payload, cb) {
                    const filterId = this.vmContext.logsManager.newFilter('block');
                    cb(null, filterId);
                }

                eth_newPendingTransactionFilter(payload, cb) {
                    const filterId = this.vmContext.logsManager.newFilter('pendingTransactions');
                    cb(null, filterId);
                }

                eth_uninstallfilter(payload, cb) {
                    const result = this.vmContext.logsManager.uninstallFilter(payload.params[0]);
                    cb(null, result);
                }

                eth_getFilterChanges(payload, cb) {
                    const filterId = payload.params[0];
                    const results = this.vmContext.logsManager.getLogsForFilter(filterId);
                    cb(null, results);
                }

                eth_getFilterLogs(payload, cb) {
                    const filterId = payload.params[0];
                    const results = this.vmContext.logsManager.getLogsForFilter(filterId, true);
                    cb(null, results);
                }

            }

            exports.Filters = Filters;

            /***/
        }),

        /***/ 1812:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.eth_compileSerpent = exports.eth_compileLLL = exports.eth_compileSolidity = exports.eth_getCompilers = exports.web3_sha3 = exports.eth_hashrate = exports.eth_mining = exports.eth_syncing = exports.eth_protocolVersion = exports.web3_clientVersion = exports.methods = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            const version = __webpack_require__(1813).version;

            function methods() {
                return {
                    web3_clientVersion: web3_clientVersion,
                    eth_protocolVersion: eth_protocolVersion,
                    eth_syncing: eth_syncing,
                    eth_mining: eth_mining,
                    eth_hashrate: eth_hashrate,
                    web3_sha3: web3_sha3,
                    eth_getCompilers: eth_getCompilers,
                    eth_compileSolidity: eth_compileSolidity,
                    eth_compileLLL: eth_compileLLL,
                    eth_compileSerpent: eth_compileSerpent
                };
            }

            exports.methods = methods;

            function web3_clientVersion(payload, cb) {
                cb(null, 'Remix Simulator/' + version);
            }

            exports.web3_clientVersion = web3_clientVersion;

            function eth_protocolVersion(payload, cb) {
                cb(null, '0x3f');
            }

            exports.eth_protocolVersion = eth_protocolVersion;

            function eth_syncing(payload, cb) {
                cb(null, false);
            }

            exports.eth_syncing = eth_syncing;

            function eth_mining(payload, cb) {
                // TODO: should depend on the state
                cb(null, false);
            }

            exports.eth_mining = eth_mining;

            function eth_hashrate(payload, cb) {
                cb(null, '0x0');
            }

            exports.eth_hashrate = eth_hashrate;

            function web3_sha3(payload, cb) {
                const str = payload.params[0];
                cb(null, web3_1.default.utils.sha3(str));
            }

            exports.web3_sha3 = web3_sha3;

            function eth_getCompilers(payload, cb) {
                cb(null, []);
            }

            exports.eth_getCompilers = eth_getCompilers;

            function eth_compileSolidity(payload, cb) {
                cb(null, 'unsupported');
            }

            exports.eth_compileSolidity = eth_compileSolidity;

            function eth_compileLLL(payload, cb) {
                cb(null, 'unsupported');
            }

            exports.eth_compileLLL = eth_compileLLL;

            function eth_compileSerpent(payload, cb) {
                cb(null, 'unsupported');
            }

            exports.eth_compileSerpent = eth_compileSerpent;

            /***/
        }),

        /***/ 1813:
        /***/ (function (module) {

            module.exports = JSON.parse("{\"name\":\"@remix-project/remix-simulator\",\"version\":\"0.2.10\",\"description\":\"Ethereum IDE and tools for the web\",\"contributors\":[{\"name\":\"Iuri Matias\",\"email\":\"iuri@ethereum.org\"},{\"name\":\"Yann Levreau\",\"email\":\"yann@ethdev.com\"}],\"main\":\"src/index.js\",\"dependencies\":{\"@ethereumjs/block\":\"^3.5.1\",\"@ethereumjs/common\":\"^2.5.0\",\"@ethereumjs/tx\":\"^3.3.2\",\"@ethereumjs/vm\":\"^5.5.3\",\"@remix-project/remix-lib\":\"^0.5.10\",\"ansi-gray\":\"^0.1.1\",\"async\":\"^3.1.0\",\"body-parser\":\"^1.18.2\",\"color-support\":\"^1.1.3\",\"commander\":\"^2.19.0\",\"cors\":\"^2.8.5\",\"ethereumjs-util\":\"^7.0.10\",\"ethers\":\"^5.4.2\",\"ethjs-util\":\"^0.1.6\",\"express\":\"^4.16.3\",\"express-ws\":\"^4.0.0\",\"merge\":\"^1.2.0\",\"string-similarity\":\"^4.0.4\",\"time-stamp\":\"^2.0.0\",\"web3\":\"^1.5.1\"},\"devDependencies\":{\"@babel/core\":\"^7.4.5\",\"@babel/plugin-transform-object-assign\":\"^7.2.0\",\"@babel/preset-env\":\"^7.4.5\",\"@babel/preset-es2015\":\"latest\",\"@babel/preset-es2017\":\"latest\",\"@babel/preset-stage-0\":\"^7.0.0\",\"babel-eslint\":\"^7.1.1\",\"babelify\":\"^10.0.0\",\"mocha\":\"^5.2.0\"},\"scripts\":{\"test\":\"./../../node_modules/.bin/ts-node --require tsconfig-paths/register ./../../node_modules/.bin/mocha test/*.ts\"},\"publishConfig\":{\"access\":\"public\"},\"bin\":{\"ethsim\":\"./bin/ethsim\",\"remix-simulator\":\"./bin/ethsim\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/ethereum/remix-project.git\"},\"author\":\"Remix Team\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/ethereum/remix-project/issues\"},\"homepage\":\"https://github.com/ethereum/remix-project/tree/master/libs/remix-simulator#readme\",\"typings\":\"src/index.d.ts\",\"gitHead\":\"bd1fb4c506538641076f88219b9f11df4961df67\"}");

            /***/
        }),

        /***/ 1814:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.net_peerCount = exports.net_listening = exports.net_version = exports.methods = void 0;

            function methods() {
                return {
                    net_version: net_version,
                    net_listening: net_listening,
                    net_peerCount: net_peerCount
                };
            }

            exports.methods = methods;

            function net_version(payload, cb) {
                // should be configured networkId
                cb(null, 1337);
            }

            exports.net_version = net_version;

            function net_listening(payload, cb) {
                cb(null, true);
            }

            exports.net_listening = net_listening;

            function net_peerCount(payload, cb) {
                cb(null, 0);
            }

            exports.net_peerCount = net_peerCount;

            /***/
        }),

        /***/ 1815:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Transactions = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            const ethereumjs_util_1 = __webpack_require__(493);

            const txProcess_1 = __webpack_require__(1816);

            const remix_lib_1 = __webpack_require__(508);

            const TxRunnerVM = remix_lib_1.execution.TxRunnerVM;
            const TxRunner = remix_lib_1.execution.TxRunner;

            class Transactions {
                constructor(vmContext) {
                    this.TX_INDEX = '0x0'; // currently there's always only 1 tx per block, so the transaction index will always be 0x0

                    this.vmContext = vmContext;
                    this.tags = {};
                }

                init(accounts) {
                    this.accounts = accounts;
                    const api = {
                        logMessage: msg => {
                        },
                        logHtmlMessage: msg => {
                        },
                        config: {
                            getUnpersistedProperty: key => {
                                return true;
                            },
                            get: () => {
                                return true;
                            }
                        },
                        detectNetwork: cb => {
                            cb();
                        },
                        personalMode: () => {
                            return false;
                        }
                    };
                    this.txRunnerVMInstance = new TxRunnerVM(accounts, api, _ => this.vmContext.vmObject());
                    this.txRunnerInstance = new TxRunner(this.txRunnerVMInstance, {
                        runAsync: false
                    });
                    this.txRunnerInstance.vmaccounts = accounts;
                }

                methods() {
                    return {
                        eth_sendTransaction: this.eth_sendTransaction.bind(this),
                        eth_getTransactionReceipt: this.eth_getTransactionReceipt.bind(this),
                        eth_getCode: this.eth_getCode.bind(this),
                        eth_call: this.eth_call.bind(this),
                        eth_estimateGas: this.eth_estimateGas.bind(this),
                        eth_getTransactionCount: this.eth_getTransactionCount.bind(this),
                        eth_getTransactionByHash: this.eth_getTransactionByHash.bind(this),
                        eth_getTransactionByBlockHashAndIndex: this.eth_getTransactionByBlockHashAndIndex.bind(this),
                        eth_getTransactionByBlockNumberAndIndex: this.eth_getTransactionByBlockNumberAndIndex.bind(this),
                        eth_getExecutionResultFromSimulator: this.eth_getExecutionResultFromSimulator.bind(this),
                        eth_getHHLogsForTx: this.eth_getHHLogsForTx.bind(this),
                        eth_getHashFromTagBySimulator: this.eth_getHashFromTagBySimulator.bind(this)
                    };
                }

                eth_sendTransaction(payload, cb) {
                    // from might be lowercased address (web3)
                    if (payload.params && payload.params.length > 0 && payload.params[0].from) {
                        payload.params[0].from = (0, ethereumjs_util_1.toChecksumAddress)(payload.params[0].from);
                    }

                    (0, txProcess_1.processTx)(this.txRunnerInstance, payload, false, (error, result) => {
                        if (!error && result) {
                            this.vmContext.addBlock(result.block);
                            const hash = '0x' + result.tx.hash().toString('hex');
                            this.vmContext.trackTx(hash, result.block, result.tx);
                            this.vmContext.trackExecResult(hash, result.result.execResult);
                            return cb(null, result.transactionHash);
                        }

                        cb(error);
                    });
                }

                eth_getExecutionResultFromSimulator(payload, cb) {
                    const txHash = payload.params[0];
                    cb(null, this.vmContext.exeResults[txHash]);
                }

                eth_getHHLogsForTx(payload, cb) {
                    const txHash = payload.params[0];
                    cb(null, this.vmContext.currentVm.web3vm.hhLogs[txHash] ? this.vmContext.currentVm.web3vm.hhLogs[txHash] : []);
                }

                eth_getTransactionReceipt(payload, cb) {
                    this.vmContext.web3().eth.getTransactionReceipt(payload.params[0], (error, receipt) => {
                        if (error) {
                            return cb(error);
                        }

                        const txBlock = this.vmContext.blockByTxHash[receipt.hash];
                        const logs = this.vmContext.logsManager.getLogsByTxHash(receipt.hash);
                        const r = {
                            transactionHash: receipt.hash,
                            transactionIndex: this.TX_INDEX,
                            blockHash: '0x' + txBlock.hash().toString('hex'),
                            blockNumber: '0x' + txBlock.header.number.toString('hex'),
                            gasUsed: receipt.gasUsed,
                            cumulativeGasUsed: receipt.gasUsed,
                            contractAddress: receipt.contractAddress,
                            logs,
                            status: receipt.status,
                            to: receipt.to
                        };

                        if (r.blockNumber === '0x') {
                            r.blockNumber = '0x0';
                        }

                        cb(null, r);
                    });
                }

                eth_estimateGas(payload, cb) {
                    cb(null, 10000000 * 8);
                }

                eth_getCode(payload, cb) {
                    const address = payload.params[0];
                    this.vmContext.web3().eth.getCode(address, (error, result) => {
                        if (error) {
                            console.dir('error getting code');
                            console.dir(error);
                        }

                        cb(error, result);
                    });
                }

                eth_call(payload, cb) {
                    // from might be lowercased address (web3)
                    if (payload.params && payload.params.length > 0 && payload.params[0].from) {
                        payload.params[0].from = (0, ethereumjs_util_1.toChecksumAddress)(payload.params[0].from);
                    }

                    if (payload.params && payload.params.length > 0 && payload.params[0].to) {
                        payload.params[0].to = (0, ethereumjs_util_1.toChecksumAddress)(payload.params[0].to);
                    }

                    payload.params[0].value = undefined;
                    const tag = payload.params[0].timestamp; // e2e reference

                    (0, txProcess_1.processTx)(this.txRunnerInstance, payload, true, (error, result) => {
                        if (!error && result) {
                            this.vmContext.addBlock(result.block);
                            const hash = '0x' + result.tx.hash().toString('hex');
                            this.vmContext.trackTx(hash, result.block, result.tx);
                            this.vmContext.trackExecResult(hash, result.result.execResult);
                            this.tags[tag] = result.transactionHash; // calls are not supposed to return a transaction hash. we do this for keeping track of it and allowing debugging calls.

                            const returnValue = `0x${result.result.execResult.returnValue.toString('hex') || '0'}`;
                            return cb(null, returnValue);
                        }

                        cb(error);
                    });
                }

                eth_getHashFromTagBySimulator(payload, cb) {
                    return cb(null, this.tags[payload.params[0]]);
                }

                eth_getTransactionCount(payload, cb) {
                    const address = payload.params[0];
                    this.vmContext.vm().stateManager.getAccount(ethereumjs_util_1.Address.fromString(address)).then(account => {
                        const nonce = new ethereumjs_util_1.BN(account.nonce).toString(10);
                        cb(null, nonce);
                    }).catch(error => {
                        cb(error);
                    });
                }

                eth_getTransactionByHash(payload, cb) {
                    const address = payload.params[0];
                    this.vmContext.web3().eth.getTransactionReceipt(address, (error, receipt) => {
                        if (error) {
                            return cb(error);
                        }

                        const txBlock = this.vmContext.blockByTxHash[receipt.transactionHash];
                        const tx = this.vmContext.txByHash[receipt.transactionHash]; // TODO: params to add later

                        const r = {
                            blockHash: '0x' + txBlock.hash().toString('hex'),
                            blockNumber: '0x' + txBlock.header.number.toString('hex'),
                            from: receipt.from,
                            gas: web3_1.default.utils.toHex(receipt.gas),
                            chainId: '0xd05',
                            // 'gasPrice': '2000000000000', // 0x123
                            gasPrice: '0x4a817c800',
                            hash: receipt.transactionHash,
                            input: receipt.input,
                            nonce: '0x' + tx.nonce.toString('hex'),
                            transactionIndex: this.TX_INDEX,
                            value: receipt.value // "value":"0xf3dbb76162000" // 4290000000000000
                            // "v": "0x25", // 37
                            // "r": "0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
                            // "s": "0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"

                        };

                        if (receipt.to) {
                            r['to'] = receipt.to;
                        }

                        if (r.value === '0x') {
                            r.value = '0x0';
                        }

                        if (r.blockNumber === '0x') {
                            r.blockNumber = '0x0';
                        }

                        cb(null, r);
                    });
                }

                eth_getTransactionByBlockHashAndIndex(payload, cb) {
                    const txIndex = payload.params[1];
                    const txBlock = this.vmContext.blocks[payload.params[0]];
                    const txHash = '0x' + txBlock.transactions[web3_1.default.utils.toDecimal(txIndex)].hash().toString('hex');
                    this.vmContext.web3().eth.getTransactionReceipt(txHash, (error, receipt) => {
                        if (error) {
                            return cb(error);
                        }

                        const tx = this.vmContext.txByHash[receipt.transactionHash]; // TODO: params to add later

                        const r = {
                            blockHash: '0x' + txBlock.hash().toString('hex'),
                            blockNumber: '0x' + txBlock.header.number.toString('hex'),
                            from: receipt.from,
                            gas: web3_1.default.utils.toHex(receipt.gas),
                            chainId: '0xd05',
                            // 'gasPrice': '2000000000000', // 0x123
                            gasPrice: '0x4a817c800',
                            hash: receipt.transactionHash,
                            input: receipt.input,
                            nonce: '0x' + tx.nonce.toString('hex'),
                            transactionIndex: this.TX_INDEX,
                            value: receipt.value // "value":"0xf3dbb76162000" // 4290000000000000
                            // "v": "0x25", // 37
                            // "r": "0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
                            // "s": "0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"

                        };

                        if (receipt.to) {
                            r['to'] = receipt.to;
                        }

                        if (r.value === '0x') {
                            r.value = '0x0';
                        }

                        cb(null, r);
                    });
                }

                eth_getTransactionByBlockNumberAndIndex(payload, cb) {
                    const txIndex = payload.params[1];
                    const txBlock = this.vmContext.blocks[payload.params[0]];
                    const txHash = '0x' + txBlock.transactions[web3_1.default.utils.toDecimal(txIndex)].hash().toString('hex');
                    this.vmContext.web3().eth.getTransactionReceipt(txHash, (error, receipt) => {
                        if (error) {
                            return cb(error);
                        }

                        const tx = this.vmContext.txByHash[receipt.transactionHash]; // TODO: params to add later

                        const r = {
                            blockHash: '0x' + txBlock.hash().toString('hex'),
                            blockNumber: '0x' + txBlock.header.number.toString('hex'),
                            from: receipt.from,
                            gas: web3_1.default.utils.toHex(receipt.gas),
                            // 'gasPrice': '2000000000000', // 0x123
                            chainId: '0xd05',
                            gasPrice: '0x4a817c800',
                            hash: receipt.transactionHash,
                            input: receipt.input,
                            nonce: '0x' + tx.nonce.toString('hex'),
                            transactionIndex: this.TX_INDEX,
                            value: receipt.value // "value":"0xf3dbb76162000" // 4290000000000000
                            // "v": "0x25", // 37
                            // "r": "0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
                            // "s": "0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"

                        };

                        if (receipt.to) {
                            r['to'] = receipt.to;
                        }

                        if (r.value === '0x') {
                            r.value = '0x0';
                        }

                        cb(null, r);
                    });
                }

            }

            exports.Transactions = Transactions;

            /***/
        }),

        /***/ 1816:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.processTx = void 0;

            const remix_lib_1 = __webpack_require__(508);

            const TxExecution = remix_lib_1.execution.txExecution;

            function runCall(payload, from, to, data, value, gasLimit, txRunner, callbacks, callback) {
                const finalCallback = function (err, result) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, result);
                };

                TxExecution.callFunction(from, to, data, value, gasLimit, {
                    constant: true
                }, txRunner, callbacks, finalCallback);
            }

            function runTx(payload, from, to, data, value, gasLimit, txRunner, callbacks, callback) {
                const finalCallback = function (err, result) {
                    if (err) {
                        return callback(err);
                    }

                    callback(null, result);
                };

                TxExecution.callFunction(from, to, data, value, gasLimit, {
                    constant: false
                }, txRunner, callbacks, finalCallback);
            }

            function createContract(payload, from, data, value, gasLimit, txRunner, callbacks, callback) {
                const finalCallback = function (err, result) {
                    if (err) {
                        return callback(err);
                    }

                    callback(null, result);
                };

                TxExecution.createContract(from, data, value, gasLimit, txRunner, callbacks, finalCallback);
            }

            function processTx(txRunnerInstance, payload, isCall, callback) {
                let {
                    from,
                    to,
                    data,
                    value,
                    gas
                } = payload.params[0];
                gas = gas || 3000000;
                const callbacks = {
                    confirmationCb: (network, tx, gasEstimation, continueTxExecution, cancelCb) => {
                        continueTxExecution(null);
                    },
                    gasEstimationForceSend: (error, continueTxExecution, cancelCb) => {
                        if (error) {
                            continueTxExecution(error);
                        }

                        continueTxExecution();
                    },
                    promptCb: (okCb, cancelCb) => {
                        okCb();
                    }
                };

                if (isCall) {
                    runCall(payload, from, to, data, value, gas, txRunnerInstance, callbacks, callback);
                } else if (to) {
                    runTx(payload, from, to, data, value, gas, txRunnerInstance, callbacks, callback);
                } else {
                    createContract(payload, from, data, value, gas, txRunnerInstance, callbacks, callback);
                }
            }

            exports.processTx = processTx;

            /***/
        }),

        /***/ 1817:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Debug = void 0;

            class Debug {
                constructor(vmContext) {
                    this.vmContext = vmContext;
                }

                methods() {
                    return {
                        debug_traceTransaction: this.debug_traceTransaction.bind(this),
                        debug_preimage: this.debug_preimage.bind(this),
                        debug_storageRangeAt: this.debug_storageRangeAt.bind(this)
                    };
                }

                debug_traceTransaction(payload, cb) {
                    this.vmContext.web3().debug.traceTransaction(payload.params[0], {}, cb);
                }

                debug_preimage(payload, cb) {
                    this.vmContext.web3().debug.preimage(payload.params[0], cb);
                }

                debug_storageRangeAt(payload, cb) {
                    this.vmContext.web3().debug.storageRangeAt(payload.params[0], payload.params[1], payload.params[2], payload.params[3], payload.params[4], cb);
                }

            }

            exports.Debug = Debug;

            /***/
        }),

        /***/ 1818:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.generateBlock = void 0;

            const block_1 = __webpack_require__(542);

            const ethereumjs_util_1 = __webpack_require__(493);

            function generateBlock(vmContext) {
                return new Promise((resolve, reject) => {
                    const block = block_1.Block.fromBlockData({
                        header: {
                            timestamp: new Date().getTime() / 1000 | 0,
                            number: 0,
                            coinbase: '0x0e9281e9c6a0808672eaba6bd1220e144c9bb07a',
                            difficulty: new ethereumjs_util_1.BN('69762765929000', 10),
                            gasLimit: new ethereumjs_util_1.BN('8000000').imuln(1)
                        }
                    }, {
                        common: vmContext.vmObject().common
                    });
                    vmContext.vm().runBlock({
                        block: block,
                        generate: true,
                        skipBlockValidation: true,
                        skipBalance: false
                    }).then(() => {
                        vmContext.addBlock(block);
                        resolve({});
                    }).catch(e => reject(e));
                });
            }

            exports.generateBlock = generateBlock;

            /***/
        }),

        /***/ 1819:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* global ethereum */


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VMContext = void 0;

            const tslib_1 = __webpack_require__(494);

            const web3_1 = (0, tslib_1.__importDefault)(__webpack_require__(521));

            const ethereumjs_util_1 = __webpack_require__(493);

            const remix_lib_1 = __webpack_require__(508);

            const vm_1 = (0, tslib_1.__importDefault)(__webpack_require__(1820));
            const common_1 = (0, tslib_1.__importDefault)(__webpack_require__(529));
            const stateManager_1 = (0, tslib_1.__importDefault)(__webpack_require__(1952));

            /*
  extend vm state manager and instanciate VM
*/

            class StateManagerCommonStorageDump extends stateManager_1.default {
                constructor() {
                    super();
                    this.keyHashes = {};
                }

                putContractStorage(address, key, value) {
                    this.keyHashes[(0, ethereumjs_util_1.keccak)(key).toString('hex')] = (0, ethereumjs_util_1.bufferToHex)(key);
                    return super.putContractStorage(address, key, value);
                }

                dumpStorage(address) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        return new Promise((resolve, reject) => {
                            this._getStorageTrie(address).then(trie => {
                                const storage = {};
                                const stream = trie.createReadStream();
                                stream.on('data', val => {
                                    const value = ethereumjs_util_1.rlp.decode(val.value);
                                    storage['0x' + val.key.toString('hex')] = {
                                        key: this.keyHashes[val.key.toString('hex')],
                                        value: '0x' + value.toString('hex')
                                    };
                                });
                                stream.on('end', () => {
                                    resolve(storage);
                                });
                            }).catch(e => {
                                reject(e);
                            });
                        });
                    });
                }

                getStateRoot(force = false) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        yield this._cache.flush();
                        const stateRoot = this._trie.root;
                        return stateRoot;
                    });
                }

                setStateRoot(stateRoot) {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        if (this._checkpointCount !== 0) {
                            throw new Error('Cannot set state root with uncommitted checkpoints');
                        }

                        yield this._cache.flush();

                        if (!stateRoot.equals(this._trie.EMPTY_TRIE_ROOT)) {
                            const hasRoot = yield this._trie.checkRoot(stateRoot);

                            if (!hasRoot) {
                                throw new Error('State trie does not contain state root');
                            }
                        }

                        this._trie.root = stateRoot;

                        this._cache.clear();

                        this._storageTries = {};
                    });
                }

            }

            /*
  trigger contextChanged, web3EndpointChanged
*/


            class VMContext {
                constructor(fork) {
                    this.blockGasLimitDefault = 4300000;
                    this.blockGasLimit = this.blockGasLimitDefault;
                    this.currentFork = fork || 'london';
                    this.currentVm = this.createVm(this.currentFork);
                    this.blocks = {};
                    this.latestBlockNumber = 0;
                    this.blockByTxHash = {};
                    this.txByHash = {};
                    this.exeResults = {};
                    this.logsManager = new remix_lib_1.execution.LogsManager();
                }

                createVm(hardfork) {
                    const stateManager = new StateManagerCommonStorageDump();
                    const common = new common_1.default({
                        chain: 'mainnet',
                        hardfork
                    });
                    const vm = new vm_1.default({
                        common,
                        activatePrecompiles: true,
                        stateManager,
                        allowUnlimitedContractSize: true
                    });
                    const web3vm = new remix_lib_1.vm.Web3VMProvider();
                    web3vm.setVM(vm);
                    return {
                        vm,
                        web3vm,
                        stateManager,
                        common
                    };
                }

                getCurrentFork() {
                    return this.currentFork;
                }

                web3() {
                    return this.currentVm.web3vm;
                }

                blankWeb3() {
                    return new web3_1.default();
                }

                vm() {
                    return this.currentVm.vm;
                }

                vmObject() {
                    return this.currentVm;
                }

                addBlock(block) {
                    let blockNumber = '0x' + block.header.number.toString('hex');

                    if (blockNumber === '0x') {
                        blockNumber = '0x0';
                    }

                    this.blocks['0x' + block.hash().toString('hex')] = block;
                    this.blocks[blockNumber] = block;
                    this.latestBlockNumber = blockNumber;
                    this.logsManager.checkBlock(blockNumber, block, this.web3());
                }

                trackTx(txHash, block, tx) {
                    this.blockByTxHash[txHash] = block;
                    this.txByHash[txHash] = tx;
                }

                trackExecResult(tx, execReult) {
                    this.exeResults[tx] = execReult;
                }

            }

            exports.VMContext = VMContext;

            /***/
        }),

        /***/ 1977:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            descriptor.writable = true;
                        }
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) {
                        _defineProperties(Constructor.prototype, protoProps);
                    }
                    if (staticProps) {
                        _defineProperties(Constructor, staticProps);
                    }
                    return Constructor;
                }

                var Web3 = __webpack_require__(521);

                var _require = __webpack_require__(493),
                    hashPersonalMessage = _require.hashPersonalMessage;

                var InjectedProvider = /*#__PURE__*/function () {
                    function InjectedProvider(executionContext) {
                        _classCallCheck(this, InjectedProvider);

                        this.executionContext = executionContext;
                    }

                    _createClass(InjectedProvider, [
                        {
                            key: "getAccounts",
                            value: function getAccounts(cb) {
                                return this.executionContext.web3().eth.getAccounts(cb);
                            }
                        }, {
                            key: "newAccount",
                            value: function newAccount(passwordPromptCb, cb) {
                                var _this = this;

                                passwordPromptCb(function (passphrase) {
                                    _this.executionContext.web3().eth.personal.newAccount(passphrase, cb);
                                });
                            }
                        }, {
                            key: "resetEnvironment",
                            value: function resetEnvironment() {
                            }
                        }, {
                            key: "getBalanceInEther",
                            value: function getBalanceInEther(address, cb) {
                                this.executionContext.web3().eth.getBalance(address, function (err, res) {
                                    if (err) {
                                        return cb(err);
                                    }

                                    cb(null, Web3.utils.fromWei(res.toString(10), 'ether'));
                                });
                            }
                        }, {
                            key: "getGasPrice",
                            value: function getGasPrice(cb) {
                                this.executionContext.web3().eth.getGasPrice(cb);
                            }
                        }, {
                            key: "signMessage",
                            value: function signMessage(message, account, _passphrase, cb) {
                                var messageHash = hashPersonalMessage(Buffer.from(message));

                                try {
                                    this.executionContext.web3().eth.personal.sign(message, account, function (error, signedData) {
                                        cb(error, '0x' + messageHash.toString('hex'), signedData);
                                    });
                                } catch (e) {
                                    cb(e.message);
                                }
                            }
                        }, {
                            key: "getProvider",
                            value: function getProvider() {
                                return 'injected';
                            }
                        }
                    ]);

                    return InjectedProvider;
                }();

                module.exports = InjectedProvider;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1978:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            descriptor.writable = true;
                        }
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) {
                        _defineProperties(Constructor.prototype, protoProps);
                    }
                    if (staticProps) {
                        _defineProperties(Constructor, staticProps);
                    }
                    return Constructor;
                }

                var Web3 = __webpack_require__(521);

                var _require = __webpack_require__(493),
                    hashPersonalMessage = _require.hashPersonalMessage;

                var Personal = __webpack_require__(727);

                var NodeProvider = /*#__PURE__*/function () {
                    function NodeProvider(executionContext, config) {
                        _classCallCheck(this, NodeProvider);

                        this.executionContext = executionContext;
                        this.config = config;
                    }

                    _createClass(NodeProvider, [
                        {
                            key: "getAccounts",
                            value: function getAccounts(cb) {
                                if (this.config.get('settings/personal-mode')) {
                                    return this.executionContext.web3().eth.personal.getAccounts(cb);
                                }

                                return this.executionContext.web3().eth.getAccounts(cb);
                            }
                        }, {
                            key: "newAccount",
                            value: function newAccount(passwordPromptCb, cb) {
                                var _this = this;

                                if (!this.config.get('settings/personal-mode')) {
                                    return cb('Not running in personal mode');
                                }

                                passwordPromptCb(function (passphrase) {
                                    _this.executionContext.web3().eth.personal.newAccount(passphrase, cb);
                                });
                            }
                        }, {
                            key: "resetEnvironment",
                            value: function resetEnvironment() {
                            }
                        }, {
                            key: "getBalanceInEther",
                            value: function getBalanceInEther(address, cb) {
                                this.executionContext.web3().eth.getBalance(address, function (err, res) {
                                    if (err) {
                                        return cb(err);
                                    }

                                    cb(null, Web3.utils.fromWei(res.toString(10), 'ether'));
                                });
                            }
                        }, {
                            key: "getGasPrice",
                            value: function getGasPrice(cb) {
                                this.executionContext.web3().eth.getGasPrice(cb);
                            }
                        }, {
                            key: "signMessage",
                            value: function signMessage(message, account, passphrase, cb) {
                                var messageHash = hashPersonalMessage(Buffer.from(message));

                                try {
                                    var personal = new Personal(this.executionContext.web3().currentProvider);
                                    personal.sign(message, account, passphrase, function (error, signedData) {
                                        cb(error, '0x' + messageHash.toString('hex'), signedData);
                                    });
                                } catch (e) {
                                    cb(e.message);
                                }
                            }
                        }, {
                            key: "getProvider",
                            value: function getProvider() {
                                return this.executionContext.getProvider();
                            }
                        }
                    ]);

                    return NodeProvider;
                }();

                module.exports = NodeProvider;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 1979:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.etherScanLink = etherScanLink;
            var transactionDetailsLinks = {
                Main: 'https://www.etherscan.io/tx/',
                Rinkeby: 'https://rinkeby.etherscan.io/tx/',
                Ropsten: 'https://ropsten.etherscan.io/tx/',
                Kovan: 'https://kovan.etherscan.io/tx/',
                Goerli: 'https://goerli.etherscan.io/tx/'
            };

            function etherScanLink(network, hash) {
                if (transactionDetailsLinks[network]) {
                    return transactionDetailsLinks[network] + hash;
                }
            }

            /***/
        }),

        /***/ 1980:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.HardhatProvider = void 0;

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _engine = __webpack_require__(509);

            var _app = __webpack_require__(199);

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _ethers = __webpack_require__(592);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var profile = {
                name: 'hardhat-provider',
                displayName: 'Hardhat Provider',
                kind: 'provider',
                description: 'Hardhat provider',
                methods: ['sendAsync'],
                version: packageJson.version
            };

            var HardhatProvider = /*#__PURE__*/function (_Plugin) {
                _inherits(HardhatProvider, _Plugin);

                var _super = _createSuper(HardhatProvider);

                function HardhatProvider(blockchain) {
                    var _this;

                    _classCallCheck(this, HardhatProvider);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "provider", void 0);

                    _defineProperty(_assertThisInitialized(_this), "blocked", void 0);

                    _defineProperty(_assertThisInitialized(_this), "blockchain", void 0);

                    _defineProperty(_assertThisInitialized(_this), "target", void 0);

                    _this.provider = null;
                    _this.blocked = false; // used to block any call when trying to recover after a failed connection.

                    _this.blockchain = blockchain;
                    return _this;
                }

                _createClass(HardhatProvider, [
                    {
                        key: "onDeactivation",
                        value: function onDeactivation() {
                            this.provider = null;
                            this.blocked = false;
                        }
                    }, {
                        key: "hardhatProviderDialogBody",
                        value: function hardhatProviderDialogBody() {
                            return /*#__PURE__*/_react["default"].createElement("div", null, " Note: To run Hardhat network node on your system, go to hardhat project folder and run command:", /*#__PURE__*/_react["default"].createElement("div", {
                                className: "border p-1"
                            }, "npx hardhat node"), "For more info, visit: ", /*#__PURE__*/_react["default"].createElement("a", {
                                href: "https://hardhat.org/getting-started/#connecting-a-wallet-or-dapp-to-hardhat-network",
                                target: "_blank"
                            }, "Hardhat Documentation"), "Hardhat JSON-RPC Endpoint");
                        }
                    }, {
                        key: "sendAsync",
                        value: function sendAsync(data) {
                            var _this2 = this;

                            return new Promise( /*#__PURE__*/function () {
                                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve, reject) {
                                    var value;
                                    return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    if (!_this2.blocked) {
                                                        _context.next = 2;
                                                        break;
                                                    }

                                                    return _context.abrupt("return", reject(new Error('provider unable to connect')));

                                                case 2:
                                                    if (_this2.provider) {
                                                        _context.next = 16;
                                                        break;
                                                    }

                                                    _context.prev = 3;
                                                    _context.next = 6;
                                                    return function () {
                                                        return new Promise(function (resolve, reject) {
                                                            var modalContent = {
                                                                id: 'hardhatprovider',
                                                                title: 'Hardhat node request',
                                                                message: _this2.hardhatProviderDialogBody(),
                                                                modalType: _app.ModalTypes.prompt,
                                                                okLabel: 'OK',
                                                                cancelLabel: 'Cancel',
                                                                okFn: function okFn(value) {
                                                                    setTimeout(function () {
                                                                        return resolve(value);
                                                                    }, 0);
                                                                },
                                                                cancelFn: function cancelFn() {
                                                                    setTimeout(function () {
                                                                        return reject(new Error('Canceled'));
                                                                    }, 0);
                                                                },
                                                                hideFn: function hideFn() {
                                                                    setTimeout(function () {
                                                                        return reject(new Error('Hide'));
                                                                    }, 0);
                                                                },
                                                                defaultValue: 'http://127.0.0.1:8545'
                                                            };

                                                            _this2.call('notification', 'modal', modalContent);
                                                        });
                                                    }();

                                                case 6:
                                                    value = _context.sent;
                                                    _context.next = 12;
                                                    break;

                                                case 9:
                                                    _context.prev = 9;
                                                    _context.t0 = _context["catch"](3);
                                                    return _context.abrupt("return");

                                                case 12:
                                                    _this2.provider = new _ethers.ethers.providers.JsonRpcProvider(value);

                                                    _this2.sendAsyncInternal(data, resolve, reject);

                                                    _context.next = 17;
                                                    break;

                                                case 16:
                                                    _this2.sendAsyncInternal(data, resolve, reject);

                                                case 17:
                                                case "end":
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, null, [[3, 9]]);
                                }));

                                return function (_x, _x2) {
                                    return _ref.apply(this, arguments);
                                };
                            }());
                        }
                    }, {
                        key: "sendAsyncInternal",
                        value: function () {
                            var _sendAsyncInternal = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data, resolve, reject) {
                                var _this3 = this;

                                var result, modalContent, _result;

                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                if (!this.provider) {
                                                    _context2.next = 22;
                                                    break;
                                                }

                                                if (!(this.blockchain.getProvider() !== 'Hardhat Provider' && data.method !== 'net_listening')) {
                                                    _context2.next = 3;
                                                    break;
                                                }

                                                return _context2.abrupt("return", reject(new Error('Environment Updated !!')));

                                            case 3:
                                                _context2.prev = 3;
                                                _context2.next = 6;
                                                return this.provider.send(data.method, data.params);

                                            case 6:
                                                result = _context2.sent;
                                                resolve({
                                                    jsonrpc: '2.0',
                                                    result: result,
                                                    id: data.id
                                                });
                                                _context2.next = 20;
                                                break;

                                            case 10:
                                                _context2.prev = 10;
                                                _context2.t0 = _context2["catch"](3);
                                                this.blocked = true;
                                                modalContent = {
                                                    id: 'hardhatprovider',
                                                    title: 'Hardhat Provider',
                                                    message: "Error while connecting to the hardhat provider: ".concat(_context2.t0.message)
                                                };
                                                this.call('notification', 'alert', modalContent);
                                                _context2.next = 17;
                                                return this.call('udapp', 'setEnvironmentMode', {
                                                    context: 'vm',
                                                    fork: 'london'
                                                });

                                            case 17:
                                                this.provider = null;
                                                setTimeout(function (_) {
                                                    _this3.blocked = false;
                                                }, 1000); // we wait 1 second for letting remix to switch to vm

                                                reject(_context2.t0);

                                            case 20:
                                                _context2.next = 24;
                                                break;

                                            case 22:
                                                _result = data.method === 'net_listening' ? 'canceled' : [];
                                                resolve({
                                                    jsonrpc: '2.0',
                                                    result: _result,
                                                    id: data.id
                                                });

                                            case 24:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this, [[3, 10]]);
                            }));

                            function sendAsyncInternal(_x3, _x4, _x5) {
                                return _sendAsyncInternal.apply(this, arguments);
                            }

                            return sendAsyncInternal;
                        }()
                    }
                ]);

                return HardhatProvider;
            }(_engine.Plugin);

            exports.HardhatProvider = HardhatProvider;

            /***/
        }),

        /***/ 1981:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var FileProvider = __webpack_require__(800);

            module.exports = /*#__PURE__*/function (_FileProvider) {
                _inherits(RemixDProvider, _FileProvider);

                var _super = _createSuper(RemixDProvider);

                function RemixDProvider(appManager) {
                    var _this;

                    _classCallCheck(this, RemixDProvider);

                    _this = _super.call(this, 'localhost');
                    _this._appManager = appManager;
                    _this.error = {
                        EEXIST: 'File already exists'
                    };
                    _this._isReady = false;
                    _this._readOnlyFiles = {};
                    _this._readOnlyMode = false;
                    _this.filesContent = {};
                    _this.files = {};
                    return _this;
                }

                _createClass(RemixDProvider, [
                    {
                        key: "_registerEvent",
                        value: function _registerEvent() {
                            var _this2 = this;

                            var remixdEvents = ['connecting', 'connected', 'errored', 'closed'];
                            remixdEvents.forEach(function (event) {
                                _this2._appManager.on('remixd', event, function (value) {
                                    _this2.event.emit(event, value);
                                });
                            });

                            this._appManager.on('remixd', 'folderAdded', function (path) {
                                _this2.event.emit('folderAdded', path);
                            });

                            this._appManager.on('remixd', 'fileAdded', function (path) {
                                _this2.event.emit('fileAdded', path);
                            });

                            this._appManager.on('remixd', 'fileChanged', function (path) {
                                _this2.event.emit('fileChanged', path);
                            });

                            this._appManager.on('remixd', 'fileRemoved', function (path) {
                                _this2.event.emit('fileRemoved', path);
                            });

                            this._appManager.on('remixd', 'fileRenamed', function (oldPath, newPath) {
                                _this2.event.emit('fileRenamed', oldPath, newPath);
                            });

                            this._appManager.on('remixd', 'rootFolderChanged', function (path) {
                                _this2.event.emit('rootFolderChanged', path);
                            });

                            this._appManager.on('remixd', 'removed', function (path) {
                                _this2.event.emit('fileRemoved', path);
                            });

                            this._appManager.on('remixd', 'changed', function (path) {
                                _this2.get(path, function (_error, content) {
                                    _this2.event.emit('fileExternallyChanged', path, content);
                                });
                            });
                        }
                    }, {
                        key: "isConnected",
                        value: function isConnected() {
                            return this._isReady;
                        }
                    }, {
                        key: "close",
                        value: function close(cb) {
                            this._isReady = false;
                            cb();
                            this.event.emit('disconnected');
                        }
                    }, {
                        key: "preInit",
                        value: function preInit() {
                            this.event.emit('loadingLocalhost');
                        }
                    }, {
                        key: "init",
                        value: function init(cb) {
                            var _this3 = this;

                            if (this._isReady) {
                                return cb && cb();
                            }

                            this._appManager.call('remixd', 'folderIsReadOnly', {}).then(function (result) {
                                _this3._isReady = true;
                                _this3._readOnlyMode = result;

                                _this3.event.emit('readOnlyModeChanged', result);

                                _this3._registerEvent();

                                _this3.event.emit('connected');

                                cb && cb();
                            })["catch"](function (error) {
                                cb && cb(error);
                            });
                        }
                    }, {
                        key: "exists",
                        value: function exists(path) {
                            if (!this._isReady) {
                                throw new Error('provider not ready');
                            }
                            var unprefixedpath = this.removePrefix(path);
                            return this._appManager.call('remixd', 'exists', {
                                path: unprefixedpath
                            }).then(function (result) {
                                return result;
                            })["catch"](function (error) {
                                throw new Error(error);
                            });
                        }
                    }, {
                        key: "get",
                        value: function get(path, cb) {
                            var _this4 = this;

                            if (!this._isReady) {
                                return cb && cb('provider not ready');
                            }
                            var unprefixedpath = this.removePrefix(path);

                            this._appManager.call('remixd', 'get', {
                                path: unprefixedpath
                            }).then(function (file) {
                                _this4.filesContent[path] = file.content;

                                if (file.readonly) {
                                    _this4._readOnlyFiles[path] = 1;
                                }

                                cb(null, file.content);
                            })["catch"](function (error) {
                                if (error) {
                                    console.log(error);
                                } // display the last known content.
                                // TODO should perhaps better warn the user that the file is not synced.

                                return cb(null, _this4.filesContent[path]);
                            });
                        }
                    }, {
                        key: "set",
                        value: function () {
                            var _set = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path, content, cb) {
                                var unprefixedpath;
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                if (this._isReady) {
                                                    _context2.next = 2;
                                                    break;
                                                }

                                                return _context2.abrupt("return", cb && cb('provider not ready'));

                                            case 2:
                                                unprefixedpath = this.removePrefix(path);
                                                return _context2.abrupt("return", this._appManager.call('remixd', 'set', {
                                                    path: unprefixedpath,
                                                    content: content
                                                }).then( /*#__PURE__*/function () {
                                                    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                                                        return regeneratorRuntime.wrap(function _callee$(_context) {
                                                            while (1) {
                                                                switch (_context.prev = _context.next) {
                                                                    case 0:
                                                                        if (!cb) {
                                                                            _context.next = 2;
                                                                            break;
                                                                        }

                                                                        return _context.abrupt("return", cb(null, result));

                                                                    case 2:
                                                                    case "end":
                                                                        return _context.stop();
                                                                }
                                                            }
                                                        }, _callee);
                                                    }));

                                                    return function (_x4) {
                                                        return _ref.apply(this, arguments);
                                                    };
                                                }())["catch"](function (error) {
                                                    if (cb) {
                                                        return cb(error);
                                                    }
                                                    throw new Error(error);
                                                }));

                                            case 4:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function set(_x, _x2, _x3) {
                                return _set.apply(this, arguments);
                            }

                            return set;
                        }()
                    }, {
                        key: "createDir",
                        value: function () {
                            var _createDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, cb) {
                                var unprefixedpath;
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                if (this._isReady) {
                                                    _context3.next = 2;
                                                    break;
                                                }

                                                return _context3.abrupt("return", cb && cb('provider not ready'));

                                            case 2:
                                                unprefixedpath = this.removePrefix(path);
                                                return _context3.abrupt("return", this._appManager.call('remixd', 'createDir', {
                                                    path: unprefixedpath
                                                }));

                                            case 4:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function createDir(_x5, _x6) {
                                return _createDir.apply(this, arguments);
                            }

                            return createDir;
                        }()
                    }, {
                        key: "isReadOnly",
                        value: function isReadOnly(path) {
                            return this._readOnlyMode || this._readOnlyFiles[path] === 1;
                        }
                    }, {
                        key: "remove",
                        value: function remove(path) {
                            var _this5 = this;

                            return new Promise(function (resolve, reject) {
                                if (!_this5._isReady) {
                                    return reject(new Error('provider not ready'));
                                }

                                var unprefixedpath = _this5.removePrefix(path);

                                _this5._appManager.call('remixd', 'remove', {
                                    path: unprefixedpath
                                }).then(function (result) {
                                    var path = unprefixedpath;
                                    delete _this5.filesContent[path];
                                    resolve(true);

                                    _this5.init();
                                })["catch"](function (error) {
                                    if (error) {
                                        console.log(error);
                                    }
                                    resolve(false);
                                });
                            });
                        }
                    }, {
                        key: "rename",
                        value: function rename(oldPath, newPath, isFolder) {
                            var _this6 = this;

                            var unprefixedoldPath = this.removePrefix(oldPath);
                            var unprefixednewPath = this.removePrefix(newPath);
                            if (!this._isReady) {
                                return new Promise(function (resolve, reject) {
                                    return reject(new Error('provider not ready'));
                                });
                            }
                            return this._appManager.call('remixd', 'rename', {
                                oldPath: unprefixedoldPath,
                                newPath: unprefixednewPath
                            }).then(function (result) {
                                var newPath = unprefixednewPath;
                                var oldPath = unprefixedoldPath;
                                _this6.filesContent[newPath] = _this6.filesContent[oldPath];
                                delete _this6.filesContent[oldPath];

                                _this6.init(function () {
                                    _this6.event.emit('fileRenamed', oldPath, newPath, isFolder);
                                });

                                return result;
                            })["catch"](function (error) {
                                console.log(error);
                                if (_this6.error[error.code]) {
                                    error = _this6.error[error.code];
                                }

                                _this6.event.emit('fileRenamedError', _this6.error[error.code]);
                            });
                        }
                    }, {
                        key: "isExternalFolder",
                        value: function isExternalFolder(path) {
                            return false;
                        }
                    }, {
                        key: "removePrefix",
                        value: function removePrefix(path) {
                            path = path.indexOf(this.type) === 0 ? path.replace(this.type, '') : path;
                            if (path[0] === '/') {
                                return path.substring(1);
                            }
                            if (path === '') {
                                return '/';
                            }
                            return path;
                        }
                    }, {
                        key: "resolveDirectory",
                        value: function resolveDirectory(path, callback) {
                            if (path[0] === '/') {
                                path = path.substring(1);
                            }
                            var unprefixedpath = this.removePrefix(path);
                            if (!this._isReady) {
                                return callback && callback('provider not ready');
                            }

                            this._appManager.call('remixd', 'resolveDirectory', {
                                path: unprefixedpath
                            }).then(function (result) {
                                callback(null, result);
                            })["catch"](callback);
                        }
                    }, {
                        key: "isDirectory",
                        value: function () {
                            var _isDirectory = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path) {
                                var unprefixedpath;
                                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                        switch (_context4.prev = _context4.next) {
                                            case 0:
                                                unprefixedpath = this.removePrefix(path);

                                                if (this._isReady) {
                                                    _context4.next = 3;
                                                    break;
                                                }

                                                throw new Error('provider not ready');

                                            case 3:
                                                _context4.next = 5;
                                                return this._appManager.call('remixd', 'isDirectory', {
                                                    path: unprefixedpath
                                                });

                                            case 5:
                                                return _context4.abrupt("return", _context4.sent);

                                            case 6:
                                            case "end":
                                                return _context4.stop();
                                        }
                                    }
                                }, _callee4, this);
                            }));

                            function isDirectory(_x7) {
                                return _isDirectory.apply(this, arguments);
                            }

                            return isDirectory;
                        }()
                    }, {
                        key: "isFile",
                        value: function () {
                            var _isFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(path) {
                                var unprefixedpath;
                                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                unprefixedpath = this.removePrefix(path);

                                                if (this._isReady) {
                                                    _context5.next = 3;
                                                    break;
                                                }

                                                throw new Error('provider not ready');

                                            case 3:
                                                _context5.next = 5;
                                                return this._appManager.call('remixd', 'isFile', {
                                                    path: unprefixedpath
                                                });

                                            case 5:
                                                return _context5.abrupt("return", _context5.sent);

                                            case 6:
                                            case "end":
                                                return _context5.stop();
                                        }
                                    }
                                }, _callee5, this);
                            }));

                            function isFile(_x8) {
                                return _isFile.apply(this, arguments);
                            }

                            return isFile;
                        }()
                    }
                ]);

                return RemixDProvider;
            }(FileProvider);

            /***/
        }),

        /***/ 1982:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var CONFIG_FILE = '.remix.config';

            var EventEmitter = __webpack_require__(510);

            function Config(storage) {
                this.items = {};
                this.unpersistedItems = {};
                this.events = new EventEmitter(); // load on instantiation

                try {
                    var config = storage.get(CONFIG_FILE);

                    if (config) {
                        this.items = JSON.parse(config);
                    }
                } catch (exception) {
                }

                this.exists = function (key) {
                    return this.items[key] !== undefined;
                };

                this.get = function (key) {
                    return this.items[key];
                };

                this.set = function (key, content) {
                    this.items[key] = content;

                    try {
                        storage.set(CONFIG_FILE, JSON.stringify(this.items));
                        this.events.emit(key + '_changed', content);
                    } catch (exception) {
                    }
                };

                this.getUnpersistedProperty = function (key) {
                    return this.unpersistedItems[key];
                }; // TODO: this only used for *one* property "doNotShowTransactionConfirmationAgain"
                // and can be removed once it's refactored away in txRunner


                this.setUnpersistedProperty = function (key, value) {
                    this.unpersistedItems[key] = value;
                };
            }

            module.exports = Config;

            /***/
        }),

        /***/ 1983:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            var _async = _interopRequireDefault(__webpack_require__(541));

            var _engine = __webpack_require__(509);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _registry = _interopRequireDefault(__webpack_require__(576));

            var _events = __webpack_require__(510);

            var _helper = __webpack_require__(543);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
            }

            function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) {
                    return;
                }
                if (typeof o === "string") {
                    return _arrayLikeToArray(o, minLen);
                }
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor) {
                    n = o.constructor.name;
                }
                if (n === "Map" || n === "Set") {
                    return Array.from(o);
                }
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
                    return _arrayLikeToArray(o, minLen);
                }
            }

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) {
                    len = arr.length;
                }
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            }

            function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null) {
                    return;
                }
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) {
                            break;
                        }
                    }
                } catch (err) {
                    _d = true;
                    _e = err;
                } finally {
                    try {
                        if (!_n && _i["return"] != null) {
                            _i["return"]();
                        }
                    } finally {
                        if (_d) {
                            throw _e;
                        }
                    }
                }
                return _arr;
            }

            function _arrayWithHoles(arr) {
                if (Array.isArray(arr)) {
                    return arr;
                }
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var helper = __webpack_require__(575);
            /*
  attach to files event (removed renamed)
  trigger: currentFileChanged
*/


            var profile = {
                name: 'fileManager',
                displayName: 'File manager',
                description: 'Service - read/write to any files or folders, require giving permissions',
                icon: 'assets/img/fileManager.webp',
                permission: true,
                version: packageJson.version,
                methods: ['closeAllFiles', 'closeFile', 'file', 'exists', 'open', 'writeFile', 'readFile', 'copyFile', 'copyDir', 'rename', 'mkdir', 'readdir', 'remove', 'getCurrentFile', 'getFile', 'getFolder', 'setFile', 'switchFile', 'refresh', 'getProviderOf', 'getProviderByName', 'getPathFromUrl', 'getUrlFromPath', 'saveCurrentFile', 'setBatchFiles'],
                kind: 'file-system'
            };
            var errorMsg = {
                ENOENT: 'No such file or directory',
                EISDIR: 'Path is a directory',
                ENOTDIR: 'Path is not on a directory',
                EEXIST: 'File already exists',
                EPERM: 'Permission denied'
            };

            var createError = function createError(err) {
                return new Error("".concat(errorMsg[err.code], " ").concat(err.message || ''));
            };

            var FileManager = /*#__PURE__*/function (_Plugin) {
                _inherits(FileManager, _Plugin);

                var _super = _createSuper(FileManager);

                function FileManager(editor, appManager) {
                    var _this;

                    _classCallCheck(this, FileManager);

                    _this = _super.call(this, profile);

                    _defineProperty(_assertThisInitialized(_this), "mode", void 0);

                    _defineProperty(_assertThisInitialized(_this), "openedFiles", void 0);

                    _defineProperty(_assertThisInitialized(_this), "events", void 0);

                    _defineProperty(_assertThisInitialized(_this), "editor", void 0);

                    _defineProperty(_assertThisInitialized(_this), "_components", void 0);

                    _defineProperty(_assertThisInitialized(_this), "appManager", void 0);

                    _defineProperty(_assertThisInitialized(_this), "_deps", void 0);

                    _defineProperty(_assertThisInitialized(_this), "getCurrentFile", void 0);

                    _defineProperty(_assertThisInitialized(_this), "getFile", void 0);

                    _defineProperty(_assertThisInitialized(_this), "getFolder", void 0);

                    _defineProperty(_assertThisInitialized(_this), "setFile", void 0);

                    _defineProperty(_assertThisInitialized(_this), "switchFile", void 0);

                    _this.mode = 'browser';
                    _this.openedFiles = {}; // list all opened files

                    _this.events = new _events.EventEmitter();
                    _this.editor = editor;
                    _this._components = {};
                    _this._components.registry = _registry["default"].getInstance();
                    _this.appManager = appManager;

                    _this.init();

                    return _this;
                }

                _createClass(FileManager, [
                    {
                        key: "getOpenedFiles",
                        value: function getOpenedFiles() {
                            return this.openedFiles;
                        }
                    }, {
                        key: "setMode",
                        value: function setMode(mode) {
                            this.mode = mode;
                        }
                    }, {
                        key: "limitPluginScope",
                        value: function limitPluginScope(path) {
                            return path.replace(/^\/browser\//, '').replace(/^browser\//, ''); // forbids plugin to access the root filesystem
                        }
                    }, {
                        key: "normalize",
                        value: function normalize(path) {
                            return path.replace(/^\/+/, '');
                        }
                        /**
                         * Emit error if path doesn't exist
                         * @param {string} path path of the file/directory
                         * @param {string} message message to display if path doesn't exist.
                         */

                    }, {
                        key: "_handleExists",
                        value: function () {
                            var _handleExists2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, message) {
                                var exists;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.next = 2;
                                                return this.exists(path);

                                            case 2:
                                                exists = _context.sent;

                                                if (exists) {
                                                    _context.next = 5;
                                                    break;
                                                }

                                                throw createError({
                                                    code: 'ENOENT',
                                                    message: message
                                                });

                                            case 5:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function _handleExists(_x, _x2) {
                                return _handleExists2.apply(this, arguments);
                            }

                            return _handleExists;
                        }()
                        /**
                         * Emit error if path is not a file
                         * @param {string} path path of the file/directory
                         * @param {string} message message to display if path is not a file.
                         */

                    }, {
                        key: "_handleIsFile",
                        value: function () {
                            var _handleIsFile2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path, message) {
                                var isFile;
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _context2.next = 2;
                                                return this.isFile(path);

                                            case 2:
                                                isFile = _context2.sent;

                                                if (isFile) {
                                                    _context2.next = 5;
                                                    break;
                                                }

                                                throw createError({
                                                    code: 'EISDIR',
                                                    message: message
                                                });

                                            case 5:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function _handleIsFile(_x3, _x4) {
                                return _handleIsFile2.apply(this, arguments);
                            }

                            return _handleIsFile;
                        }()
                        /**
                         * Emit error if path is not a directory
                         * @param {string} path path of the file/directory
                         * @param {string} message message to display if path is not a directory.
                         */

                    }, {
                        key: "_handleIsDir",
                        value: function () {
                            var _handleIsDir2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, message) {
                                var isDir;
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                _context3.next = 2;
                                                return this.isDirectory(path);

                                            case 2:
                                                isDir = _context3.sent;

                                                if (isDir) {
                                                    _context3.next = 5;
                                                    break;
                                                }

                                                throw createError({
                                                    code: 'ENOTDIR',
                                                    message: message
                                                });

                                            case 5:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function _handleIsDir(_x5, _x6) {
                                return _handleIsDir2.apply(this, arguments);
                            }

                            return _handleIsDir;
                        }()
                        /** The current opened file */

                    }, {
                        key: "file",
                        value: function file() {
                            try {
                                var file = this.currentFile();
                                if (!file) {
                                    throw createError({
                                        code: 'ENOENT',
                                        message: 'No file selected'
                                    });
                                }
                                return file;
                            } catch (e) {
                                throw new Error(e);
                            }
                        }
                        /**
                         * Verify if the path exists (directory or file)
                         * @param {string} path path of the directory or file
                         * @returns {boolean} true if the path exists
                         */

                    }, {
                        key: "exists",
                        value: function exists(path) {
                            try {
                                path = this.normalize(path);
                                path = this.limitPluginScope(path);
                                var provider = this.fileProviderOf(path);
                                var result = provider.exists(path);
                                return result;
                            } catch (e) {
                                throw new Error(e);
                            }
                        }
                        /*
    * refresh the file explorer
    */

                    }, {
                        key: "refresh",
                        value: function refresh() {
                            var provider = this.fileProviderOf('/'); // emit rootFolderChanged so that File Explorer reloads the file tree

                            provider.event.emit('rootFolderChanged', provider.workspace || '/');
                            this.emit('rootFolderChanged', provider.workspace || '/');
                        }
                        /**
                         * Verify if the path provided is a file
                         * @param {string} path path of the directory or file
                         * @returns {boolean} true if path is a file.
                         */

                    }, {
                        key: "isFile",
                        value: function isFile(path) {
                            var provider = this.fileProviderOf(path);
                            var result = provider.isFile(path);
                            return result;
                        }
                        /**
                         * Verify if the path provided is a directory
                         * @param {string} path path of the directory
                         * @returns {boolean} true if path is a directory.
                         */

                    }, {
                        key: "isDirectory",
                        value: function () {
                            var _isDirectory = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path) {
                                var provider, result;
                                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                        switch (_context4.prev = _context4.next) {
                                            case 0:
                                                provider = this.fileProviderOf(path);
                                                _context4.next = 3;
                                                return provider.isDirectory(path);

                                            case 3:
                                                result = _context4.sent;
                                                return _context4.abrupt("return", result);

                                            case 5:
                                            case "end":
                                                return _context4.stop();
                                        }
                                    }
                                }, _callee4, this);
                            }));

                            function isDirectory(_x7) {
                                return _isDirectory.apply(this, arguments);
                            }

                            return isDirectory;
                        }()
                        /**
                         * Open the content of the file in the context (eg: Editor)
                         * @param {string} path path of the file
                         * @returns {void}
                         */

                    }, {
                        key: "open",
                        value: function () {
                            var _open = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(path) {
                                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                path = this.getPathFromUrl(path).file;
                                                _context5.next = 5;
                                                return this._handleExists(path, "Cannot open file ".concat(path));

                                            case 5:
                                                _context5.next = 7;
                                                return this._handleIsFile(path, "Cannot open file ".concat(path));

                                            case 7:
                                                _context5.next = 9;
                                                return this.openFile(path);

                                            case 9:
                                            case "end":
                                                return _context5.stop();
                                        }
                                    }
                                }, _callee5, this);
                            }));

                            function open(_x8) {
                                return _open.apply(this, arguments);
                            }

                            return open;
                        }()
                        /**
                         * Set the content of a specific file
                         * @param {string} path path of the file
                         * @param {string} data content to write on the file
                         * @returns {void}
                         */

                    }, {
                        key: "writeFile",
                        value: function () {
                            var _writeFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, data) {
                                var ret;
                                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                    while (1) {
                                        switch (_context6.prev = _context6.next) {
                                            case 0:
                                                _context6.prev = 0;
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                _context6.next = 5;
                                                return this.exists(path);

                                            case 5:
                                                if (!_context6.sent) {
                                                    _context6.next = 13;
                                                    break;
                                                }

                                                _context6.next = 8;
                                                return this._handleIsFile(path, "Cannot write file ".concat(path));

                                            case 8:
                                                _context6.next = 10;
                                                return this.setFileContent(path, data);

                                            case 10:
                                                return _context6.abrupt("return", _context6.sent);

                                            case 13:
                                                _context6.next = 15;
                                                return this.setFileContent(path, data);

                                            case 15:
                                                ret = _context6.sent;
                                                this.emit('fileAdded', path);
                                                return _context6.abrupt("return", ret);

                                            case 18:
                                                _context6.next = 23;
                                                break;

                                            case 20:
                                                _context6.prev = 20;
                                                _context6.t0 = _context6["catch"](0);
                                                throw new Error(_context6.t0);

                                            case 23:
                                            case "end":
                                                return _context6.stop();
                                        }
                                    }
                                }, _callee6, this, [[0, 20]]);
                            }));

                            function writeFile(_x9, _x10) {
                                return _writeFile.apply(this, arguments);
                            }

                            return writeFile;
                        }()
                        /**
                         * Return the content of a specific file
                         * @param {string} path path of the file
                         * @returns {string} content of the file
                         */

                    }, {
                        key: "readFile",
                        value: function () {
                            var _readFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(path) {
                                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                    while (1) {
                                        switch (_context7.prev = _context7.next) {
                                            case 0:
                                                _context7.prev = 0;
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                _context7.next = 5;
                                                return this._handleExists(path, "Cannot read file ".concat(path));

                                            case 5:
                                                _context7.next = 7;
                                                return this._handleIsFile(path, "Cannot read file ".concat(path));

                                            case 7:
                                                return _context7.abrupt("return", this.getFileContent(path));

                                            case 10:
                                                _context7.prev = 10;
                                                _context7.t0 = _context7["catch"](0);
                                                throw new Error(_context7.t0);

                                            case 13:
                                            case "end":
                                                return _context7.stop();
                                        }
                                    }
                                }, _callee7, this, [[0, 10]]);
                            }));

                            function readFile(_x11) {
                                return _readFile.apply(this, arguments);
                            }

                            return readFile;
                        }()
                        /**
                         * Upsert a file with the content of the source file
                         * @param {string} src path of the source file
                         * @param {string} dest path of the destrination file
                         * @returns {void}
                         */

                    }, {
                        key: "copyFile",
                        value: function () {
                            var _copyFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(src, dest, customName) {
                                var content, copiedFilePath;
                                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                                    while (1) {
                                        switch (_context8.prev = _context8.next) {
                                            case 0:
                                                _context8.prev = 0;
                                                src = this.normalize(src);
                                                dest = this.normalize(dest);
                                                src = this.limitPluginScope(src);
                                                dest = this.limitPluginScope(dest);
                                                _context8.next = 7;
                                                return this._handleExists(src, "Cannot copy from ".concat(src, ". Path does not exist."));

                                            case 7:
                                                _context8.next = 9;
                                                return this._handleIsFile(src, "Cannot copy from ".concat(src, ". Path is not a file."));

                                            case 9:
                                                _context8.next = 11;
                                                return this._handleExists(dest, "Cannot paste content into ".concat(dest, ". Path does not exist."));

                                            case 11:
                                                _context8.next = 13;
                                                return this._handleIsDir(dest, "Cannot paste content into ".concat(dest, ". Path is not directory."));

                                            case 13:
                                                _context8.next = 15;
                                                return this.readFile(src);

                                            case 15:
                                                content = _context8.sent;
                                                copiedFilePath = dest + (customName ? '/' + customName : '/' + "Copy_".concat(helper.extractNameFromKey(src)));
                                                _context8.next = 19;
                                                return helper.createNonClashingNameAsync(copiedFilePath, this);

                                            case 19:
                                                copiedFilePath = _context8.sent;
                                                _context8.next = 22;
                                                return this.writeFile(copiedFilePath, content);

                                            case 22:
                                                _context8.next = 27;
                                                break;

                                            case 24:
                                                _context8.prev = 24;
                                                _context8.t0 = _context8["catch"](0);
                                                throw new Error(_context8.t0);

                                            case 27:
                                            case "end":
                                                return _context8.stop();
                                        }
                                    }
                                }, _callee8, this, [[0, 24]]);
                            }));

                            function copyFile(_x12, _x13, _x14) {
                                return _copyFile.apply(this, arguments);
                            }

                            return copyFile;
                        }()
                        /**
                         * Upsert a directory with the content of the source directory
                         * @param {string} src path of the source dir
                         * @param {string} dest path of the destination dir
                         * @returns {void}
                         */

                    }, {
                        key: "copyDir",
                        value: function () {
                            var _copyDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(src, dest) {
                                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                                    while (1) {
                                        switch (_context9.prev = _context9.next) {
                                            case 0:
                                                _context9.prev = 0;
                                                src = this.normalize(src);
                                                dest = this.normalize(dest);
                                                src = this.limitPluginScope(src);
                                                dest = this.limitPluginScope(dest);
                                                _context9.next = 7;
                                                return this._handleExists(src, "Cannot copy from ".concat(src, ". Path does not exist."));

                                            case 7:
                                                _context9.next = 9;
                                                return this._handleIsDir(src, "Cannot copy from ".concat(src, ". Path is not a directory."));

                                            case 9:
                                                _context9.next = 11;
                                                return this._handleExists(dest, "Cannot paste content into ".concat(dest, ". Path does not exist."));

                                            case 11:
                                                _context9.next = 13;
                                                return this._handleIsDir(dest, "Cannot paste content into ".concat(dest, ". Path is not directory."));

                                            case 13:
                                                _context9.next = 15;
                                                return this.inDepthCopy(src, dest);

                                            case 15:
                                                _context9.next = 20;
                                                break;

                                            case 17:
                                                _context9.prev = 17;
                                                _context9.t0 = _context9["catch"](0);
                                                throw new Error(_context9.t0);

                                            case 20:
                                            case "end":
                                                return _context9.stop();
                                        }
                                    }
                                }, _callee9, this, [[0, 17]]);
                            }));

                            function copyDir(_x15, _x16) {
                                return _copyDir.apply(this, arguments);
                            }

                            return copyDir;
                        }()
                    }, {
                        key: "inDepthCopy",
                        value: function () {
                            var _inDepthCopy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(src, dest) {
                                var count,
                                    content,
                                    copiedFolderPath,
                                    _i,
                                    _Object$entries,
                                    _Object$entries$_i,
                                    key,
                                    value,
                                    _args10 = arguments;

                                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                    while (1) {
                                        switch (_context10.prev = _context10.next) {
                                            case 0:
                                                count = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 0;
                                                _context10.next = 3;
                                                return this.readdir(src);

                                            case 3:
                                                content = _context10.sent;
                                                copiedFolderPath = count === 0 ? dest + '/' + "Copy_".concat(helper.extractNameFromKey(src)) : dest + '/' + helper.extractNameFromKey(src);
                                                _context10.next = 7;
                                                return helper.createNonClashingDirNameAsync(copiedFolderPath, this);

                                            case 7:
                                                copiedFolderPath = _context10.sent;
                                                _context10.next = 10;
                                                return this.mkdir(copiedFolderPath);

                                            case 10:
                                                _i = 0, _Object$entries = Object.entries(content);

                                            case 11:
                                                if (!(_i < _Object$entries.length)) {
                                                    _context10.next = 23;
                                                    break;
                                                }

                                                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];

                                                if (value.isDirectory) {
                                                    _context10.next = 18;
                                                    break;
                                                }

                                                _context10.next = 16;
                                                return this.copyFile(key, copiedFolderPath, helper.extractNameFromKey(key));

                                            case 16:
                                                _context10.next = 20;
                                                break;

                                            case 18:
                                                _context10.next = 20;
                                                return this.inDepthCopy(key, copiedFolderPath, count + 1);

                                            case 20:
                                                _i++;
                                                _context10.next = 11;
                                                break;

                                            case 23:
                                            case "end":
                                                return _context10.stop();
                                        }
                                    }
                                }, _callee10, this);
                            }));

                            function inDepthCopy(_x17, _x18) {
                                return _inDepthCopy.apply(this, arguments);
                            }

                            return inDepthCopy;
                        }()
                        /**
                         * Change the path of a file/directory
                         * @param {string} oldPath current path of the file/directory
                         * @param {string} newPath new path of the file/directory
                         * @returns {void}
                         */

                    }, {
                        key: "rename",
                        value: function () {
                            var _rename = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(oldPath, newPath) {
                                var isFile, newPathExists, provider;
                                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                                    while (1) {
                                        switch (_context11.prev = _context11.next) {
                                            case 0:
                                                _context11.prev = 0;
                                                oldPath = this.normalize(oldPath);
                                                newPath = this.normalize(newPath);
                                                oldPath = this.limitPluginScope(oldPath);
                                                newPath = this.limitPluginScope(newPath);
                                                _context11.next = 7;
                                                return this._handleExists(oldPath, "Cannot rename ".concat(oldPath));

                                            case 7:
                                                _context11.next = 9;
                                                return this.isFile(oldPath);

                                            case 9:
                                                isFile = _context11.sent;
                                                _context11.next = 12;
                                                return this.exists(newPath);

                                            case 12:
                                                newPathExists = _context11.sent;
                                                provider = this.fileProviderOf(oldPath);

                                                if (!isFile) {
                                                    _context11.next = 21;
                                                    break;
                                                }

                                                if (!newPathExists) {
                                                    _context11.next = 18;
                                                    break;
                                                }

                                                this.call('notification', 'alert', {
                                                    id: 'fileManagerAlert',
                                                    message: 'File already exists'
                                                });
                                                return _context11.abrupt("return");

                                            case 18:
                                                return _context11.abrupt("return", provider.rename(oldPath, newPath, false));

                                            case 21:
                                                if (!newPathExists) {
                                                    _context11.next = 24;
                                                    break;
                                                }

                                                this.call('notification', 'alert', {
                                                    id: 'fileManagerAlert',
                                                    message: 'Directory already exists'
                                                });
                                                return _context11.abrupt("return");

                                            case 24:
                                                return _context11.abrupt("return", provider.rename(oldPath, newPath, true));

                                            case 25:
                                                _context11.next = 30;
                                                break;

                                            case 27:
                                                _context11.prev = 27;
                                                _context11.t0 = _context11["catch"](0);
                                                throw new Error(_context11.t0);

                                            case 30:
                                            case "end":
                                                return _context11.stop();
                                        }
                                    }
                                }, _callee11, this, [[0, 27]]);
                            }));

                            function rename(_x19, _x20) {
                                return _rename.apply(this, arguments);
                            }

                            return rename;
                        }()
                        /**
                         * Create a directory
                         * @param {string} path path of the new directory
                         * @returns {void}
                         */

                    }, {
                        key: "mkdir",
                        value: function () {
                            var _mkdir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(path) {
                                var provider;
                                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                                    while (1) {
                                        switch (_context12.prev = _context12.next) {
                                            case 0:
                                                _context12.prev = 0;
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                _context12.next = 5;
                                                return this.exists(path);

                                            case 5:
                                                if (!_context12.sent) {
                                                    _context12.next = 7;
                                                    break;
                                                }

                                                throw createError({
                                                    code: 'EEXIST',
                                                    message: "Cannot create directory ".concat(path)
                                                });

                                            case 7:
                                                provider = this.fileProviderOf(path);
                                                return _context12.abrupt("return", provider.createDir(path));

                                            case 11:
                                                _context12.prev = 11;
                                                _context12.t0 = _context12["catch"](0);
                                                throw new Error(_context12.t0);

                                            case 14:
                                            case "end":
                                                return _context12.stop();
                                        }
                                    }
                                }, _callee12, this, [[0, 11]]);
                            }));

                            function mkdir(_x21) {
                                return _mkdir.apply(this, arguments);
                            }

                            return mkdir;
                        }()
                        /**
                         * Get the list of files in the directory
                         * @param {string} path path of the directory
                         * @returns {string[]} list of the file/directory name in this directory
                         */

                    }, {
                        key: "readdir",
                        value: function () {
                            var _readdir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(path) {
                                var _this2 = this;

                                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                                    while (1) {
                                        switch (_context13.prev = _context13.next) {
                                            case 0:
                                                _context13.prev = 0;
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                _context13.next = 5;
                                                return this._handleExists(path);

                                            case 5:
                                                _context13.next = 7;
                                                return this._handleIsDir(path);

                                            case 7:
                                                return _context13.abrupt("return", new Promise(function (resolve, reject) {
                                                    var provider = _this2.fileProviderOf(path);

                                                    provider.resolveDirectory(path, function (error, filesProvider) {
                                                        if (error) {
                                                            reject(error);
                                                        }
                                                        resolve(filesProvider);
                                                    });
                                                }));

                                            case 10:
                                                _context13.prev = 10;
                                                _context13.t0 = _context13["catch"](0);
                                                throw new Error(_context13.t0);

                                            case 13:
                                            case "end":
                                                return _context13.stop();
                                        }
                                    }
                                }, _callee13, this, [[0, 10]]);
                            }));

                            function readdir(_x22) {
                                return _readdir.apply(this, arguments);
                            }

                            return readdir;
                        }()
                        /**
                         * Removes a file or directory recursively
                         * @param {string} path path of the directory/file to remove
                         * @returns {void}
                         */

                    }, {
                        key: "remove",
                        value: function () {
                            var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(path) {
                                var provider;
                                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                                    while (1) {
                                        switch (_context14.prev = _context14.next) {
                                            case 0:
                                                _context14.prev = 0;
                                                path = this.normalize(path);
                                                path = this.limitPluginScope(path);
                                                _context14.next = 5;
                                                return this._handleExists(path, "Cannot remove file or directory ".concat(path));

                                            case 5:
                                                provider = this.fileProviderOf(path);
                                                _context14.next = 8;
                                                return provider.remove(path);

                                            case 8:
                                                return _context14.abrupt("return", _context14.sent);

                                            case 11:
                                                _context14.prev = 11;
                                                _context14.t0 = _context14["catch"](0);
                                                throw new Error(_context14.t0);

                                            case 14:
                                            case "end":
                                                return _context14.stop();
                                        }
                                    }
                                }, _callee14, this, [[0, 11]]);
                            }));

                            function remove(_x23) {
                                return _remove.apply(this, arguments);
                            }

                            return remove;
                        }()
                    }, {
                        key: "init",
                        value: function init() {
                            var _this3 = this;

                            this._deps = {
                                config: this._components.registry.get('config').api,
                                browserExplorer: this._components.registry.get('fileproviders/browser').api,
                                localhostExplorer: this._components.registry.get('fileproviders/localhost').api,
                                workspaceExplorer: this._components.registry.get('fileproviders/workspace').api,
                                filesProviders: this._components.registry.get('fileproviders').api
                            };

                            this._deps.browserExplorer.event.on('fileChanged', function (path) {
                                _this3.fileChangedEvent(path);
                            });

                            this._deps.browserExplorer.event.on('fileRenamed', function (oldName, newName, isFolder) {
                                _this3.fileRenamedEvent(oldName, newName, isFolder);
                            });

                            this._deps.localhostExplorer.event.on('fileRenamed', function (oldName, newName, isFolder) {
                                _this3.fileRenamedEvent(oldName, newName, isFolder);
                            });

                            this._deps.browserExplorer.event.on('fileRemoved', function (path) {
                                _this3.fileRemovedEvent(path);
                            });

                            this._deps.browserExplorer.event.on('fileAdded', function (path) {
                                _this3.fileAddedEvent(path);
                            });

                            this._deps.localhostExplorer.event.on('fileRemoved', function (path) {
                                _this3.fileRemovedEvent(path);
                            });

                            this._deps.localhostExplorer.event.on('errored', function (event) {
                                _this3.removeTabsOf(_this3._deps.localhostExplorer);
                            });

                            this._deps.localhostExplorer.event.on('closed', function (event) {
                                _this3.removeTabsOf(_this3._deps.localhostExplorer);
                            });

                            this._deps.workspaceExplorer.event.on('fileChanged', function (path) {
                                _this3.fileChangedEvent(path);
                            });

                            this._deps.workspaceExplorer.event.on('fileRenamed', function (oldName, newName, isFolder) {
                                _this3.fileRenamedEvent(oldName, newName, isFolder);
                            });

                            this._deps.workspaceExplorer.event.on('fileRemoved', function (path) {
                                _this3.fileRemovedEvent(path);
                            });

                            this._deps.workspaceExplorer.event.on('fileAdded', function (path) {
                                _this3.fileAddedEvent(path);
                            });

                            this.getCurrentFile = this.file;
                            this.getFile = this.readFile;
                            this.getFolder = this.readdir;
                            this.setFile = this.writeFile;
                            this.switchFile = this.open;
                        }
                    }, {
                        key: "fileAddedEvent",
                        value: function fileAddedEvent(path) {
                            this.emit('fileAdded', path);
                        }
                    }, {
                        key: "fileChangedEvent",
                        value: function fileChangedEvent(path) {
                            this.emit('fileChanged', path);
                        }
                    }, {
                        key: "fileRenamedEvent",
                        value: function fileRenamedEvent(oldName, newName, isFolder) {
                            if (!isFolder) {
                                this._deps.config.set('currentFile', '');

                                this.editor.discard(oldName);

                                if (this.openedFiles[oldName]) {
                                    delete this.openedFiles[oldName];
                                    this.openedFiles[newName] = newName;
                                }

                                this.openFile(newName);
                            } else {
                                for (var k in this.openedFiles) {
                                    if (k.indexOf(oldName + '/') === 0) {
                                        var newAbsolutePath = k.replace(oldName, newName);
                                        this.openedFiles[newAbsolutePath] = newAbsolutePath;
                                        delete this.openedFiles[k];

                                        if (this._deps.config.get('currentFile') === k) {
                                            this._deps.config.set('currentFile', '');
                                        }
                                    }
                                }
                            } // TODO: Only keep `this.emit` (issue#2210)


                            this.emit('fileRenamed', oldName, newName, isFolder);
                            this.events.emit('fileRenamed', oldName, newName, isFolder);
                        }
                    }, {
                        key: "currentFileProvider",
                        value: function currentFileProvider() {
                            var path = this.currentPath();

                            if (path) {
                                return this.fileProviderOf(path);
                            }

                            return null;
                        }
                    }, {
                        key: "currentFile",
                        value: function currentFile() {
                            return this.editor.current();
                        }
                    }, {
                        key: "closeAllFiles",
                        value: function () {
                            var _closeAllFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                                var file;
                                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                                    while (1) {
                                        switch (_context15.prev = _context15.next) {
                                            case 0:
                                                // TODO: Only keep `this.emit` (issue#2210)
                                                this.emit('filesAllClosed');
                                                this.events.emit('filesAllClosed');

                                                for (file in this.openedFiles) {
                                                    this.closeFile(file);
                                                }

                                            case 3:
                                            case "end":
                                                return _context15.stop();
                                        }
                                    }
                                }, _callee15, this);
                            }));

                            function closeAllFiles() {
                                return _closeAllFiles.apply(this, arguments);
                            }

                            return closeAllFiles;
                        }()
                    }, {
                        key: "closeFile",
                        value: function () {
                            var _closeFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(name) {
                                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                                    while (1) {
                                        switch (_context16.prev = _context16.next) {
                                            case 0:
                                                delete this.openedFiles[name];

                                                if (!Object.keys(this.openedFiles).length) {
                                                    this._deps.config.set('currentFile', ''); // TODO: Only keep `this.emit` (issue#2210)


                                                    this.emit('noFileSelected');
                                                    this.events.emit('noFileSelected');
                                                } // TODO: Only keep `this.emit` (issue#2210)


                                                this.emit('fileClosed', name);
                                                this.events.emit('fileClosed', name);

                                            case 4:
                                            case "end":
                                                return _context16.stop();
                                        }
                                    }
                                }, _callee16, this);
                            }));

                            function closeFile(_x24) {
                                return _closeFile.apply(this, arguments);
                            }

                            return closeFile;
                        }()
                    }, {
                        key: "currentPath",
                        value: function currentPath() {
                            var currentFile = this._deps.config.get('currentFile');

                            return this.extractPathOf(currentFile);
                        }
                    }, {
                        key: "extractPathOf",
                        value: function extractPathOf(file) {
                            var reg = /(.*)(\/).*/;
                            var path = reg.exec(file);
                            return path ? path[1] : '/';
                        }
                    }, {
                        key: "getFileContent",
                        value: function getFileContent(path) {
                            var _this4 = this;

                            var provider = this.fileProviderOf(path);
                            if (!provider) {
                                throw createError({
                                    code: 'ENOENT',
                                    message: "".concat(path, " not available")
                                });
                            } // TODO: change provider to Promise

                            return new Promise(function (resolve, reject) {
                                if (_this4.currentFile() === path) {
                                    return resolve(_this4.editor.currentContent());
                                }
                                provider.get(path, function (err, content) {
                                    if (err) {
                                        reject(err);
                                    }
                                    resolve(content);
                                });
                            });
                        }
                    }, {
                        key: "setFileContent",
                        value: function () {
                            var _setFileContent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(path, content) {
                                var canCall, required;
                                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                                    while (1) {
                                        switch (_context17.prev = _context17.next) {
                                            case 0:
                                                if (!this.currentRequest) {
                                                    _context17.next = 6;
                                                    break;
                                                }

                                                _context17.next = 3;
                                                return this.askUserPermission('writeFile', '');

                                            case 3:
                                                canCall = _context17.sent;
                                                required = this.appManager.isRequired(this.currentRequest.from);

                                                if (canCall && !required) {
                                                    // inform the user about modification after permission is granted and even if permission was saved before
                                                    this.call('notification', 'toast', (0, _helper.fileChangedToastMsg)(this.currentRequest.from, path));
                                                }

                                            case 6:
                                                _context17.next = 8;
                                                return this._setFileInternal(path, content);

                                            case 8:
                                                return _context17.abrupt("return", _context17.sent);

                                            case 9:
                                            case "end":
                                                return _context17.stop();
                                        }
                                    }
                                }, _callee17, this);
                            }));

                            function setFileContent(_x25, _x26) {
                                return _setFileContent.apply(this, arguments);
                            }

                            return setFileContent;
                        }()
                    }, {
                        key: "_setFileInternal",
                        value: function _setFileInternal(path, content) {
                            var _this5 = this;

                            var provider = this.fileProviderOf(path);
                            if (!provider) {
                                throw createError({
                                    code: 'ENOENT',
                                    message: "".concat(path, " not available")
                                });
                            } // TODO : Add permission
                            // TODO : Change Provider to Promise

                            return new Promise(function (resolve, reject) {
                                provider.set(path, content, function (error) {
                                    if (error) {
                                        reject(error);
                                    }

                                    _this5.syncEditor(path);

                                    _this5.emit('fileSaved', path);

                                    resolve(true);
                                });
                            });
                        }
                    }, {
                        key: "_saveAsCopy",
                        value: function _saveAsCopy(path, content) {
                            var _this6 = this;

                            var fileProvider = this.fileProviderOf(path);

                            if (fileProvider) {
                                helper.createNonClashingNameWithPrefix(path, fileProvider, '', function (error, copyName) {
                                    if (error) {
                                        copyName = path + '.' + _this6.currentRequest.from;
                                    }

                                    _this6._setFileInternal(copyName, content);

                                    _this6.openFile(copyName);
                                });
                            }
                        }
                        /**
                         * Try to resolve the given file path (the actual path in the file system)
                         * e.g if it's specified a github link, npm library, or any external content,
                         * it returns the actual path where the content can be found.
                         * @param {string} file url we are trying to resolve
                         * @returns {{ string, provider }} file path resolved and its provider.
                         */

                    }, {
                        key: "getPathFromUrl",
                        value: function getPathFromUrl(file) {
                            var provider = this.fileProviderOf(file);
                            if (!provider) {
                                throw new Error("no provider for ".concat(file));
                            }
                            return {
                                file: provider.getPathFromUrl(file) || file,
                                // in case an external URL is given as input, we resolve it to the right internal path
                                provider: provider
                            };
                        }
                        /**
                         * Try to resolve the given file URl. opposite of getPathFromUrl
                         * @param {string} file path we are trying to resolve
                         * @returns {{ string, provider }} file url resolved and its provider.
                         */

                    }, {
                        key: "getUrlFromPath",
                        value: function getUrlFromPath(file) {
                            var provider = this.fileProviderOf(file);
                            if (!provider) {
                                throw new Error("no provider for ".concat(file));
                            }
                            return {
                                file: provider.getUrlFromPath(file) || file,
                                // in case an external URL is given as input, we resolve it to the right internal path
                                provider: provider
                            };
                        }
                    }, {
                        key: "removeTabsOf",
                        value: function removeTabsOf(provider) {
                            for (var tab in this.openedFiles) {
                                if (this.fileProviderOf(tab).type === provider.type) {
                                    this.fileRemovedEvent(tab);
                                }
                            }
                        }
                    }, {
                        key: "fileRemovedEvent",
                        value: function fileRemovedEvent(path) {
                            if (path === this._deps.config.get('currentFile')) {
                                this._deps.config.set('currentFile', '');
                            }

                            this.editor.discard(path);
                            delete this.openedFiles[path]; // TODO: Only keep `this.emit` (issue#2210)

                            this.emit('fileRemoved', path);
                            this.events.emit('fileRemoved', path);
                            this.openFile();
                        }
                    }, {
                        key: "unselectCurrentFile",
                        value: function unselectCurrentFile() {
                            this.saveCurrentFile();

                            this._deps.config.set('currentFile', ''); // TODO: Only keep `this.emit` (issue#2210)


                            this.emit('noFileSelected');
                            this.events.emit('noFileSelected');
                        }
                    }, {
                        key: "openFile",
                        value: function () {
                            var _openFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(file) {
                                var _this7 = this;

                                var resolved, provider;
                                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                    while (1) {
                                        switch (_context18.prev = _context18.next) {
                                            case 0:
                                                if (file) {
                                                    _context18.next = 5;
                                                    break;
                                                }

                                                this.emit('noFileSelected');
                                                this.events.emit('noFileSelected');
                                                _context18.next = 14;
                                                break;

                                            case 5:
                                                file = this.normalize(file);
                                                this.saveCurrentFile();
                                                resolved = this.getPathFromUrl(file);
                                                file = resolved.file;
                                                provider = resolved.provider;

                                                this._deps.config.set('currentFile', file);

                                                this.openedFiles[file] = file;
                                                _context18.next = 14;
                                                return function () {
                                                    return new Promise(function (resolve, reject) {
                                                        provider.get(file, function (error, content) {
                                                            if (error) {
                                                                console.log(error);
                                                                reject(error);
                                                            } else {
                                                                if (provider.isReadOnly(file)) {
                                                                    _this7.editor.openReadOnly(file, content);
                                                                } else {
                                                                    _this7.editor.open(file, content);
                                                                } // TODO: Only keep `this.emit` (issue#2210)


                                                                // TODO: Only keep `this.emit` (issue#2210)
                                                                _this7.emit('currentFileChanged', file);

                                                                _this7.events.emit('currentFileChanged', file);

                                                                resolve(true);
                                                            }
                                                        });
                                                    });
                                                }();

                                            case 14:
                                            case "end":
                                                return _context18.stop();
                                        }
                                    }
                                }, _callee18, this);
                            }));

                            function openFile(_x27) {
                                return _openFile.apply(this, arguments);
                            }

                            return openFile;
                        }()
                        /**
                         * Async API method getProviderOf
                         * @param {string} file
                         *
                         */

                    }, {
                        key: "getProviderOf",
                        value: function () {
                            var _getProviderOf = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(file) {
                                var cancall;
                                return regeneratorRuntime.wrap(function _callee19$(_context19) {
                                    while (1) {
                                        switch (_context19.prev = _context19.next) {
                                            case 0:
                                                _context19.next = 2;
                                                return this.askUserPermission('getProviderByName');

                                            case 2:
                                                cancall = _context19.sent;

                                                if (!cancall) {
                                                    _context19.next = 5;
                                                    break;
                                                }

                                                return _context19.abrupt("return", file ? this.fileProviderOf(file) : this.currentFileProvider());

                                            case 5:
                                            case "end":
                                                return _context19.stop();
                                        }
                                    }
                                }, _callee19, this);
                            }));

                            function getProviderOf(_x28) {
                                return _getProviderOf.apply(this, arguments);
                            }

                            return getProviderOf;
                        }()
                        /**
                         * Async API method getProviderByName
                         * @param {string} name
                         *
                         */

                    }, {
                        key: "getProviderByName",
                        value: function () {
                            var _getProviderByName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(name) {
                                var cancall;
                                return regeneratorRuntime.wrap(function _callee20$(_context20) {
                                    while (1) {
                                        switch (_context20.prev = _context20.next) {
                                            case 0:
                                                _context20.next = 2;
                                                return this.askUserPermission('getProviderByName');

                                            case 2:
                                                cancall = _context20.sent;

                                                if (!cancall) {
                                                    _context20.next = 5;
                                                    break;
                                                }

                                                return _context20.abrupt("return", this.getProvider(name));

                                            case 5:
                                            case "end":
                                                return _context20.stop();
                                        }
                                    }
                                }, _callee20, this);
                            }));

                            function getProviderByName(_x29) {
                                return _getProviderByName.apply(this, arguments);
                            }

                            return getProviderByName;
                        }()
                    }, {
                        key: "getProvider",
                        value: function getProvider(name) {
                            return this._deps.filesProviders[name];
                        }
                    }, {
                        key: "fileProviderOf",
                        value: function fileProviderOf(file) {
                            if (file.startsWith('localhost') || this.mode === 'localhost') {
                                return this._deps.filesProviders.localhost;
                            }

                            if (file.startsWith('browser')) {
                                return this._deps.filesProviders.browser;
                            }

                            return this._deps.filesProviders.workspace;
                        } // returns the list of directories inside path

                    }, {
                        key: "dirList",
                        value: function dirList(path) {
                            var _this8 = this;

                            var dirPaths = [];

                            var collectList = function collectList(path) {
                                return new Promise(function (resolve, reject) {
                                    _this8.readdir(path).then(function (ls) {
                                        var promises = Object.keys(ls).map(function (item, index) {
                                            if (ls[item].isDirectory && !dirPaths.includes(item)) {
                                                dirPaths.push(item);
                                                resolve(dirPaths);
                                            }

                                            return new Promise(function (resolve, reject) {
                                                resolve(true);
                                            });
                                        });
                                        Promise.all(promises).then(function () {
                                            resolve(dirPaths);
                                        });
                                    });
                                });
                            };

                            return collectList(path);
                        }
                    }, {
                        key: "isRemixDActive",
                        value: function isRemixDActive() {
                            return this.appManager.isActive('remixd');
                        }
                    }, {
                        key: "saveCurrentFile",
                        value: function saveCurrentFile() {
                            var currentFile = this._deps.config.get('currentFile');

                            if (currentFile && this.editor.current()) {
                                var input = this.editor.get(currentFile);

                                if (input !== null && input !== undefined) {
                                    var provider = this.fileProviderOf(currentFile);

                                    if (provider) {
                                        provider.set(currentFile, input);
                                        this.emit('fileSaved', currentFile);
                                    } else {
                                        console.log('cannot save ' + currentFile + '. Does not belong to any explorer');
                                    }
                                }
                            }
                        }
                    }, {
                        key: "syncEditor",
                        value: function syncEditor(path) {
                            var _this9 = this;

                            var currentFile = this._deps.config.get('currentFile');

                            if (path !== currentFile) {
                                return;
                            }
                            var provider = this.fileProviderOf(currentFile);

                            if (provider) {
                                provider.get(currentFile, function (error, content) {
                                    if (error) {
                                        console.log(error);
                                    }

                                    _this9.editor.setText(content);
                                });
                            } else {
                                console.log('cannot save ' + currentFile + '. Does not belong to any explorer');
                            }
                        }
                    }, {
                        key: "setBatchFiles",
                        value: function setBatchFiles(filesSet, fileProvider, override, callback) {
                            var _this10 = this;

                            var self = this;
                            if (!fileProvider) {
                                fileProvider = 'browser';
                            }
                            if (override === undefined) {
                                override = false;
                            }

                            _async["default"].each(Object.keys(filesSet), function (file, callback) {
                                if (override) {
                                    try {
                                        self._deps.filesProviders[fileProvider].set(file, filesSet[file].content);
                                    } catch (e) {
                                        return callback(e.message || e);
                                    }

                                    self.syncEditor(fileProvider + file);
                                    return callback();
                                }

                                helper.createNonClashingName(file, self._deps.filesProviders[fileProvider], function (error, name) {
                                    if (error) {
                                        _this10.call('notification', 'alert', {
                                            id: 'fileManagerAlert',
                                            message: 'Unexpected error loading file ' + file + ': ' + error
                                        });
                                    } else if (helper.checkSpecialChars(name)) {
                                        _this10.call('notification', 'alert', {
                                            id: 'fileManagerAlert',
                                            message: 'Special characters are not allowed in file names.'
                                        });
                                    } else {
                                        try {
                                            self._deps.filesProviders[fileProvider].set(name, filesSet[file].content);
                                        } catch (e) {
                                            return callback(e.message || e);
                                        }

                                        self.syncEditor(fileProvider + name);
                                    }

                                    callback();
                                });
                            }, function (error) {
                                if (callback) {
                                    callback(error);
                                }
                            });
                        }
                    }, {
                        key: "currentWorkspace",
                        value: function currentWorkspace() {
                            if (this.mode !== 'localhost') {
                                var file = this.currentFile() || '';
                                var provider = this.fileProviderOf(file);
                                return provider.workspace;
                            }
                        }
                    }
                ]);

                return FileManager;
            }(_engine.Plugin);

            module.exports = FileManager;

            /***/
        }),

        /***/ 1984:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (Buffer) {

                function _typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }

                var _engine = __webpack_require__(509);

                var _isomorphicGit = _interopRequireDefault(__webpack_require__(1985));

                var _ipfsHttpClient = _interopRequireDefault(__webpack_require__(2000));

                var _fileSaver = __webpack_require__(2395);

                var _web = _interopRequireDefault(__webpack_require__(2396));

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {"default": obj};
                }

                function _toConsumableArray(arr) {
                    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
                }

                function _nonIterableSpread() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }

                function _iterableToArray(iter) {
                    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
                        return Array.from(iter);
                    }
                }

                function _arrayWithoutHoles(arr) {
                    if (Array.isArray(arr)) {
                        return _arrayLikeToArray(arr);
                    }
                }

                function _createForOfIteratorHelper(o, allowArrayLike) {
                    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                    if (!it) {
                        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                            if (it) {
                                o = it;
                            }
                            var i = 0;
                            var F = function F() {
                            };
                            return {
                                s: F, n: function n() {
                                    if (i >= o.length) {
                                        return {done: true};
                                    }
                                    return {done: false, value: o[i++]};
                                }, e: function e(_e) {
                                    throw _e;
                                }, f: F
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var normalCompletion = true, didErr = false, err;
                    return {
                        s: function s() {
                            it = it.call(o);
                        }, n: function n() {
                            var step = it.next();
                            normalCompletion = step.done;
                            return step;
                        }, e: function e(_e2) {
                            didErr = true;
                            err = _e2;
                        }, f: function f() {
                            try {
                                if (!normalCompletion && it["return"] != null) {
                                    it["return"]();
                                }
                            } finally {
                                if (didErr) {
                                    throw err;
                                }
                            }
                        }
                    };
                }

                function _unsupportedIterableToArray(o, minLen) {
                    if (!o) {
                        return;
                    }
                    if (typeof o === "string") {
                        return _arrayLikeToArray(o, minLen);
                    }
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) {
                        n = o.constructor.name;
                    }
                    if (n === "Map" || n === "Set") {
                        return Array.from(o);
                    }
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
                        return _arrayLikeToArray(o, minLen);
                    }
                }

                function _arrayLikeToArray(arr, len) {
                    if (len == null || len > arr.length) {
                        len = arr.length;
                    }
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                        arr2[i] = arr[i];
                    }
                    return arr2;
                }

                function ownKeys(object, enumerableOnly) {
                    var keys = Object.keys(object);
                    if (Object.getOwnPropertySymbols) {
                        var symbols = Object.getOwnPropertySymbols(object);
                        if (enumerableOnly) {
                            symbols = symbols.filter(function (sym) {
                                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                            });
                        }
                        keys.push.apply(keys, symbols);
                    }
                    return keys;
                }

                function _objectSpread(target) {
                    for (var i = 1; i < arguments.length; i++) {
                        var source = arguments[i] != null ? arguments[i] : {};
                        if (i % 2) {
                            ownKeys(Object(source), true).forEach(function (key) {
                                _defineProperty(target, key, source[key]);
                            });
                        } else if (Object.getOwnPropertyDescriptors) {
                            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                        } else {
                            ownKeys(Object(source)).forEach(function (key) {
                                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                            });
                        }
                    }
                    return target;
                }

                function _defineProperty(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }

                function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }
                    if (info.done) {
                        resolve(value);
                    } else {
                        Promise.resolve(value).then(_next, _throw);
                    }
                }

                function _asyncToGenerator(fn) {
                    return function () {
                        var self = this, args = arguments;
                        return new Promise(function (resolve, reject) {
                            var gen = fn.apply(self, args);

                            function _next(value) {
                                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                            }

                            function _throw(err) {
                                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                            }

                            _next(undefined);
                        });
                    };
                }

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            descriptor.writable = true;
                        }
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) {
                        _defineProperties(Constructor.prototype, protoProps);
                    }
                    if (staticProps) {
                        _defineProperties(Constructor, staticProps);
                    }
                    return Constructor;
                }

                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) {
                        _setPrototypeOf(subClass, superClass);
                    }
                }

                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }

                function _createSuper(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct();
                    return function _createSuperInternal() {
                        var Super = _getPrototypeOf(Derived), result;
                        if (hasNativeReflectConstruct) {
                            var NewTarget = _getPrototypeOf(this).constructor;
                            result = Reflect.construct(Super, arguments, NewTarget);
                        } else {
                            result = Super.apply(this, arguments);
                        }
                        return _possibleConstructorReturn(this, result);
                    };
                }

                function _possibleConstructorReturn(self, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    } else if (call !== void 0) {
                        throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return _assertThisInitialized(self);
                }

                function _assertThisInitialized(self) {
                    if (self === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self;
                }

                function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) {
                        return false;
                    }
                    if (Reflect.construct.sham) {
                        return false;
                    }
                    if (typeof Proxy === "function") {
                        return true;
                    }
                    try {
                        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                        }));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }

                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }

                function _asyncIterator(iterable) {
                    var method, async, sync, retry = 2;
                    if (typeof Symbol !== "undefined") {
                        async = Symbol.asyncIterator;
                        sync = Symbol.iterator;
                    }
                    while (retry--) {
                        if (async && (method = iterable[async]) != null) {
                            return method.call(iterable);
                        }
                        if (sync && (method = iterable[sync]) != null) {
                            return new AsyncFromSyncIterator(method.call(iterable));
                        }
                        async = "@@asyncIterator";
                        sync = "@@iterator";
                    }
                    throw new TypeError("Object is not async iterable");
                }

                function AsyncFromSyncIterator(s) {
                    AsyncFromSyncIterator = function AsyncFromSyncIterator(s) {
                        this.s = s;
                        this.n = s.next;
                    };
                    AsyncFromSyncIterator.prototype = {
                        s: null, n: null, next: function next() {
                            return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
                        }, "return": function _return(value) {
                            var ret = this.s["return"];
                            if (ret === undefined) {
                                return Promise.resolve({value: value, done: true});
                            }
                            return AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
                        }, "throw": function _throw(value) {
                            var thr = this.s["return"];
                            if (thr === undefined) {
                                return Promise.reject(value);
                            }
                            return AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
                        }
                    };

                    function AsyncFromSyncIteratorContinuation(r) {
                        if (Object(r) !== r) {
                            return Promise.reject(new TypeError(r + " is not an object."));
                        }
                        var done = r.done;
                        return Promise.resolve(r.value).then(function (value) {
                            return {value: value, done: done};
                        });
                    }

                    return new AsyncFromSyncIterator(s);
                }

                var JSZip = __webpack_require__(998);

                var path = __webpack_require__(530);

                var FormData = __webpack_require__(2397);

                var axios = __webpack_require__(772);

                var profile = {
                    name: 'dGitProvider',
                    displayName: 'Decentralized git',
                    description: '',
                    icon: 'assets/img/fileManager.webp',
                    version: '0.0.1',
                    methods: ['init', 'localStorageUsed', 'addremote', 'delremote', 'remotes', 'fetch', 'clone', 'export', 'import', 'status', 'log', 'commit', 'add', 'remove', 'rm', 'lsfiles', 'readblob', 'resolveref', 'branches', 'branch', 'checkout', 'currentbranch', 'push', 'pin', 'pull', 'pinList', 'unPin', 'setIpfsConfig', 'zip', 'setItem', 'getItem'],
                    kind: 'file-system'
                };

                var DGitProvider = /*#__PURE__*/function (_Plugin) {
                    _inherits(DGitProvider, _Plugin);

                    var _super = _createSuper(DGitProvider);

                    function DGitProvider() {
                        var _this;

                        _classCallCheck(this, DGitProvider);

                        _this = _super.call(this, profile);
                        _this.ipfsconfig = {
                            host: 'ipfs.remixproject.org',
                            port: 443,
                            protocol: 'https',
                            ipfsurl: 'https://ipfs.remixproject.org/ipfs/'
                        };
                        _this.globalIPFSConfig = {
                            host: 'ipfs.io',
                            port: 443,
                            protocol: 'https',
                            ipfsurl: 'https://ipfs.io/ipfs/'
                        };
                        _this.remixIPFS = {
                            host: 'ipfs.remixproject.org',
                            port: 443,
                            protocol: 'https',
                            ipfsurl: 'https://ipfs.remixproject.org/ipfs/'
                        };
                        _this.ipfsSources = [_this.remixIPFS, _this.globalIPFSConfig, _this.ipfsconfig];
                        return _this;
                    }

                    _createClass(DGitProvider, [
                        {
                            key: "getGitConfig",
                            value: function () {
                                var _getGitConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                    var workspace;
                                    return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.next = 2;
                                                    return this.call('filePanel', 'getCurrentWorkspace');

                                                case 2:
                                                    workspace = _context.sent;
                                                    return _context.abrupt("return", {
                                                        fs: window.remixFileSystem,
                                                        dir: workspace.absolutePath
                                                    });

                                                case 4:
                                                case "end":
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, this);
                                }));

                                function getGitConfig() {
                                    return _getGitConfig.apply(this, arguments);
                                }

                                return getGitConfig;
                            }()
                        }, {
                            key: "parseInput",
                            value: function () {
                                var _parseInput = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(input) {
                                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                        while (1) {
                                            switch (_context2.prev = _context2.next) {
                                                case 0:
                                                    return _context2.abrupt("return", {
                                                        corsProxy: 'https://corsproxy.remixproject.org/',
                                                        http: _web["default"],
                                                        onAuth: function onAuth(url) {
                                                            var auth = {
                                                                username: input.token,
                                                                password: ''
                                                            };
                                                            return auth;
                                                        }
                                                    });

                                                case 1:
                                                case "end":
                                                    return _context2.stop();
                                            }
                                        }
                                    }, _callee2);
                                }));

                                function parseInput(_x2) {
                                    return _parseInput.apply(this, arguments);
                                }

                                return parseInput;
                            }()
                        }, {
                            key: "init",
                            value: function () {
                                var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(input) {
                                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                        while (1) {
                                            switch (_context3.prev = _context3.next) {
                                                case 0:
                                                    _context3.t0 = _isomorphicGit["default"];
                                                    _context3.t1 = _objectSpread;
                                                    _context3.t2 = _objectSpread;
                                                    _context3.t3 = {};
                                                    _context3.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context3.t4 = _context3.sent;
                                                    _context3.t5 = (0, _context3.t2)(_context3.t3, _context3.t4);
                                                    _context3.t6 = {};
                                                    _context3.t7 = {
                                                        defaultBranch: input && input.branch || 'main'
                                                    };
                                                    _context3.t8 = (0, _context3.t1)(_context3.t5, _context3.t6, _context3.t7);
                                                    _context3.next = 13;
                                                    return _context3.t0.init.call(_context3.t0, _context3.t8);

                                                case 13:
                                                case "end":
                                                    return _context3.stop();
                                            }
                                        }
                                    }, _callee3, this);
                                }));

                                function init(_x3) {
                                    return _init.apply(this, arguments);
                                }

                                return init;
                            }()
                        }, {
                            key: "status",
                            value: function () {
                                var _status = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(cmd) {
                                    var status;
                                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                        while (1) {
                                            switch (_context4.prev = _context4.next) {
                                                case 0:
                                                    _context4.t0 = _isomorphicGit["default"];
                                                    _context4.t1 = _objectSpread;
                                                    _context4.t2 = _objectSpread;
                                                    _context4.t3 = {};
                                                    _context4.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context4.t4 = _context4.sent;
                                                    _context4.t5 = (0, _context4.t2)(_context4.t3, _context4.t4);
                                                    _context4.t6 = cmd;
                                                    _context4.t7 = (0, _context4.t1)(_context4.t5, _context4.t6);
                                                    _context4.next = 12;
                                                    return _context4.t0.statusMatrix.call(_context4.t0, _context4.t7);

                                                case 12:
                                                    status = _context4.sent;
                                                    return _context4.abrupt("return", status);

                                                case 14:
                                                case "end":
                                                    return _context4.stop();
                                            }
                                        }
                                    }, _callee4, this);
                                }));

                                function status(_x4) {
                                    return _status.apply(this, arguments);
                                }

                                return status;
                            }()
                        }, {
                            key: "add",
                            value: function () {
                                var _add = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(cmd) {
                                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                        while (1) {
                                            switch (_context5.prev = _context5.next) {
                                                case 0:
                                                    _context5.t0 = _isomorphicGit["default"];
                                                    _context5.t1 = _objectSpread;
                                                    _context5.t2 = _objectSpread;
                                                    _context5.t3 = {};
                                                    _context5.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context5.t4 = _context5.sent;
                                                    _context5.t5 = (0, _context5.t2)(_context5.t3, _context5.t4);
                                                    _context5.t6 = cmd;
                                                    _context5.t7 = (0, _context5.t1)(_context5.t5, _context5.t6);
                                                    _context5.next = 12;
                                                    return _context5.t0.add.call(_context5.t0, _context5.t7);

                                                case 12:
                                                    _context5.next = 14;
                                                    return this.call('fileManager', 'refresh');

                                                case 14:
                                                case "end":
                                                    return _context5.stop();
                                            }
                                        }
                                    }, _callee5, this);
                                }));

                                function add(_x5) {
                                    return _add.apply(this, arguments);
                                }

                                return add;
                            }()
                        }, {
                            key: "rm",
                            value: function () {
                                var _rm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(cmd) {
                                    return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                        while (1) {
                                            switch (_context6.prev = _context6.next) {
                                                case 0:
                                                    _context6.t0 = _isomorphicGit["default"];
                                                    _context6.t1 = _objectSpread;
                                                    _context6.t2 = _objectSpread;
                                                    _context6.t3 = {};
                                                    _context6.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context6.t4 = _context6.sent;
                                                    _context6.t5 = (0, _context6.t2)(_context6.t3, _context6.t4);
                                                    _context6.t6 = cmd;
                                                    _context6.t7 = (0, _context6.t1)(_context6.t5, _context6.t6);
                                                    _context6.next = 12;
                                                    return _context6.t0.remove.call(_context6.t0, _context6.t7);

                                                case 12:
                                                    _context6.next = 14;
                                                    return this.call('fileManager', 'refresh');

                                                case 14:
                                                case "end":
                                                    return _context6.stop();
                                            }
                                        }
                                    }, _callee6, this);
                                }));

                                function rm(_x6) {
                                    return _rm.apply(this, arguments);
                                }

                                return rm;
                            }()
                        }, {
                            key: "checkout",
                            value: function () {
                                var _checkout = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(cmd) {
                                    return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                        while (1) {
                                            switch (_context7.prev = _context7.next) {
                                                case 0:
                                                    _context7.t0 = _isomorphicGit["default"];
                                                    _context7.t1 = _objectSpread;
                                                    _context7.t2 = _objectSpread;
                                                    _context7.t3 = {};
                                                    _context7.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context7.t4 = _context7.sent;
                                                    _context7.t5 = (0, _context7.t2)(_context7.t3, _context7.t4);
                                                    _context7.t6 = cmd;
                                                    _context7.t7 = (0, _context7.t1)(_context7.t5, _context7.t6);
                                                    _context7.next = 12;
                                                    return _context7.t0.checkout.call(_context7.t0, _context7.t7);

                                                case 12:
                                                    _context7.next = 14;
                                                    return this.call('fileManager', 'refresh');

                                                case 14:
                                                case "end":
                                                    return _context7.stop();
                                            }
                                        }
                                    }, _callee7, this);
                                }));

                                function checkout(_x7) {
                                    return _checkout.apply(this, arguments);
                                }

                                return checkout;
                            }()
                        }, {
                            key: "log",
                            value: function () {
                                var _log = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(cmd) {
                                    var status;
                                    return regeneratorRuntime.wrap(function _callee8$(_context8) {
                                        while (1) {
                                            switch (_context8.prev = _context8.next) {
                                                case 0:
                                                    _context8.t0 = _isomorphicGit["default"];
                                                    _context8.t1 = _objectSpread;
                                                    _context8.t2 = _objectSpread;
                                                    _context8.t3 = {};
                                                    _context8.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context8.t4 = _context8.sent;
                                                    _context8.t5 = (0, _context8.t2)(_context8.t3, _context8.t4);
                                                    _context8.t6 = cmd;
                                                    _context8.t7 = (0, _context8.t1)(_context8.t5, _context8.t6);
                                                    _context8.next = 12;
                                                    return _context8.t0.log.call(_context8.t0, _context8.t7);

                                                case 12:
                                                    status = _context8.sent;
                                                    return _context8.abrupt("return", status);

                                                case 14:
                                                case "end":
                                                    return _context8.stop();
                                            }
                                        }
                                    }, _callee8, this);
                                }));

                                function log(_x8) {
                                    return _log.apply(this, arguments);
                                }

                                return log;
                            }()
                        }, {
                            key: "remotes",
                            value: function () {
                                var _remotes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                                    var remotes;
                                    return regeneratorRuntime.wrap(function _callee9$(_context9) {
                                        while (1) {
                                            switch (_context9.prev = _context9.next) {
                                                case 0:
                                                    remotes = [];
                                                    _context9.prev = 1;
                                                    _context9.t0 = _isomorphicGit["default"];
                                                    _context9.t1 = _objectSpread;
                                                    _context9.t2 = {};
                                                    _context9.next = 7;
                                                    return this.getGitConfig();

                                                case 7:
                                                    _context9.t3 = _context9.sent;
                                                    _context9.t4 = (0, _context9.t1)(_context9.t2, _context9.t3);
                                                    _context9.next = 11;
                                                    return _context9.t0.listRemotes.call(_context9.t0, _context9.t4);

                                                case 11:
                                                    remotes = _context9.sent;
                                                    _context9.next = 16;
                                                    break;

                                                case 14:
                                                    _context9.prev = 14;
                                                    _context9.t5 = _context9["catch"](1);

                                                case 16:
                                                    return _context9.abrupt("return", remotes);

                                                case 17:
                                                case "end":
                                                    return _context9.stop();
                                            }
                                        }
                                    }, _callee9, this, [[1, 14]]);
                                }));

                                function remotes() {
                                    return _remotes.apply(this, arguments);
                                }

                                return remotes;
                            }()
                        }, {
                            key: "branch",
                            value: function () {
                                var _branch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(cmd) {
                                    var status;
                                    return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                        while (1) {
                                            switch (_context10.prev = _context10.next) {
                                                case 0:
                                                    _context10.t0 = _isomorphicGit["default"];
                                                    _context10.t1 = _objectSpread;
                                                    _context10.t2 = _objectSpread;
                                                    _context10.t3 = {};
                                                    _context10.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context10.t4 = _context10.sent;
                                                    _context10.t5 = (0, _context10.t2)(_context10.t3, _context10.t4);
                                                    _context10.t6 = cmd;
                                                    _context10.t7 = (0, _context10.t1)(_context10.t5, _context10.t6);
                                                    _context10.next = 12;
                                                    return _context10.t0.branch.call(_context10.t0, _context10.t7);

                                                case 12:
                                                    status = _context10.sent;
                                                    _context10.next = 15;
                                                    return this.call('fileManager', 'refresh');

                                                case 15:
                                                    return _context10.abrupt("return", status);

                                                case 16:
                                                case "end":
                                                    return _context10.stop();
                                            }
                                        }
                                    }, _callee10, this);
                                }));

                                function branch(_x9) {
                                    return _branch.apply(this, arguments);
                                }

                                return branch;
                            }()
                        }, {
                            key: "currentbranch",
                            value: function () {
                                var _currentbranch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                                    var name;
                                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                                        while (1) {
                                            switch (_context11.prev = _context11.next) {
                                                case 0:
                                                    _context11.t0 = _isomorphicGit["default"];
                                                    _context11.t1 = _objectSpread;
                                                    _context11.t2 = {};
                                                    _context11.next = 5;
                                                    return this.getGitConfig();

                                                case 5:
                                                    _context11.t3 = _context11.sent;
                                                    _context11.t4 = (0, _context11.t1)(_context11.t2, _context11.t3);
                                                    _context11.next = 9;
                                                    return _context11.t0.currentBranch.call(_context11.t0, _context11.t4);

                                                case 9:
                                                    name = _context11.sent;
                                                    return _context11.abrupt("return", name);

                                                case 11:
                                                case "end":
                                                    return _context11.stop();
                                            }
                                        }
                                    }, _callee11, this);
                                }));

                                function currentbranch() {
                                    return _currentbranch.apply(this, arguments);
                                }

                                return currentbranch;
                            }()
                        }, {
                            key: "branches",
                            value: function () {
                                var _branches = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                                    var cmd, remotes, branches, _iterator3, _step3, _loop;

                                    return regeneratorRuntime.wrap(function _callee12$(_context13) {
                                        while (1) {
                                            switch (_context13.prev = _context13.next) {
                                                case 0:
                                                    _context13.t0 = _objectSpread;
                                                    _context13.t1 = {};
                                                    _context13.next = 4;
                                                    return this.getGitConfig();

                                                case 4:
                                                    _context13.t2 = _context13.sent;
                                                    cmd = (0, _context13.t0)(_context13.t1, _context13.t2);
                                                    _context13.next = 8;
                                                    return this.remotes();

                                                case 8:
                                                    remotes = _context13.sent;
                                                    branches = [];
                                                    _context13.next = 12;
                                                    return _isomorphicGit["default"].listBranches(cmd);

                                                case 12:
                                                    branches = _context13.sent.map(function (branch) {
                                                        return {
                                                            remote: undefined,
                                                            name: branch
                                                        };
                                                    });
                                                    _iterator3 = _createForOfIteratorHelper(remotes);
                                                    _context13.prev = 14;
                                                    _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                                                        var remote, remotebranches;
                                                        return regeneratorRuntime.wrap(function _loop$(_context12) {
                                                            while (1) {
                                                                switch (_context12.prev = _context12.next) {
                                                                    case 0:
                                                                        remote = _step3.value;
                                                                        cmd.remote = remote.remote;
                                                                        _context12.next = 4;
                                                                        return _isomorphicGit["default"].listBranches(cmd);

                                                                    case 4:
                                                                        remotebranches = _context12.sent.map(function (branch) {
                                                                            return {
                                                                                remote: remote.remote,
                                                                                name: branch
                                                                            };
                                                                        });
                                                                        branches = [].concat(_toConsumableArray(branches), _toConsumableArray(remotebranches));

                                                                    case 6:
                                                                    case "end":
                                                                        return _context12.stop();
                                                                }
                                                            }
                                                        }, _loop);
                                                    });

                                                    _iterator3.s();

                                                case 17:
                                                    if ((_step3 = _iterator3.n()).done) {
                                                        _context13.next = 21;
                                                        break;
                                                    }

                                                    return _context13.delegateYield(_loop(), "t3", 19);

                                                case 19:
                                                    _context13.next = 17;
                                                    break;

                                                case 21:
                                                    _context13.next = 26;
                                                    break;

                                                case 23:
                                                    _context13.prev = 23;
                                                    _context13.t4 = _context13["catch"](14);

                                                    _iterator3.e(_context13.t4);

                                                case 26:
                                                    _context13.prev = 26;

                                                    _iterator3.f();

                                                    return _context13.finish(26);

                                                case 29:
                                                    return _context13.abrupt("return", branches);

                                                case 30:
                                                case "end":
                                                    return _context13.stop();
                                            }
                                        }
                                    }, _callee12, this, [[14, 23, 26, 29]]);
                                }));

                                function branches() {
                                    return _branches.apply(this, arguments);
                                }

                                return branches;
                            }()
                        }, {
                            key: "commit",
                            value: function () {
                                var _commit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(cmd) {
                                    var sha;
                                    return regeneratorRuntime.wrap(function _callee13$(_context14) {
                                        while (1) {
                                            switch (_context14.prev = _context14.next) {
                                                case 0:
                                                    _context14.next = 2;
                                                    return this.init();

                                                case 2:
                                                    _context14.prev = 2;
                                                    _context14.t0 = _isomorphicGit["default"];
                                                    _context14.t1 = _objectSpread;
                                                    _context14.t2 = _objectSpread;
                                                    _context14.t3 = {};
                                                    _context14.next = 9;
                                                    return this.getGitConfig();

                                                case 9:
                                                    _context14.t4 = _context14.sent;
                                                    _context14.t5 = (0, _context14.t2)(_context14.t3, _context14.t4);
                                                    _context14.t6 = cmd;
                                                    _context14.t7 = (0, _context14.t1)(_context14.t5, _context14.t6);
                                                    _context14.next = 15;
                                                    return _context14.t0.commit.call(_context14.t0, _context14.t7);

                                                case 15:
                                                    sha = _context14.sent;
                                                    return _context14.abrupt("return", sha);

                                                case 19:
                                                    _context14.prev = 19;
                                                    _context14.t8 = _context14["catch"](2);
                                                    throw new Error(_context14.t8);

                                                case 22:
                                                case "end":
                                                    return _context14.stop();
                                            }
                                        }
                                    }, _callee13, this, [[2, 19]]);
                                }));

                                function commit(_x10) {
                                    return _commit.apply(this, arguments);
                                }

                                return commit;
                            }()
                        }, {
                            key: "lsfiles",
                            value: function () {
                                var _lsfiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(cmd) {
                                    var filesInStaging;
                                    return regeneratorRuntime.wrap(function _callee14$(_context15) {
                                        while (1) {
                                            switch (_context15.prev = _context15.next) {
                                                case 0:
                                                    _context15.t0 = _isomorphicGit["default"];
                                                    _context15.t1 = _objectSpread;
                                                    _context15.t2 = _objectSpread;
                                                    _context15.t3 = {};
                                                    _context15.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context15.t4 = _context15.sent;
                                                    _context15.t5 = (0, _context15.t2)(_context15.t3, _context15.t4);
                                                    _context15.t6 = cmd;
                                                    _context15.t7 = (0, _context15.t1)(_context15.t5, _context15.t6);
                                                    _context15.next = 12;
                                                    return _context15.t0.listFiles.call(_context15.t0, _context15.t7);

                                                case 12:
                                                    filesInStaging = _context15.sent;
                                                    return _context15.abrupt("return", filesInStaging);

                                                case 14:
                                                case "end":
                                                    return _context15.stop();
                                            }
                                        }
                                    }, _callee14, this);
                                }));

                                function lsfiles(_x11) {
                                    return _lsfiles.apply(this, arguments);
                                }

                                return lsfiles;
                            }()
                        }, {
                            key: "resolveref",
                            value: function () {
                                var _resolveref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(cmd) {
                                    var oid;
                                    return regeneratorRuntime.wrap(function _callee15$(_context16) {
                                        while (1) {
                                            switch (_context16.prev = _context16.next) {
                                                case 0:
                                                    _context16.t0 = _isomorphicGit["default"];
                                                    _context16.t1 = _objectSpread;
                                                    _context16.t2 = _objectSpread;
                                                    _context16.t3 = {};
                                                    _context16.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context16.t4 = _context16.sent;
                                                    _context16.t5 = (0, _context16.t2)(_context16.t3, _context16.t4);
                                                    _context16.t6 = cmd;
                                                    _context16.t7 = (0, _context16.t1)(_context16.t5, _context16.t6);
                                                    _context16.next = 12;
                                                    return _context16.t0.resolveRef.call(_context16.t0, _context16.t7);

                                                case 12:
                                                    oid = _context16.sent;
                                                    return _context16.abrupt("return", oid);

                                                case 14:
                                                case "end":
                                                    return _context16.stop();
                                            }
                                        }
                                    }, _callee15, this);
                                }));

                                function resolveref(_x12) {
                                    return _resolveref.apply(this, arguments);
                                }

                                return resolveref;
                            }()
                        }, {
                            key: "readblob",
                            value: function () {
                                var _readblob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(cmd) {
                                    var readBlobResult;
                                    return regeneratorRuntime.wrap(function _callee16$(_context17) {
                                        while (1) {
                                            switch (_context17.prev = _context17.next) {
                                                case 0:
                                                    _context17.t0 = _isomorphicGit["default"];
                                                    _context17.t1 = _objectSpread;
                                                    _context17.t2 = _objectSpread;
                                                    _context17.t3 = {};
                                                    _context17.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context17.t4 = _context17.sent;
                                                    _context17.t5 = (0, _context17.t2)(_context17.t3, _context17.t4);
                                                    _context17.t6 = cmd;
                                                    _context17.t7 = (0, _context17.t1)(_context17.t5, _context17.t6);
                                                    _context17.next = 12;
                                                    return _context17.t0.readBlob.call(_context17.t0, _context17.t7);

                                                case 12:
                                                    readBlobResult = _context17.sent;
                                                    return _context17.abrupt("return", readBlobResult);

                                                case 14:
                                                case "end":
                                                    return _context17.stop();
                                            }
                                        }
                                    }, _callee16, this);
                                }));

                                function readblob(_x13) {
                                    return _readblob.apply(this, arguments);
                                }

                                return readblob;
                            }()
                        }, {
                            key: "setIpfsConfig",
                            value: function () {
                                var _setIpfsConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(config) {
                                    var _this2 = this;

                                    return regeneratorRuntime.wrap(function _callee17$(_context18) {
                                        while (1) {
                                            switch (_context18.prev = _context18.next) {
                                                case 0:
                                                    this.ipfsconfig = config;
                                                    return _context18.abrupt("return", new Promise(function (resolve, reject) {
                                                        resolve(_this2.checkIpfsConfig());
                                                    }));

                                                case 2:
                                                case "end":
                                                    return _context18.stop();
                                            }
                                        }
                                    }, _callee17, this);
                                }));

                                function setIpfsConfig(_x14) {
                                    return _setIpfsConfig.apply(this, arguments);
                                }

                                return setIpfsConfig;
                            }()
                        }, {
                            key: "checkIpfsConfig",
                            value: function () {
                                var _checkIpfsConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(config) {
                                    return regeneratorRuntime.wrap(function _callee18$(_context19) {
                                        while (1) {
                                            switch (_context19.prev = _context19.next) {
                                                case 0:
                                                    this.ipfs = (0, _ipfsHttpClient["default"])(config || this.ipfsconfig);
                                                    _context19.prev = 1;
                                                    _context19.next = 4;
                                                    return this.ipfs.config.getAll();

                                                case 4:
                                                    return _context19.abrupt("return", true);

                                                case 7:
                                                    _context19.prev = 7;
                                                    _context19.t0 = _context19["catch"](1);
                                                    return _context19.abrupt("return", false);

                                                case 10:
                                                case "end":
                                                    return _context19.stop();
                                            }
                                        }
                                    }, _callee18, this, [[1, 7]]);
                                }));

                                function checkIpfsConfig(_x15) {
                                    return _checkIpfsConfig.apply(this, arguments);
                                }

                                return checkIpfsConfig;
                            }()
                        }, {
                            key: "addremote",
                            value: function () {
                                var _addremote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(input) {
                                    return regeneratorRuntime.wrap(function _callee19$(_context20) {
                                        while (1) {
                                            switch (_context20.prev = _context20.next) {
                                                case 0:
                                                    _context20.t0 = _isomorphicGit["default"];
                                                    _context20.t1 = _objectSpread;
                                                    _context20.t2 = _objectSpread;
                                                    _context20.t3 = {};
                                                    _context20.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context20.t4 = _context20.sent;
                                                    _context20.t5 = (0, _context20.t2)(_context20.t3, _context20.t4);
                                                    _context20.t6 = {};
                                                    _context20.t7 = {
                                                        url: input.url,
                                                        remote: input.remote
                                                    };
                                                    _context20.t8 = (0, _context20.t1)(_context20.t5, _context20.t6, _context20.t7);
                                                    _context20.next = 13;
                                                    return _context20.t0.addRemote.call(_context20.t0, _context20.t8);

                                                case 13:
                                                case "end":
                                                    return _context20.stop();
                                            }
                                        }
                                    }, _callee19, this);
                                }));

                                function addremote(_x16) {
                                    return _addremote.apply(this, arguments);
                                }

                                return addremote;
                            }()
                        }, {
                            key: "delremote",
                            value: function () {
                                var _delremote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(input) {
                                    return regeneratorRuntime.wrap(function _callee20$(_context21) {
                                        while (1) {
                                            switch (_context21.prev = _context21.next) {
                                                case 0:
                                                    _context21.t0 = _isomorphicGit["default"];
                                                    _context21.t1 = _objectSpread;
                                                    _context21.t2 = _objectSpread;
                                                    _context21.t3 = {};
                                                    _context21.next = 6;
                                                    return this.getGitConfig();

                                                case 6:
                                                    _context21.t4 = _context21.sent;
                                                    _context21.t5 = (0, _context21.t2)(_context21.t3, _context21.t4);
                                                    _context21.t6 = {};
                                                    _context21.t7 = {
                                                        remote: input.remote
                                                    };
                                                    _context21.t8 = (0, _context21.t1)(_context21.t5, _context21.t6, _context21.t7);
                                                    _context21.next = 13;
                                                    return _context21.t0.deleteRemote.call(_context21.t0, _context21.t8);

                                                case 13:
                                                case "end":
                                                    return _context21.stop();
                                            }
                                        }
                                    }, _callee20, this);
                                }));

                                function delremote(_x17) {
                                    return _delremote.apply(this, arguments);
                                }

                                return delremote;
                            }()
                        }, {
                            key: "localStorageUsed",
                            value: function () {
                                var _localStorageUsed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
                                    return regeneratorRuntime.wrap(function _callee21$(_context22) {
                                        while (1) {
                                            switch (_context22.prev = _context22.next) {
                                                case 0:
                                                    return _context22.abrupt("return", this.calculateLocalStorage());

                                                case 1:
                                                case "end":
                                                    return _context22.stop();
                                            }
                                        }
                                    }, _callee21, this);
                                }));

                                function localStorageUsed() {
                                    return _localStorageUsed.apply(this, arguments);
                                }

                                return localStorageUsed;
                            }()
                        }, {
                            key: "clone",
                            value: function () {
                                var _clone = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(input) {
                                    var permission, cmd, result;
                                    return regeneratorRuntime.wrap(function _callee22$(_context23) {
                                        while (1) {
                                            switch (_context23.prev = _context23.next) {
                                                case 0:
                                                    _context23.next = 2;
                                                    return this.askUserPermission('clone', 'Import multiple files into your workspaces.');

                                                case 2:
                                                    permission = _context23.sent;

                                                    if (permission) {
                                                        _context23.next = 5;
                                                        break;
                                                    }

                                                    return _context23.abrupt("return", false);

                                                case 5:
                                                    if (!(this.calculateLocalStorage() > 10000)) {
                                                        _context23.next = 7;
                                                        break;
                                                    }

                                                    throw new Error('The local storage of the browser is full.');

                                                case 7:
                                                    _context23.next = 9;
                                                    return this.call('filePanel', 'createWorkspace', "workspace_".concat(Date.now()), true);

                                                case 9:
                                                    _context23.t0 = _objectSpread;
                                                    _context23.t1 = _objectSpread;
                                                    _context23.t2 = {
                                                        url: input.url,
                                                        singleBranch: input.singleBranch,
                                                        ref: input.branch,
                                                        depth: input.depth || 10
                                                    };
                                                    _context23.next = 14;
                                                    return this.parseInput(input);

                                                case 14:
                                                    _context23.t3 = _context23.sent;
                                                    _context23.t4 = (0, _context23.t1)(_context23.t2, _context23.t3);
                                                    _context23.next = 18;
                                                    return this.getGitConfig();

                                                case 18:
                                                    _context23.t5 = _context23.sent;
                                                    cmd = (0, _context23.t0)(_context23.t4, _context23.t5);
                                                    _context23.next = 22;
                                                    return _isomorphicGit["default"].clone(cmd);

                                                case 22:
                                                    result = _context23.sent;
                                                    _context23.next = 25;
                                                    return this.call('fileManager', 'refresh');

                                                case 25:
                                                    return _context23.abrupt("return", result);

                                                case 26:
                                                case "end":
                                                    return _context23.stop();
                                            }
                                        }
                                    }, _callee22, this);
                                }));

                                function clone(_x18) {
                                    return _clone.apply(this, arguments);
                                }

                                return clone;
                            }()
                        }, {
                            key: "push",
                            value: function () {
                                var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(input) {
                                    var cmd;
                                    return regeneratorRuntime.wrap(function _callee23$(_context24) {
                                        while (1) {
                                            switch (_context24.prev = _context24.next) {
                                                case 0:
                                                    _context24.t0 = _objectSpread;
                                                    _context24.t1 = _objectSpread;
                                                    _context24.t2 = {
                                                        force: input.force,
                                                        ref: input.ref,
                                                        remoteRef: input.remoteRef,
                                                        remote: input.remote,
                                                        author: {
                                                            name: input.name,
                                                            email: input.email
                                                        }
                                                    };
                                                    _context24.next = 5;
                                                    return this.parseInput(input);

                                                case 5:
                                                    _context24.t3 = _context24.sent;
                                                    _context24.t4 = (0, _context24.t1)(_context24.t2, _context24.t3);
                                                    _context24.next = 9;
                                                    return this.getGitConfig();

                                                case 9:
                                                    _context24.t5 = _context24.sent;
                                                    cmd = (0, _context24.t0)(_context24.t4, _context24.t5);
                                                    _context24.next = 13;
                                                    return _isomorphicGit["default"].push(cmd);

                                                case 13:
                                                    return _context24.abrupt("return", _context24.sent);

                                                case 14:
                                                case "end":
                                                    return _context24.stop();
                                            }
                                        }
                                    }, _callee23, this);
                                }));

                                function push(_x19) {
                                    return _push.apply(this, arguments);
                                }

                                return push;
                            }()
                        }, {
                            key: "pull",
                            value: function () {
                                var _pull = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(input) {
                                    var cmd, result;
                                    return regeneratorRuntime.wrap(function _callee24$(_context25) {
                                        while (1) {
                                            switch (_context25.prev = _context25.next) {
                                                case 0:
                                                    _context25.t0 = _objectSpread;
                                                    _context25.t1 = _objectSpread;
                                                    _context25.t2 = {
                                                        ref: input.ref,
                                                        remoteRef: input.remoteRef,
                                                        author: {
                                                            name: input.name,
                                                            email: input.email
                                                        },
                                                        remote: input.remote
                                                    };
                                                    _context25.next = 5;
                                                    return this.parseInput(input);

                                                case 5:
                                                    _context25.t3 = _context25.sent;
                                                    _context25.t4 = (0, _context25.t1)(_context25.t2, _context25.t3);
                                                    _context25.next = 9;
                                                    return this.getGitConfig();

                                                case 9:
                                                    _context25.t5 = _context25.sent;
                                                    cmd = (0, _context25.t0)(_context25.t4, _context25.t5);
                                                    _context25.next = 13;
                                                    return _isomorphicGit["default"].pull(cmd);

                                                case 13:
                                                    result = _context25.sent;
                                                    _context25.next = 16;
                                                    return this.call('fileManager', 'refresh');

                                                case 16:
                                                    return _context25.abrupt("return", result);

                                                case 17:
                                                case "end":
                                                    return _context25.stop();
                                            }
                                        }
                                    }, _callee24, this);
                                }));

                                function pull(_x20) {
                                    return _pull.apply(this, arguments);
                                }

                                return pull;
                            }()
                        }, {
                            key: "fetch",
                            value: function () {
                                var _fetch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(input) {
                                    var cmd, result;
                                    return regeneratorRuntime.wrap(function _callee25$(_context26) {
                                        while (1) {
                                            switch (_context26.prev = _context26.next) {
                                                case 0:
                                                    _context26.t0 = _objectSpread;
                                                    _context26.t1 = _objectSpread;
                                                    _context26.t2 = {
                                                        ref: input.ref,
                                                        remoteRef: input.remoteRef,
                                                        author: {
                                                            name: input.name,
                                                            email: input.email
                                                        },
                                                        remote: input.remote
                                                    };
                                                    _context26.next = 5;
                                                    return this.parseInput(input);

                                                case 5:
                                                    _context26.t3 = _context26.sent;
                                                    _context26.t4 = (0, _context26.t1)(_context26.t2, _context26.t3);
                                                    _context26.next = 9;
                                                    return this.getGitConfig();

                                                case 9:
                                                    _context26.t5 = _context26.sent;
                                                    cmd = (0, _context26.t0)(_context26.t4, _context26.t5);
                                                    _context26.next = 13;
                                                    return _isomorphicGit["default"].fetch(cmd);

                                                case 13:
                                                    result = _context26.sent;
                                                    _context26.next = 16;
                                                    return this.call('fileManager', 'refresh');

                                                case 16:
                                                    return _context26.abrupt("return", result);

                                                case 17:
                                                case "end":
                                                    return _context26.stop();
                                            }
                                        }
                                    }, _callee25, this);
                                }));

                                function fetch(_x21) {
                                    return _fetch.apply(this, arguments);
                                }

                                return fetch;
                            }()
                        }, {
                            key: "export",
                            value: function () {
                                var _export2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(config) {
                                    var workspace, files, _iterator4, _step4, file, c, ob, addOptions, r;

                                    return regeneratorRuntime.wrap(function _callee26$(_context27) {
                                        while (1) {
                                            switch (_context27.prev = _context27.next) {
                                                case 0:
                                                    if (this.checkIpfsConfig(config)) {
                                                        _context27.next = 2;
                                                        break;
                                                    }

                                                    return _context27.abrupt("return", false);

                                                case 2:
                                                    _context27.next = 4;
                                                    return this.call('filePanel', 'getCurrentWorkspace');

                                                case 4:
                                                    workspace = _context27.sent;
                                                    _context27.next = 7;
                                                    return this.getDirectory('/');

                                                case 7:
                                                    files = _context27.sent;
                                                    this.filesToSend = [];
                                                    _iterator4 = _createForOfIteratorHelper(files);

                                                    try {
                                                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                                                            file = _step4.value;
                                                            c = window.remixFileSystem.readFileSync("".concat(workspace.absolutePath, "/").concat(file));
                                                            ob = {
                                                                path: file,
                                                                content: c
                                                            };
                                                            this.filesToSend.push(ob);
                                                        }
                                                    } catch (err) {
                                                        _iterator4.e(err);
                                                    } finally {
                                                        _iterator4.f();
                                                    }

                                                    addOptions = {
                                                        wrapWithDirectory: true
                                                    };
                                                    _context27.next = 14;
                                                    return this.ipfs.add(this.filesToSend, addOptions);

                                                case 14:
                                                    r = _context27.sent;
                                                    return _context27.abrupt("return", r.cid.string);

                                                case 16:
                                                case "end":
                                                    return _context27.stop();
                                            }
                                        }
                                    }, _callee26, this);
                                }));

                                function _export(_x22) {
                                    return _export2.apply(this, arguments);
                                }

                                return _export;
                            }()
                        }, {
                            key: "pin",
                            value: function () {
                                var _pin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(pinataApiKey, pinataSecretApiKey) {
                                    var workspace, files, data, ob, commits, today, metadata, pinataOptions, url,
                                        result;
                                    return regeneratorRuntime.wrap(function _callee28$(_context29) {
                                        while (1) {
                                            switch (_context29.prev = _context29.next) {
                                                case 0:
                                                    _context29.next = 2;
                                                    return this.call('filePanel', 'getCurrentWorkspace');

                                                case 2:
                                                    workspace = _context29.sent;
                                                    _context29.next = 5;
                                                    return this.getDirectory('/');

                                                case 5:
                                                    files = _context29.sent;
                                                    this.filesToSend = [];
                                                    data = new FormData();
                                                    files.forEach( /*#__PURE__*/function () {
                                                        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(file) {
                                                            var c;
                                                            return regeneratorRuntime.wrap(function _callee27$(_context28) {
                                                                while (1) {
                                                                    switch (_context28.prev = _context28.next) {
                                                                        case 0:
                                                                            c = window.remixFileSystem.readFileSync("".concat(workspace.absolutePath, "/").concat(file));
                                                                            data.append('file', new Blob([c]), "base/".concat(file));

                                                                        case 2:
                                                                        case "end":
                                                                            return _context28.stop();
                                                                    }
                                                                }
                                                            }, _callee27);
                                                        }));

                                                        return function (_x25) {
                                                            return _ref.apply(this, arguments);
                                                        };
                                                    }()); // get last commit data

                                                    _context29.prev = 9;
                                                    _context29.next = 12;
                                                    return this.log({
                                                        ref: 'HEAD'
                                                    });

                                                case 12:
                                                    commits = _context29.sent;
                                                    ob = {
                                                        ref: commits[0].oid,
                                                        message: commits[0].commit.message,
                                                        commits: JSON.stringify(commits.map(function (commit) {
                                                            var _commit$commit, _commit$commit2, _commit$commit3,
                                                                _commit$commit4, _commit$commit4$commi;

                                                            return {
                                                                oid: commit.oid,
                                                                commit: {
                                                                    parent: (_commit$commit = commit.commit) === null || _commit$commit === void 0 ? void 0 : _commit$commit.parent,
                                                                    tree: (_commit$commit2 = commit.commit) === null || _commit$commit2 === void 0 ? void 0 : _commit$commit2.tree,
                                                                    message: (_commit$commit3 = commit.commit) === null || _commit$commit3 === void 0 ? void 0 : _commit$commit3.message,
                                                                    committer: {
                                                                        timestamp: (_commit$commit4 = commit.commit) === null || _commit$commit4 === void 0 ? void 0 : (_commit$commit4$commi = _commit$commit4.committer) === null || _commit$commit4$commi === void 0 ? void 0 : _commit$commit4$commi.timestamp
                                                                    }
                                                                }
                                                            };
                                                        }))
                                                    };
                                                    _context29.next = 19;
                                                    break;

                                                case 16:
                                                    _context29.prev = 16;
                                                    _context29.t0 = _context29["catch"](9);
                                                    ob = {
                                                        ref: 'no commits',
                                                        message: 'no commits'
                                                    };

                                                case 19:
                                                    today = new Date();
                                                    metadata = JSON.stringify({
                                                        name: "remix - ".concat(workspace.name, " - ").concat(today.toLocaleString()),
                                                        keyvalues: ob
                                                    });
                                                    pinataOptions = JSON.stringify({
                                                        wrapWithDirectory: false
                                                    });
                                                    data.append('pinataOptions', pinataOptions);
                                                    data.append('pinataMetadata', metadata);
                                                    url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';
                                                    _context29.prev = 25;
                                                    _context29.next = 28;
                                                    return axios.post(url, data, {
                                                        maxBodyLength: 'Infinity',
                                                        headers: {
                                                            'Content-Type': "multipart/form-data; boundary=".concat(data._boundary),
                                                            pinata_api_key: pinataApiKey,
                                                            pinata_secret_api_key: pinataSecretApiKey
                                                        }
                                                    });

                                                case 28:
                                                    result = _context29.sent;
                                                    _context29.next = 31;
                                                    return this["export"](this.remixIPFS);

                                                case 31:
                                                    _context29.t1 = _context29.sent;

                                                    if (_context29.t1) {
                                                        _context29.next = 34;
                                                        break;
                                                    }

                                                    _context29.t1 = result.data.IpfsHash;

                                                case 34:
                                                    return _context29.abrupt("return", _context29.t1);

                                                case 37:
                                                    _context29.prev = 37;
                                                    _context29.t2 = _context29["catch"](25);
                                                    throw new Error(_context29.t2);

                                                case 40:
                                                case "end":
                                                    return _context29.stop();
                                            }
                                        }
                                    }, _callee28, this, [[9, 16], [25, 37]]);
                                }));

                                function pin(_x23, _x24) {
                                    return _pin.apply(this, arguments);
                                }

                                return pin;
                            }()
                        }, {
                            key: "pinList",
                            value: function () {
                                var _pinList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(pinataApiKey, pinataSecretApiKey) {
                                    var url, result;
                                    return regeneratorRuntime.wrap(function _callee29$(_context30) {
                                        while (1) {
                                            switch (_context30.prev = _context30.next) {
                                                case 0:
                                                    url = 'https://api.pinata.cloud/data/pinList?status=pinned';
                                                    _context30.prev = 1;
                                                    _context30.next = 4;
                                                    return axios.get(url, {
                                                        maxBodyLength: 'Infinity',
                                                        headers: {
                                                            pinata_api_key: pinataApiKey,
                                                            pinata_secret_api_key: pinataSecretApiKey
                                                        }
                                                    });

                                                case 4:
                                                    result = _context30.sent;
                                                    return _context30.abrupt("return", result.data);

                                                case 8:
                                                    _context30.prev = 8;
                                                    _context30.t0 = _context30["catch"](1);
                                                    throw new Error(_context30.t0);

                                                case 11:
                                                case "end":
                                                    return _context30.stop();
                                            }
                                        }
                                    }, _callee29, null, [[1, 8]]);
                                }));

                                function pinList(_x26, _x27) {
                                    return _pinList.apply(this, arguments);
                                }

                                return pinList;
                            }()
                        }, {
                            key: "unPin",
                            value: function () {
                                var _unPin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(pinataApiKey, pinataSecretApiKey, hashToUnpin) {
                                    var url;
                                    return regeneratorRuntime.wrap(function _callee30$(_context31) {
                                        while (1) {
                                            switch (_context31.prev = _context31.next) {
                                                case 0:
                                                    url = "https://api.pinata.cloud/pinning/unpin/".concat(hashToUnpin);
                                                    _context31.prev = 1;
                                                    _context31.next = 4;
                                                    return axios["delete"](url, {
                                                        headers: {
                                                            pinata_api_key: pinataApiKey,
                                                            pinata_secret_api_key: pinataSecretApiKey
                                                        }
                                                    });

                                                case 4:
                                                    return _context31.abrupt("return", true);

                                                case 7:
                                                    _context31.prev = 7;
                                                    _context31.t0 = _context31["catch"](1);
                                                    throw new Error(_context31.t0);

                                                case 10:
                                                case "end":
                                                    return _context31.stop();
                                            }
                                        }
                                    }, _callee30, null, [[1, 7]]);
                                }));

                                function unPin(_x28, _x29, _x30) {
                                    return _unPin.apply(this, arguments);
                                }

                                return unPin;
                            }()
                        }, {
                            key: "importIPFSFiles",
                            value: function () {
                                var _importIPFSFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(config, cid, workspace) {
                                    var ipfs, result, data, _iteratorAbruptCompletion, _didIteratorError,
                                        _iteratorError, _iterator, _step, file, content, _iteratorAbruptCompletion2,
                                        _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk, dir;

                                    return regeneratorRuntime.wrap(function _callee31$(_context32) {
                                        while (1) {
                                            switch (_context32.prev = _context32.next) {
                                                case 0:
                                                    ipfs = (0, _ipfsHttpClient["default"])(config);
                                                    result = false;
                                                    _context32.prev = 2;
                                                    data = ipfs.get(cid, {
                                                        timeout: 60000
                                                    });
                                                    _iteratorAbruptCompletion = false;
                                                    _didIteratorError = false;
                                                    _context32.prev = 6;
                                                    _iterator = _asyncIterator(data);

                                                case 8:
                                                    _context32.next = 10;
                                                    return _iterator.next();

                                                case 10:
                                                    if (!(_iteratorAbruptCompletion = !(_step = _context32.sent).done)) {
                                                        _context32.next = 63;
                                                        break;
                                                    }

                                                    file = _step.value;
                                                    if (file.path) {
                                                        result = true;
                                                    }
                                                    file.path = file.path.replace(cid, '');

                                                    if (file.content) {
                                                        _context32.next = 16;
                                                        break;
                                                    }

                                                    return _context32.abrupt("continue", 60);

                                                case 16:
                                                    content = [];
                                                    _iteratorAbruptCompletion2 = false;
                                                    _didIteratorError2 = false;
                                                    _context32.prev = 19;
                                                    _iterator2 = _asyncIterator(file.content);

                                                case 21:
                                                    _context32.next = 23;
                                                    return _iterator2.next();

                                                case 23:
                                                    if (!(_iteratorAbruptCompletion2 = !(_step2 = _context32.sent).done)) {
                                                        _context32.next = 29;
                                                        break;
                                                    }

                                                    chunk = _step2.value;
                                                    content.push(chunk);

                                                case 26:
                                                    _iteratorAbruptCompletion2 = false;
                                                    _context32.next = 21;
                                                    break;

                                                case 29:
                                                    _context32.next = 35;
                                                    break;

                                                case 31:
                                                    _context32.prev = 31;
                                                    _context32.t0 = _context32["catch"](19);
                                                    _didIteratorError2 = true;
                                                    _iteratorError2 = _context32.t0;

                                                case 35:
                                                    _context32.prev = 35;
                                                    _context32.prev = 36;

                                                    if (!(_iteratorAbruptCompletion2 && _iterator2["return"] != null)) {
                                                        _context32.next = 40;
                                                        break;
                                                    }

                                                    _context32.next = 40;
                                                    return _iterator2["return"]();

                                                case 40:
                                                    _context32.prev = 40;

                                                    if (!_didIteratorError2) {
                                                        _context32.next = 43;
                                                        break;
                                                    }

                                                    throw _iteratorError2;

                                                case 43:
                                                    return _context32.finish(40);

                                                case 44:
                                                    return _context32.finish(35);

                                                case 45:
                                                    dir = path.dirname(file.path);
                                                    _context32.prev = 46;
                                                    this.createDirectories("".concat(workspace.absolutePath, "/").concat(dir));
                                                    _context32.next = 53;
                                                    break;

                                                case 50:
                                                    _context32.prev = 50;
                                                    _context32.t1 = _context32["catch"](46);
                                                    throw new Error(_context32.t1);

                                                case 53:
                                                    _context32.prev = 53;
                                                    window.remixFileSystem.writeFileSync("".concat(workspace.absolutePath, "/").concat(file.path), Buffer.concat(content) || new Uint8Array());
                                                    _context32.next = 60;
                                                    break;

                                                case 57:
                                                    _context32.prev = 57;
                                                    _context32.t2 = _context32["catch"](53);
                                                    throw new Error(_context32.t2);

                                                case 60:
                                                    _iteratorAbruptCompletion = false;
                                                    _context32.next = 8;
                                                    break;

                                                case 63:
                                                    _context32.next = 69;
                                                    break;

                                                case 65:
                                                    _context32.prev = 65;
                                                    _context32.t3 = _context32["catch"](6);
                                                    _didIteratorError = true;
                                                    _iteratorError = _context32.t3;

                                                case 69:
                                                    _context32.prev = 69;
                                                    _context32.prev = 70;

                                                    if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
                                                        _context32.next = 74;
                                                        break;
                                                    }

                                                    _context32.next = 74;
                                                    return _iterator["return"]();

                                                case 74:
                                                    _context32.prev = 74;

                                                    if (!_didIteratorError) {
                                                        _context32.next = 77;
                                                        break;
                                                    }

                                                    throw _iteratorError;

                                                case 77:
                                                    return _context32.finish(74);

                                                case 78:
                                                    return _context32.finish(69);

                                                case 79:
                                                    _context32.next = 84;
                                                    break;

                                                case 81:
                                                    _context32.prev = 81;
                                                    _context32.t4 = _context32["catch"](2);
                                                    throw new Error(_context32.t4);

                                                case 84:
                                                    return _context32.abrupt("return", result);

                                                case 85:
                                                case "end":
                                                    return _context32.stop();
                                            }
                                        }
                                    }, _callee31, this, [[2, 81], [6, 65, 69, 79], [19, 31, 35, 45], [36, , 40, 44], [46, 50], [53, 57], [70, , 74, 78]]);
                                }));

                                function importIPFSFiles(_x31, _x32, _x33) {
                                    return _importIPFSFiles.apply(this, arguments);
                                }

                                return importIPFSFiles;
                            }()
                        }, {
                            key: "calculateLocalStorage",
                            value: function calculateLocalStorage() {
                                var _lsTotal = 0;

                                var _xLen;

                                var _x;

                                for (_x in localStorage) {
                                    // eslint-disable-next-line no-prototype-builtins
                                    if (!localStorage.hasOwnProperty(_x)) {
                                        continue;
                                    }

                                    _xLen = (localStorage[_x].length + _x.length) * 2;
                                    _lsTotal += _xLen;
                                }

                                ;
                                return (_lsTotal / 1024).toFixed(2);
                            }
                        }, {
                            key: "import",
                            value: function () {
                                var _import2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(cmd) {
                                    var permission, cid, workspace, result;
                                    return regeneratorRuntime.wrap(function _callee32$(_context33) {
                                        while (1) {
                                            switch (_context33.prev = _context33.next) {
                                                case 0:
                                                    _context33.next = 2;
                                                    return this.askUserPermission('import', 'Import multiple files into your workspaces.');

                                                case 2:
                                                    permission = _context33.sent;

                                                    if (permission) {
                                                        _context33.next = 5;
                                                        break;
                                                    }

                                                    return _context33.abrupt("return", false);

                                                case 5:
                                                    if (!(this.calculateLocalStorage() > 10000)) {
                                                        _context33.next = 7;
                                                        break;
                                                    }

                                                    throw new Error('The local storage of the browser is full.');

                                                case 7:
                                                    cid = cmd.cid;
                                                    _context33.next = 10;
                                                    return this.call('filePanel', 'createWorkspace', "workspace_".concat(Date.now()), true);

                                                case 10:
                                                    _context33.next = 12;
                                                    return this.call('filePanel', 'getCurrentWorkspace');

                                                case 12:
                                                    workspace = _context33.sent;

                                                    if (!cmd.local) {
                                                        _context33.next = 19;
                                                        break;
                                                    }

                                                    _context33.next = 16;
                                                    return this.importIPFSFiles(this.ipfsconfig, cid, workspace);

                                                case 16:
                                                    result = _context33.sent;
                                                    _context33.next = 32;
                                                    break;

                                                case 19:
                                                    _context33.next = 21;
                                                    return this.importIPFSFiles(this.remixIPFS, cid, workspace);

                                                case 21:
                                                    _context33.t1 = _context33.sent;

                                                    if (_context33.t1) {
                                                        _context33.next = 26;
                                                        break;
                                                    }

                                                    _context33.next = 25;
                                                    return this.importIPFSFiles(this.ipfsconfig, cid, workspace);

                                                case 25:
                                                    _context33.t1 = _context33.sent;

                                                case 26:
                                                    _context33.t0 = _context33.t1;

                                                    if (_context33.t0) {
                                                        _context33.next = 31;
                                                        break;
                                                    }

                                                    _context33.next = 30;
                                                    return this.importIPFSFiles(this.globalIPFSConfig, cid, workspace);

                                                case 30:
                                                    _context33.t0 = _context33.sent;

                                                case 31:
                                                    result = _context33.t0;

                                                case 32:
                                                    _context33.next = 34;
                                                    return this.call('fileManager', 'refresh');

                                                case 34:
                                                    if (result) {
                                                        _context33.next = 36;
                                                        break;
                                                    }

                                                    throw new Error("Cannot pull files from IPFS at ".concat(cid));

                                                case 36:
                                                case "end":
                                                    return _context33.stop();
                                            }
                                        }
                                    }, _callee32, this);
                                }));

                                function _import(_x34) {
                                    return _import2.apply(this, arguments);
                                }

                                return _import;
                            }()
                        }, {
                            key: "getItem",
                            value: function () {
                                var _getItem = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(name) {
                                    return regeneratorRuntime.wrap(function _callee33$(_context34) {
                                        while (1) {
                                            switch (_context34.prev = _context34.next) {
                                                case 0:
                                                    if (!(typeof window !== 'undefined')) {
                                                        _context34.next = 2;
                                                        break;
                                                    }

                                                    return _context34.abrupt("return", window.localStorage.getItem(name));

                                                case 2:
                                                case "end":
                                                    return _context34.stop();
                                            }
                                        }
                                    }, _callee33);
                                }));

                                function getItem(_x35) {
                                    return _getItem.apply(this, arguments);
                                }

                                return getItem;
                            }()
                        }, {
                            key: "setItem",
                            value: function () {
                                var _setItem = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34(name, content) {
                                    return regeneratorRuntime.wrap(function _callee34$(_context35) {
                                        while (1) {
                                            switch (_context35.prev = _context35.next) {
                                                case 0:
                                                    _context35.prev = 0;

                                                    if (typeof window !== 'undefined') {
                                                        window.localStorage.setItem(name, content);
                                                    }

                                                    _context35.next = 8;
                                                    break;

                                                case 4:
                                                    _context35.prev = 4;
                                                    _context35.t0 = _context35["catch"](0);
                                                    console.log(_context35.t0);
                                                    return _context35.abrupt("return", false);

                                                case 8:
                                                    return _context35.abrupt("return", true);

                                                case 9:
                                                case "end":
                                                    return _context35.stop();
                                            }
                                        }
                                    }, _callee34, null, [[0, 4]]);
                                }));

                                function setItem(_x36, _x37) {
                                    return _setItem.apply(this, arguments);
                                }

                                return setItem;
                            }()
                        }, {
                            key: "zip",
                            value: function () {
                                var _zip = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
                                    var zip, workspace, files, _iterator5, _step5, file, c;

                                    return regeneratorRuntime.wrap(function _callee35$(_context36) {
                                        while (1) {
                                            switch (_context36.prev = _context36.next) {
                                                case 0:
                                                    zip = new JSZip();
                                                    _context36.next = 3;
                                                    return this.call('filePanel', 'getCurrentWorkspace');

                                                case 3:
                                                    workspace = _context36.sent;
                                                    _context36.next = 6;
                                                    return this.getDirectory('/');

                                                case 6:
                                                    files = _context36.sent;
                                                    this.filesToSend = [];
                                                    _iterator5 = _createForOfIteratorHelper(files);

                                                    try {
                                                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                                                            file = _step5.value;
                                                            c = window.remixFileSystem.readFileSync("".concat(workspace.absolutePath, "/").concat(file));
                                                            zip.file(file, c);
                                                        }
                                                    } catch (err) {
                                                        _iterator5.e(err);
                                                    } finally {
                                                        _iterator5.f();
                                                    }

                                                    _context36.next = 12;
                                                    return zip.generateAsync({
                                                        type: 'blob'
                                                    }).then(function (content) {
                                                        (0, _fileSaver.saveAs)(content, "".concat(workspace.name, ".zip"));
                                                    });

                                                case 12:
                                                case "end":
                                                    return _context36.stop();
                                            }
                                        }
                                    }, _callee35, this);
                                }));

                                function zip() {
                                    return _zip.apply(this, arguments);
                                }

                                return zip;
                            }()
                        }, {
                            key: "createDirectories",
                            value: function () {
                                var _createDirectories = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36(strdirectories) {
                                    var ignore, directories, i, previouspath, finalPath;
                                    return regeneratorRuntime.wrap(function _callee36$(_context37) {
                                        while (1) {
                                            switch (_context37.prev = _context37.next) {
                                                case 0:
                                                    ignore = ['.', '/.', ''];

                                                    if (!(ignore.indexOf(strdirectories) > -1)) {
                                                        _context37.next = 3;
                                                        break;
                                                    }

                                                    return _context37.abrupt("return", false);

                                                case 3:
                                                    directories = strdirectories.split('/');

                                                    for (i = 0; i < directories.length; i++) {
                                                        previouspath = '';
                                                        if (i > 0) {
                                                            previouspath = '/' + directories.slice(0, i).join('/');
                                                        }
                                                        finalPath = previouspath + '/' + directories[i];

                                                        try {
                                                            if (!window.remixFileSystem.existsSync(finalPath)) {
                                                                window.remixFileSystem.mkdirSync(finalPath);
                                                            }
                                                        } catch (e) {
                                                            console.log(e);
                                                        }
                                                    }

                                                case 5:
                                                case "end":
                                                    return _context37.stop();
                                            }
                                        }
                                    }, _callee36);
                                }));

                                function createDirectories(_x38) {
                                    return _createDirectories.apply(this, arguments);
                                }

                                return createDirectories;
                            }()
                        }, {
                            key: "getDirectory",
                            value: function () {
                                var _getDirectory = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(dir) {
                                    var result, files, fileArray, _iterator6, _step6, fi, type;

                                    return regeneratorRuntime.wrap(function _callee37$(_context38) {
                                        while (1) {
                                            switch (_context38.prev = _context38.next) {
                                                case 0:
                                                    result = [];
                                                    _context38.next = 3;
                                                    return this.call('fileManager', 'readdir', dir);

                                                case 3:
                                                    files = _context38.sent;
                                                    fileArray = normalize(files);
                                                    _iterator6 = _createForOfIteratorHelper(fileArray);
                                                    _context38.prev = 6;

                                                    _iterator6.s();

                                                case 8:
                                                    if ((_step6 = _iterator6.n()).done) {
                                                        _context38.next = 26;
                                                        break;
                                                    }

                                                    fi = _step6.value;

                                                    if (!fi) {
                                                        _context38.next = 24;
                                                        break;
                                                    }

                                                    type = fi.data.isDirectory;

                                                    if (!(type === true)) {
                                                        _context38.next = 23;
                                                        break;
                                                    }

                                                    _context38.t0 = [];
                                                    _context38.t1 = _toConsumableArray(result);
                                                    _context38.t2 = _toConsumableArray;
                                                    _context38.next = 18;
                                                    return this.getDirectory("".concat(fi.filename));

                                                case 18:
                                                    _context38.t3 = _context38.sent;
                                                    _context38.t4 = (0, _context38.t2)(_context38.t3);
                                                    result = _context38.t0.concat.call(_context38.t0, _context38.t1, _context38.t4);
                                                    _context38.next = 24;
                                                    break;

                                                case 23:
                                                    result = [].concat(_toConsumableArray(result), [fi.filename]);

                                                case 24:
                                                    _context38.next = 8;
                                                    break;

                                                case 26:
                                                    _context38.next = 31;
                                                    break;

                                                case 28:
                                                    _context38.prev = 28;
                                                    _context38.t5 = _context38["catch"](6);

                                                    _iterator6.e(_context38.t5);

                                                case 31:
                                                    _context38.prev = 31;

                                                    _iterator6.f();

                                                    return _context38.finish(31);

                                                case 34:
                                                    return _context38.abrupt("return", result);

                                                case 35:
                                                case "end":
                                                    return _context38.stop();
                                            }
                                        }
                                    }, _callee37, this, [[6, 28, 31, 34]]);
                                }));

                                function getDirectory(_x39) {
                                    return _getDirectory.apply(this, arguments);
                                }

                                return getDirectory;
                            }()
                        }
                    ]);

                    return DGitProvider;
                }(_engine.Plugin);

                var normalize = function normalize(filesList) {
                    var folders = [];
                    var files = [];
                    Object.keys(filesList || {}).forEach(function (key) {
                        if (filesList[key].isDirectory) {
                            folders.push({
                                filename: key,
                                data: filesList[key]
                            });
                        } else {
                            files.push({
                                filename: key,
                                data: filesList[key]
                            });
                        }
                    });
                    return [].concat(folders, files);
                };

                module.exports = DGitProvider;
                /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__(492).Buffer))

            /***/
        }),

        /***/ 2079:
        /***/ (function (module, exports) {

            /* (ignored) */

            /***/
        }),

        /***/ 2398:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                    _get = Reflect.get;
                } else {
                    _get = function _get(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) {
                            return;
                        }
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                            return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                    };
                }
                return _get.apply(this, arguments);
            }

            function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                    object = _getPrototypeOf(object);
                    if (object === null) {
                        break;
                    }
                }
                return object;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var EventManager = __webpack_require__(510);

            var FileProvider = __webpack_require__(800);

            var pathModule = __webpack_require__(530);

            var WorkspaceFileProvider = /*#__PURE__*/function (_FileProvider) {
                _inherits(WorkspaceFileProvider, _FileProvider);

                var _super = _createSuper(WorkspaceFileProvider);

                function WorkspaceFileProvider() {
                    var _this;

                    _classCallCheck(this, WorkspaceFileProvider);

                    _this = _super.call(this, '');
                    _this.workspacesPath = '.workspaces';
                    _this.workspace = null;
                    _this.event = new EventManager();
                    return _this;
                }

                _createClass(WorkspaceFileProvider, [
                    {
                        key: "setWorkspace",
                        value: function setWorkspace(workspace) {
                            if (!workspace) {
                                return;
                            }
                            workspace = workspace.replace(/^\/|\/$/g, ''); // remove first and last slash

                            this.workspace = workspace;
                        }
                    }, {
                        key: "getWorkspace",
                        value: function getWorkspace() {
                            return this.workspace;
                        }
                    }, {
                        key: "isReady",
                        value: function isReady() {
                            return this.workspace !== null;
                        }
                    }, {
                        key: "clearWorkspace",
                        value: function clearWorkspace() {
                            this.workspace = null;
                        }
                    }, {
                        key: "removePrefix",
                        value: function removePrefix(path) {
                            path = path.replace(/^\/|\/$/g, ''); // remove first and last slash

                            if (path.startsWith(this.workspacesPath + '/' + this.workspace)) {
                                return path;
                            }
                            var splitPath = path.split('/');

                            if (splitPath[0] === this.workspace) {
                                splitPath[0] = this.workspacesPath + '/' + this.workspace;
                                path = splitPath.join('/');
                                return path;
                            }

                            path = _get(_getPrototypeOf(WorkspaceFileProvider.prototype), "removePrefix", this).call(this, path);
                            var ret = this.workspacesPath + '/' + this.workspace + '/' + (path === '/' ? '' : path);
                            ret = ret.replace(/^\/|\/$/g, '');
                            if (!this.isSubDirectory(this.workspacesPath + '/' + this.workspace, ret)) {
                                throw new Error('Cannot read/write to path outside workspace');
                            }
                            return ret;
                        }
                    }, {
                        key: "isSubDirectory",
                        value: function isSubDirectory(parent, child) {
                            if (!parent) {
                                return false;
                            }
                            if (parent === child) {
                                return true;
                            }
                            var relative = pathModule.relative(parent, child);
                            return !!relative && relative.split(pathModule.sep)[0] !== '..';
                        }
                    }, {
                        key: "resolveDirectory",
                        value: function resolveDirectory(path, callback) {
                            var _this2 = this;

                            _get(_getPrototypeOf(WorkspaceFileProvider.prototype), "resolveDirectory", this).call(this, path, function (error, files) {
                                if (error) {
                                    return callback(error);
                                }
                                var unscoped = {};

                                for (var file in files) {
                                    unscoped[file.replace(_this2.workspacesPath + '/' + _this2.workspace + '/', '')] = files[file];
                                }

                                callback(null, unscoped);
                            });
                        }
                    }, {
                        key: "copyFolderToJson",
                        value: function () {
                            var _copyFolderToJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(directory, visitFile, visitFolder) {
                                var regex, json;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                visitFile = visitFile || function () {
                                                };

                                                visitFolder = visitFolder || function () {
                                                };

                                                regex = new RegExp(".workspaces/".concat(this.workspace, "/"), 'g');
                                                _context.next = 5;
                                                return _get(_getPrototypeOf(WorkspaceFileProvider.prototype), "_copyFolderToJsonInternal", this).call(this, directory, function (_ref) {
                                                    var path = _ref.path,
                                                        content = _ref.content;
                                                    visitFile({
                                                        path: path.replace(regex, ''),
                                                        content: content
                                                    });
                                                }, function (_ref2) {
                                                    var path = _ref2.path;
                                                    visitFolder({
                                                        path: path.replace(regex, '')
                                                    });
                                                });

                                            case 5:
                                                json = _context.sent;
                                                json = JSON.stringify(json).replace(regex, '');
                                                return _context.abrupt("return", JSON.parse(json));

                                            case 8:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function copyFolderToJson(_x, _x2, _x3) {
                                return _copyFolderToJson.apply(this, arguments);
                            }

                            return copyFolderToJson;
                        }()
                    }, {
                        key: "_normalizePath",
                        value: function _normalizePath(path) {
                            return path.replace(this.workspacesPath + '/' + this.workspace + '/', '');
                        }
                    }, {
                        key: "createWorkspace",
                        value: function () {
                            var _createWorkspace = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(name) {
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _context2.prev = 0;
                                                if (!name) {
                                                    name = 'default_workspace';
                                                }
                                                this.setWorkspace(name);
                                                _context2.next = 5;
                                                return _get(_getPrototypeOf(WorkspaceFileProvider.prototype), "createDir", this).call(this, name);

                                            case 5:
                                                this.event.emit('createWorkspace', name);
                                                _context2.next = 11;
                                                break;

                                            case 8:
                                                _context2.prev = 8;
                                                _context2.t0 = _context2["catch"](0);
                                                throw new Error(_context2.t0);

                                            case 11:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this, [[0, 8]]);
                            }));

                            function createWorkspace(_x4) {
                                return _createWorkspace.apply(this, arguments);
                            }

                            return createWorkspace;
                        }()
                    }
                ]);

                return WorkspaceFileProvider;
            }(FileProvider);

            module.exports = WorkspaceFileProvider;

            /***/
        }),

        /***/ 2399:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            var _engineWeb = __webpack_require__(531);

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _pluginManager = __webpack_require__(2400);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var _paq = window._paq = window._paq || [];

            var profile = {
                name: 'pluginManager',
                displayName: 'Plugin manager',
                methods: [],
                events: [],
                icon: 'assets/img/pluginManager.webp',
                description: 'Start/stop services, modules and plugins',
                kind: 'settings',
                location: 'sidePanel',
                documentation: 'https://remix-ide.readthedocs.io/en/latest/plugin_manager.html',
                version: packageJson.version
            };

            var PluginManagerComponent = /*#__PURE__*/function (_ViewPlugin) {
                _inherits(PluginManagerComponent, _ViewPlugin);

                var _super = _createSuper(PluginManagerComponent);

                function PluginManagerComponent(appManager, engine) {
                    var _this;

                    _classCallCheck(this, PluginManagerComponent);

                    _this = _super.call(this, profile);
                    _this.appManager = appManager;
                    _this.engine = engine;
                    _this.htmlElement = document.createElement('div');

                    _this.htmlElement.setAttribute('id', 'pluginManager');

                    _this.filter = '';
                    _this.activePlugins = [];
                    _this.inactivePlugins = [];
                    _this.activeProfiles = _this.appManager.actives;
                    _this._paq = _paq;

                    _this.listenOnEvent();

                    return _this;
                }

                /**
                 * Checks and returns true or false if plugin name
                 * passed in exists in the actives string array in
                 * RemixAppManager
                 * @param {string} name name of Plugin
                 */


                _createClass(PluginManagerComponent, [
                    {
                        key: "isActive",
                        value: function isActive(name) {
                            return this.appManager.actives.includes(name);
                        }
                        /**
                         * Delegates to method activatePlugin in
                         * RemixAppManager to enable plugin activation
                         * @param {string} name name of Plugin
                         */

                    }, {
                        key: "activateP",
                        value: function activateP(name) {
                            this.appManager.activatePlugin(name);

                            _paq.push(['trackEvent', 'manager', 'activate', name]);
                        }
                        /**
                         * Takes the name of a local plugin and does both
                         * activation and registration
                         * @param {Profile} pluginName
                         * @returns {void}
                         */

                    }, {
                        key: "activateAndRegisterLocalPlugin",
                        value: function () {
                            var _activateAndRegisterLocalPlugin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(localPlugin) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                if (localPlugin) {
                                                    this.engine.register(localPlugin);
                                                    this.appManager.activatePlugin(localPlugin.profile.name);
                                                    this.getAndFilterPlugins();
                                                    localStorage.setItem('plugins/local', JSON.stringify(localPlugin.profile));
                                                }

                                            case 1:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function activateAndRegisterLocalPlugin(_x) {
                                return _activateAndRegisterLocalPlugin.apply(this, arguments);
                            }

                            return activateAndRegisterLocalPlugin;
                        }()
                        /**
                         * Calls and triggers the event deactivatePlugin
                         * with with manager permission passing in the name
                         * of the plugin
                         * @param {string} name name of Plugin
                         */

                    }, {
                        key: "deactivateP",
                        value: function deactivateP(name) {
                            this.call('manager', 'deactivatePlugin', name);

                            _paq.push(['trackEvent', 'manager', 'deactivate', name]);
                        }
                    }, {
                        key: "onActivation",
                        value: function onActivation() {
                            this.renderComponent();
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_pluginManager.RemixUiPluginManager, {
                                pluginComponent: this
                            }), this.htmlElement);
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            return this.htmlElement;
                        }
                    }, {
                        key: "getAndFilterPlugins",
                        value: function getAndFilterPlugins(filter) {
                            var _this2 = this;

                            this.filter = typeof filter === 'string' ? filter.toLowerCase() : this.filter;

                            var isFiltered = function isFiltered(profile) {
                                return (profile.displayName ? profile.displayName : profile.name).toLowerCase().includes(_this2.filter);
                            };

                            var isNotRequired = function isNotRequired(profile) {
                                return !_this2.appManager.isRequired(profile.name);
                            };

                            var isNotDependent = function isNotDependent(profile) {
                                return !_this2.appManager.isDependent(profile.name);
                            };

                            var isNotHome = function isNotHome(profile) {
                                return profile.name !== 'home';
                            };

                            var sortByName = function sortByName(profileA, profileB) {
                                var nameA = (profileA.displayName ? profileA.displayName : profileA.name).toUpperCase();
                                var nameB = (profileB.displayName ? profileB.displayName : profileB.name).toUpperCase();
                                return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
                            };

                            var activatedPlugins = [];
                            var deactivatedPlugins = [];
                            var tempArray = this.appManager.getAll().filter(isFiltered).filter(isNotRequired).filter(isNotDependent).filter(isNotHome).sort(sortByName);
                            tempArray.forEach(function (profile) {
                                if (_this2.appManager.actives.includes(profile.name)) {
                                    activatedPlugins.push(profile);
                                } else {
                                    deactivatedPlugins.push(profile);
                                }
                            });
                            this.activePlugins = activatedPlugins;
                            this.inactivePlugins = deactivatedPlugins;
                            this.renderComponent();
                        }
                    }, {
                        key: "listenOnEvent",
                        value: function listenOnEvent() {
                            var _this3 = this;

                            this.engine.event.on('onRegistration', function () {
                                return _this3.renderComponent();
                            });
                            this.appManager.event.on('activate', function () {
                                _this3.getAndFilterPlugins();
                            });
                            this.appManager.event.on('deactivate', function () {
                                _this3.getAndFilterPlugins();
                            });
                        }
                    }
                ]);

                return PluginManagerComponent;
            }(_engineWeb.ViewPlugin);

            module.exports = PluginManagerComponent;

            /***/
        }),

        /***/ 2400:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiPluginManager = __webpack_require__(2401);

            Object.keys(_remixUiPluginManager).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiPluginManager[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiPluginManager[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2401:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixUiPluginManager = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _ActivePluginCardContainer = _interopRequireDefault(__webpack_require__(2402));

            var _InactivePluginCardContainer = _interopRequireDefault(__webpack_require__(2405));

            var _rootView = _interopRequireDefault(__webpack_require__(2407));

            __webpack_require__(831);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable @typescript-eslint/no-unused-vars */
            const RemixUiPluginManager = ({
                                              pluginComponent
                                          }) => {
                const [activeProfiles, setActiveProfiles] = (0, _react.useState)(pluginComponent.activePlugins);
                const [inactiveProfiles, setinactiveProfiles] = (0, _react.useState)(pluginComponent.inactivePlugins);
                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_rootView.default, {
                    pluginComponent: pluginComponent,
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("section", {
                        "data-id": "pluginManagerComponentPluginManagerSection",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivePluginCardContainer.default, {
                            pluginComponent: pluginComponent,
                            setActiveProfiles: setActiveProfiles,
                            activeProfiles: activeProfiles
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_InactivePluginCardContainer.default, {
                            pluginComponent: pluginComponent,
                            setInactiveProfiles: setinactiveProfiles,
                            inactiveProfiles: inactiveProfiles
                        })
                        ]
                    })
                });
            };

            exports.RemixUiPluginManager = RemixUiPluginManager;

            /***/
        }),

        /***/ 2402:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _ActivePluginCard = _interopRequireDefault(__webpack_require__(2403));

            var _moduleHeading = _interopRequireDefault(__webpack_require__(1158));

            var _jsxRuntime = __webpack_require__(21);

            /* eslint-disable @typescript-eslint/no-unused-vars */
            function ActivePluginCardContainer({
                                                   pluginComponent
                                               }) {
                const deactivatePlugin = pluginName => {
                    pluginComponent.deactivateP(pluginName);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.default.Fragment, {
                    children: [
                        pluginComponent.activePlugins && pluginComponent.activePlugins.length ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_moduleHeading.default, {
                            headingLabel: "Active Modules",
                            count: pluginComponent.activePlugins.length
                        }) : null, pluginComponent.activePlugins && pluginComponent.activePlugins.map((profile, idx) => {
                            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivePluginCard.default, {
                                buttonText: "Deactivate",
                                profile: profile,
                                deactivatePlugin: deactivatePlugin
                            }, idx);
                        })
                    ]
                });
            }

            var _default = ActivePluginCardContainer;
            exports.default = _default;

            /***/
        }),

        /***/ 2403:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            __webpack_require__(831);

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-use-before-define
            function ActivePluginCard({
                                          profile,
                                          buttonText,
                                          deactivatePlugin
                                      }) {
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "list-group list-group-flush plugins-list-group",
                    "data-id": "pluginManagerComponentActiveTile",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                        className: "list-group-item py-1 mb-1 plugins-list-group-item",
                        title: profile.displayName || profile.name,
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "remixui_row justify-content-between align-items-center mb-2",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("h6", {
                                className: "remixui_displayName plugin-name",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    children: [
                                        profile.displayName || profile.name, profile.documentation && /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                            href: profile.documentation,
                                            className: "px-1",
                                            title: "link to documentation",
                                            target: "_blank",
                                            rel: "noreferrer",
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                "aria-hidden": "true",
                                                className: "fas fa-book"
                                            })
                                        }), profile.version && profile.version.match(/\b(\w*alpha\w*)\b/g) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            title: "Version Alpha",
                                            className: "remixui_versionWarning plugin-version",
                                            children: "alpha"
                                        }) : profile.version && profile.version.match(/\b(\w*beta\w*)\b/g) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            title: "Version Beta",
                                            className: "remixui_versionWarning plugin-version",
                                            children: "beta"
                                        }) : null
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                    onClick: () => {
                                        deactivatePlugin(profile.name);
                                    },
                                    className: "btn btn-secondary btn-sm",
                                    "data-id": `pluginManagerComponentDeactivateButton${profile.name}`,
                                    children: buttonText
                                })
                                ]
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "remixui_description d-flex text-body plugin-text mb-2",
                            children: [
                                profile.icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                                    src: profile.icon,
                                    className: "mr-1 mt-1 remixui_pluginIcon",
                                    alt: "profile icon"
                                }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    className: "remixui_descriptiontext",
                                    children: profile.description
                                })
                            ]
                        })
                        ]
                    })
                });
            }

            var _default = ActivePluginCard;
            exports.default = _default;

            /***/
        }),

        /***/ 2404:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".remixui_pluginSearch {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--light);\n  padding: 10px;\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  margin-bottom: 0px;\n}\n.remixui_pluginSearchInput {\n  height: 38px;\n}\n.remixui_pluginSearchButton {\n  font-size: 13px;\n}\n.remixui_displayName {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.remixui_pluginIcon {\n  height: 0.7rem;\n  width: 0.7rem;\n  filter: invert(0.5);\n}\n.remixui_description {\n  font-size: 13px;\n  line-height: 18px;\n}\n.remixui_descriptiontext {\n  display: block;\n}\n.remixui_descriptiontext:first-letter {\n  text-transform: uppercase;\n}\n.remixui_row {\n  display: flex;\n  flex-direction: row;\n}\n.remixui_isStuck {\n  background-color: var(--primary);\n  /* color:  */\n}\n.remixui_versionWarning {\n  padding: 4px;\n  margin: 0 8px;\n  font-weight: 700;\n  font-size: 9px;\n  line-height: 12px;\n  text-transform: uppercase;\n  cursor: default;\n  border: 1px solid;\n  border-radius: 2px;\n}\n.remixui_permissions {\n  position: -webkit-sticky;\n  position: sticky;\n  bottom: 0;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 5px 20px;\n}\n.remixui_permissions button {\n  padding: 2px 5px;\n  cursor: pointer;\n}\n.remixui_permissionForm h4 {\n  font-size: 1.3rem;\n  text-align: center;\n}\n.remixui_permissionForm h6 {\n  font-size: 1.1rem;\n}\n.remixui_permissionForm hr {\n  width: 80%;\n}\n.remixui_permissionKey {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.remixui_permissionKey i {\n  cursor: pointer;\n}\n.remixui_checkbox {\n  display: flex;\n  align-items: center;\n}\n.remixui_checkbox label {\n  margin: 0;\n  font-size: 1rem;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbWl4LXVpLXBsdWdpbi1tYW5hZ2VyLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixhQUFhO0VBQ2Isd0JBQWdCO0VBQWhCLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sVUFBVTtFQUNWLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiw4QkFBOEI7QUFDaEM7QUFDQTtFQUNFLGNBQWM7RUFDZCxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSx5QkFBeUI7QUFDM0I7QUFDQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGdDQUFnQztFQUNoQyxZQUFZO0FBQ2Q7QUFDQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIseUJBQXlCO0VBQ3pCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSx3QkFBZ0I7RUFBaEIsZ0JBQWdCO0VBQ2hCLFNBQVM7RUFDVCxhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLG1CQUFtQjtFQUNuQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLFVBQVU7QUFDWjtBQUNBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLFNBQVM7RUFDVCxlQUFlO0FBQ2pCIiwiZmlsZSI6InJlbWl4LXVpLXBsdWdpbi1tYW5hZ2VyLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yZW1peHVpX3BsdWdpblNlYXJjaCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0KTtcbiAgcGFkZGluZzogMTBweDtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAyO1xuICBtYXJnaW4tYm90dG9tOiAwcHg7XG59XG4ucmVtaXh1aV9wbHVnaW5TZWFyY2hJbnB1dCB7XG4gIGhlaWdodDogMzhweDtcbn1cbi5yZW1peHVpX3BsdWdpblNlYXJjaEJ1dHRvbiB7XG4gIGZvbnQtc2l6ZTogMTNweDtcbn1cbi5yZW1peHVpX2Rpc3BsYXlOYW1lIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cbi5yZW1peHVpX3BsdWdpbkljb24ge1xuICBoZWlnaHQ6IDAuN3JlbTtcbiAgd2lkdGg6IDAuN3JlbTtcbiAgZmlsdGVyOiBpbnZlcnQoMC41KTtcbn1cbi5yZW1peHVpX2Rlc2NyaXB0aW9uIHtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMThweDtcbn1cbi5yZW1peHVpX2Rlc2NyaXB0aW9udGV4dCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLnJlbWl4dWlfZGVzY3JpcHRpb250ZXh0OmZpcnN0LWxldHRlciB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG59XG4ucmVtaXh1aV9yb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuLnJlbWl4dWlfaXNTdHVjayB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkpO1xuICAvKiBjb2xvcjogICovXG59XG4ucmVtaXh1aV92ZXJzaW9uV2FybmluZyB7XG4gIHBhZGRpbmc6IDRweDtcbiAgbWFyZ2luOiAwIDhweDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgZm9udC1zaXplOiA5cHg7XG4gIGxpbmUtaGVpZ2h0OiAxMnB4O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbi5yZW1peHVpX3Blcm1pc3Npb25zIHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgYm90dG9tOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA1cHggMjBweDtcbn1cbi5yZW1peHVpX3Blcm1pc3Npb25zIGJ1dHRvbiB7XG4gIHBhZGRpbmc6IDJweCA1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5yZW1peHVpX3Blcm1pc3Npb25Gb3JtIGg0IHtcbiAgZm9udC1zaXplOiAxLjNyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5yZW1peHVpX3Blcm1pc3Npb25Gb3JtIGg2IHtcbiAgZm9udC1zaXplOiAxLjFyZW07XG59XG4ucmVtaXh1aV9wZXJtaXNzaW9uRm9ybSBociB7XG4gIHdpZHRoOiA4MCU7XG59XG4ucmVtaXh1aV9wZXJtaXNzaW9uS2V5IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLnJlbWl4dWlfcGVybWlzc2lvbktleSBpIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLnJlbWl4dWlfY2hlY2tib3gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLnJlbWl4dWlfY2hlY2tib3ggbGFiZWwge1xuICBtYXJnaW46IDA7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbiJdfQ== */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 2405:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _InactivePluginCard = _interopRequireDefault(__webpack_require__(2406));

            var _moduleHeading = _interopRequireDefault(__webpack_require__(1158));

            var _jsxRuntime = __webpack_require__(21);

            /* eslint-disable @typescript-eslint/no-unused-vars */
            function InactivePluginCardContainer({
                                                     pluginComponent
                                                 }) {
                const activatePlugin = pluginName => {
                    pluginComponent.activateP(pluginName);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.default.Fragment, {
                    children: [
                        pluginComponent.inactivePlugins && pluginComponent.inactivePlugins.length ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_moduleHeading.default, {
                            headingLabel: "Inactive Modules",
                            count: pluginComponent.inactivePlugins.length
                        }) : null, pluginComponent.inactivePlugins && pluginComponent.inactivePlugins.map((profile, idx) => {
                            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_InactivePluginCard.default, {
                                buttonText: "Activate",
                                profile: profile,
                                activatePlugin: activatePlugin
                            }, idx);
                        })
                    ]
                });
            }

            var _default = InactivePluginCardContainer;
            exports.default = _default;

            /***/
        }),

        /***/ 2406:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            __webpack_require__(831);

            var _jsxRuntime = __webpack_require__(21);

            // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-use-before-define
            function InactivePluginCard({
                                            profile,
                                            buttonText,
                                            activatePlugin
                                        }) {
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "list-group list-group-flush plugins-list-group",
                    "data-id": "pluginManagerComponentActiveTile",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                        className: "list-group-item py-1 mb-1 plugins-list-group-item",
                        title: profile.displayName || profile.name,
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "remixui_row justify-content-between align-items-center mb-2",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("h6", {
                                className: "remixui_displayName plugin-name",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    children: [
                                        profile.displayName || profile.name, profile.documentation && /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                            href: profile.documentation,
                                            className: "px-1",
                                            title: "link to documentation",
                                            target: "_blank",
                                            rel: "noreferrer",
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                "aria-hidden": "true",
                                                className: "fas fa-book"
                                            })
                                        }), profile.version && profile.version.match(/\b(\w*alpha\w*)\b/g) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            title: "Version Alpha",
                                            className: "remixui_versionWarning plugin-version",
                                            children: "alpha"
                                        }) : profile.version && profile.version.match(/\b(\w*beta\w*)\b/g) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            title: "Version Beta",
                                            className: "remixui_versionWarning plugin-version",
                                            children: "beta"
                                        }) : null
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                    onClick: () => {
                                        activatePlugin(profile.name);
                                    },
                                    className: "btn btn-success btn-sm",
                                    "data-id": `pluginManagerComponentActivateButton${profile.name}`,
                                    children: buttonText
                                })
                                ]
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "remixui_description d-flex text-body plugin-text mb-2",
                            children: [
                                profile.icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                                    src: profile.icon,
                                    className: "mr-1 mt-1 remixui_pluginIcon",
                                    alt: "profile icon"
                                }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    className: "remixui_descriptiontext",
                                    children: profile.description
                                })
                            ]
                        })
                        ]
                    })
                });
            }

            var _default = InactivePluginCard;
            exports.default = _default;

            /***/
        }),

        /***/ 2407:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _permissionsSettings = _interopRequireDefault(__webpack_require__(2408));

            var _LocalPluginForm = _interopRequireDefault(__webpack_require__(2410));

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable @typescript-eslint/no-unused-vars */
            function RootView({
                                  pluginComponent,
                                  children
                              }) {
                const [visible, setVisible] = (0, _react.useState)(true);
                const [filterPlugins, setFilterPlugin] = (0, _react.useState)('');

                const openModal = () => {
                    setVisible(false);
                };

                const closeModal = () => setVisible(true);

                (0, _react.useEffect)(() => {
                    pluginComponent.getAndFilterPlugins(filterPlugins);
                }, [filterPlugins]);
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        id: "pluginManager",
                        "data-id": "pluginManagerComponentPluginManager",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("header", {
                            className: "form-group remixui_pluginSearch plugins-header py-3 px-4 border-bottom",
                            "data-id": "pluginManagerComponentPluginManagerHeader",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                type: "text",
                                onChange: event => {
                                    setFilterPlugin(event.target.value.toLowerCase());
                                },
                                value: filterPlugins,
                                className: "form-control",
                                placeholder: "Search",
                                "data-id": "pluginManagerComponentSearchInput"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                onClick: openModal,
                                className: "remixui_pluginSearchButton btn bg-transparent text-dark border-0 mt-2 text-underline",
                                "data-id": "pluginManagerComponentPluginSearchButton",
                                children: "Connect to a Local Plugin"
                            })
                            ]
                        }), children, /*#__PURE__*/(0, _jsxRuntime.jsx)(_permissionsSettings.default, {})
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_LocalPluginForm.default, {
                        closeModal: closeModal,
                        visible: visible,
                        pluginManager: pluginComponent
                    })
                    ]
                });
            }

            var _default = RootView;
            exports.default = _default;

            /***/
        }),

        /***/ 2408:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _modalDialog = __webpack_require__(141);

            var _useLocalStorage = _interopRequireDefault(__webpack_require__(2409));

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable @typescript-eslint/no-unused-vars */
            // eslint-disable-line no-use-before-define

            /* eslint-disable-line */
            function PermisssionsSettings() {
                const [modalVisibility, setModalVisibility] = (0, _react.useState)(true);
                const [permissions, setPermissions] = (0, _useLocalStorage.default)('plugins/permissions', {});
                const [permissionCache, setpermissionCache] = (0, _react.useState)();

                const closeModal = () => setModalVisibility(true);

                const openModal = () => {
                    const currentValue = JSON.parse(window.localStorage.getItem('plugins/permissions') || '{}');
                    setpermissionCache(currentValue);
                    setPermissions(currentValue);
                    setModalVisibility(!modalVisibility);
                };

                const cancel = () => {
                    setPermissions(permissionCache);
                };

                const getState = (targetPlugin, funcName, pluginName) => {
                    return permissions[targetPlugin][funcName][pluginName].allow;
                };

                const handleCheckboxClick = (targetPlugin, funcName, pluginName) => {
                    setPermissions(permissions => {
                        permissions[targetPlugin][funcName][pluginName].allow = !permissions[targetPlugin][funcName][pluginName].allow;
                        return permissions;
                    });
                };

                function clearFunctionPermission(targetPlugin, funcName, pluginName) {
                    setPermissions(permissions => {
                        delete permissions[targetPlugin][funcName][pluginName];
                        if (Object.keys(permissions[targetPlugin][funcName]).length === 0) {
                            delete permissions[targetPlugin][funcName];
                        }
                        if (Object.keys(permissions[targetPlugin]).length === 0) {
                            delete permissions[targetPlugin];
                        }
                        return permissions;
                    });
                }

                function clearTargetPermission(targetPlugin) {
                    setPermissions(permissions => {
                        delete permissions[targetPlugin];
                        return permissions;
                    });
                }

                function RenderPluginHeader({
                                                headingName
                                            }) {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "pb-2 remixui_permissionKey",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h3", {
                            children: [headingName, " permissions:"]
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                            onClick: () => {
                                clearTargetPermission(headingName);
                            },
                            className: "far fa-trash-alt",
                            "data-id": `pluginManagerSettingsClearAllPermission-${headingName}`
                        })
                        ]
                    });
                }

                function RenderPermissions({
                                               targetPlugin
                                           }) {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
                        children: Object.keys(permissions[targetPlugin]).map(funcName => {
                            return Object.keys(permissions[targetPlugin][funcName]).map((pluginName, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "form-group remixui_permissionKey",
                                children: permissions && Object.keys(permissions).length > 0 ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "remixui_checkbox",
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                            className: "mr-2",
                                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                                type: "checkbox",
                                                onChange: () => handleCheckboxClick(targetPlugin, funcName, pluginName),
                                                checked: getState(targetPlugin, funcName, pluginName),
                                                id: `permission-checkbox-${targetPlugin}-${funcName}-${pluginName}`,
                                                "aria-describedby": `module ${pluginName} asks permission for ${funcName}`
                                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                                className: "ml-4",
                                                htmlFor: `permission-checkbox-${targetPlugin}-${funcName}-${targetPlugin}`,
                                                "data-id": `permission-label-${targetPlugin}-${funcName}-${targetPlugin}`,
                                                children: [
                                                    "Allow ", /*#__PURE__*/(0, _jsxRuntime.jsx)("u", {
                                                        children: pluginName
                                                    }), " to call ", /*#__PURE__*/(0, _jsxRuntime.jsx)("u", {
                                                        children: funcName
                                                    })
                                                ]
                                            })
                                            ]
                                        })
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        onClick: () => {
                                            clearFunctionPermission(targetPlugin, funcName, pluginName);
                                        },
                                        className: "fa fa-trash-alt",
                                        "data-id": `pluginManagerSettingsRemovePermission-${targetPlugin}-${funcName}-${targetPlugin}`
                                    })
                                    ]
                                }) : null
                            }, pluginName));
                        })
                    });
                }

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_modalDialog.ModalDialog, {
                        id: "permissionsSettings",
                        handleHide: closeModal,
                        cancelFn: cancel,
                        hide: modalVisibility,
                        title: "Plugin Manager Permissions",
                        okLabel: "OK",
                        cancelLabel: "Cancel",
                        children: [
                            permissions && Object.keys(permissions).length > 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
                                className: "text-center",
                                children: "Current Permission Settings"
                            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
                                className: "text-center",
                                children: "No Permission requested yet."
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("form", {
                                className: "remixui_permissionForm",
                                "data-id": "pluginManagerSettingsPermissionForm",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "p-2",
                                    children: Object.keys(permissions).map(targetPlugin => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(RenderPluginHeader, {
                                            headingName: targetPlugin
                                        }, `header-${targetPlugin}`), /*#__PURE__*/(0, _jsxRuntime.jsx)(RenderPermissions, {
                                            targetPlugin: targetPlugin
                                        }, `permissions-${targetPlugin}`)
                                        ]
                                    }, `container-${targetPlugin}`))
                                })
                            })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("footer", {
                        className: "bg-light remixui_permissions remix-bg-opacity",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                            onClick: openModal,
                            className: "btn btn-primary settings-button",
                            "data-id": "pluginManagerPermissionsButton",
                            children: "Permissions"
                        })
                    })
                    ]
                });
            }

            var _default = PermisssionsSettings;
            exports.default = _default;

            /***/
        }),

        /***/ 2409:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = __webpack_require__(13);

            function useLocalStorage(key, initialValue) {
                // Get from local storage then
                // parse stored json or return initialValue
                const readValue = () => {
                    // Prevent build error "window is undefined" but keep keep working
                    if (typeof window === 'undefined') {
                        return initialValue;
                    }

                    try {
                        const item = window.localStorage.getItem(key);
                        return item ? JSON.parse(item) : initialValue;
                    } catch (error) {
                        console.warn(`Error reading localStorage key “${key}”:`, error);
                        return initialValue;
                    }
                }; // State to store our value
                // Pass initial state function to useState so logic is only executed once


                const [storedValue, setStoredValue] = (0, _react.useState)(readValue); // Return a wrapped version of useState's setter function that ...
                // ... persists the new value to localStorage.

                const setValue = value => {
                    // Prevent build error "window is undefined" but keeps working
                    if (typeof window === 'undefined') {
                        console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);
                    }

                    try {
                        // Allow value to be a function so we have the same API as useState
                        const newValue = value instanceof Function ? value(storedValue) : value; // Save to local storage

                        window.localStorage.setItem(key, JSON.stringify(newValue)); // Save state

                        setStoredValue(newValue); // We dispatch a custom event so every useLocalStorage hook are notified

                        window.dispatchEvent(new Event('local-storage'));
                    } catch (error) {
                        console.warn(`Error setting localStorage key “${key}”:`, error);
                    }
                };

                (0, _react.useEffect)(() => {
                    setStoredValue(readValue());
                }, []);
                (0, _react.useEffect)(() => {
                    const handleStorageChange = () => {
                        setStoredValue(readValue());
                    }; // this only works for other documents, not the current one


                    window.addEventListener('storage', handleStorageChange); // this is a custom event, triggered in writeValueToLocalStorage

                    window.addEventListener('local-storage', handleStorageChange);
                    return () => {
                        window.removeEventListener('storage', handleStorageChange);
                        window.removeEventListener('local-storage', handleStorageChange);
                    };
                }, []);
                return [storedValue, setValue];
            }

            var _default = useLocalStorage;
            exports.default = _default;

            /***/
        }),

        /***/ 2410:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _modalDialog = __webpack_require__(141);

            var _toaster = __webpack_require__(195);

            var _engineWeb = __webpack_require__(531);

            var _pluginManagerReducer = __webpack_require__(2411);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const initialState = {
                name: '',
                displayName: '',
                url: '',
                type: 'iframe',
                hash: '',
                methods: [],
                location: 'sidePanel',
                canActivate: []
            };
            const defaultProfile = {
                methods: [],
                location: 'sidePanel',
                type: 'iframe',
                name: '',
                displayName: '',
                url: '',
                hash: ''
            };

            function LocalPluginForm({
                                         closeModal,
                                         visible,
                                         pluginManager
                                     }) {
                const [errorMsg, dispatchToastMsg] = (0, _react.useReducer)(_pluginManagerReducer.localPluginToastReducer, '');
                const [name, setName] = (0, _react.useState)('');
                const [displayName, setDisplayName] = (0, _react.useState)('');
                const [url, setUrl] = (0, _react.useState)('');
                const [type, setType] = (0, _react.useState)('iframe');
                const [location, setLocation] = (0, _react.useState)('sidePanel');
                const [methods, setMethods] = (0, _react.useState)('');
                const [canactivate, setCanactivate] = (0, _react.useState)('');
                (0, _react.useEffect)(() => {
                    const storagePlugin = localStorage.getItem('plugins/local') ? JSON.parse(localStorage.getItem('plugins/local')) : defaultProfile;
                    setName(storagePlugin.name);
                    setUrl(storagePlugin.url);
                    setLocation(storagePlugin.location);
                    setMethods(Array.isArray(storagePlugin.methods) ? storagePlugin.methods.join(',') : storagePlugin.methods);
                    setType(storagePlugin.type);
                    setDisplayName(storagePlugin.displayName);
                    setCanactivate(Array.isArray(storagePlugin.canActivate) ? storagePlugin.canActivate.join(',') : storagePlugin.canActivate || '');
                }, []);

                const handleModalOkClick = async () => {
                    try {
                        if (!name) {
                            throw new Error('Plugin should have a name');
                        }

                        if (pluginManager.appManager.getIds().includes(name)) {
                            throw new Error('This name has already been used');
                        }

                        if (!location) {
                            throw new Error('Plugin should have a location');
                        }
                        if (!url) {
                            throw new Error('Plugin should have an URL');
                        }
                        const newMethods = typeof methods === 'string' ? methods.split(',').filter(val => val).map(val => {
                            return val.trim();
                        }) : [];
                        const targetPlugin = {
                            name: name,
                            displayName: displayName,
                            description: '',
                            documentation: '',
                            events: [],
                            hash: '',
                            kind: '',
                            methods: newMethods,
                            url: url,
                            type: type,
                            location: location,
                            icon: 'assets/img/localPlugin.webp',
                            canActivate: typeof canactivate === 'string' ? canactivate.split(',').filter(val => val).map(val => {
                                return val.trim();
                            }) : []
                        };
                        const localPlugin = type === 'iframe' ? new _engineWeb.IframePlugin(initialState) : new _engineWeb.WebsocketPlugin(initialState);
                        localPlugin.profile.hash = `local-${name}`;
                        targetPlugin.description = localPlugin.profile.description !== undefined ? localPlugin.profile.description : '';
                        targetPlugin.events = localPlugin.profile.events !== undefined ? localPlugin.profile.events : [];
                        targetPlugin.kind = localPlugin.profile.kind !== undefined ? localPlugin.profile.kind : '';
                        localPlugin.profile = _objectSpread(_objectSpread({}, localPlugin.profile), targetPlugin);
                        pluginManager.activateAndRegisterLocalPlugin(localPlugin);
                    } catch (error) {
                        const action = {
                            type: 'show',
                            payload: `${error.message}`
                        };
                        dispatchToastMsg(action);
                        console.log(error);
                    }
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_modalDialog.ModalDialog, {
                        handleHide: closeModal,
                        id: "pluginManagerLocalPluginModalDialog",
                        hide: visible,
                        title: "Local Plugin",
                        okLabel: "OK",
                        okFn: handleModalOkClick,
                        cancelLabel: "Cancel",
                        cancelFn: closeModal,
                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("form", {
                            id: "local-plugin-form",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    htmlFor: "plugin-name",
                                    children: [
                                        "Plugin Name ", /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            children: "(required)"
                                        })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "form-control",
                                    onChange: e => setName(e.target.value),
                                    value: name || '',
                                    id: "plugin-name",
                                    "data-id": "localPluginName",
                                    placeholder: "Should be camelCase"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    htmlFor: "plugin-displayname",
                                    children: "Display Name"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "form-control",
                                    onChange: e => setDisplayName(e.target.value),
                                    value: displayName || '',
                                    id: "plugin-displayname",
                                    "data-id": "localPluginDisplayName",
                                    placeholder: "Name in the header"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    htmlFor: "plugin-methods",
                                    children: "Api (comma separated list of method names)"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "form-control",
                                    onChange: e => setMethods(e.target.value),
                                    value: methods || '',
                                    id: "plugin-methods",
                                    "data-id": "localPluginMethods",
                                    placeholder: "Methods"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    htmlFor: "plugin-methods",
                                    children: "Plugins it can activate (comma separated list of plugin names)"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "form-control",
                                    onChange: e => setCanactivate(e.target.value),
                                    value: canactivate || '',
                                    id: "plugin-canactivate",
                                    "data-id": "localPluginCanActivate",
                                    placeholder: "Plugin names"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    htmlFor: "plugin-url",
                                    children: [
                                        "Url ", /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                            children: "(required)"
                                        })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "form-control",
                                    onChange: e => setUrl(e.target.value),
                                    value: url || '',
                                    id: "plugin-url",
                                    "data-id": "localPluginUrl",
                                    placeholder: "ex: https://localhost:8000"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("h6", {
                                children: [
                                    "Type of connection ", /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                        children: "(required)"
                                    })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-check form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "radio",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-check-input",
                                        type: "radio",
                                        name: "type",
                                        value: "iframe",
                                        id: "iframe",
                                        "data-id": "localPluginRadioButtoniframe",
                                        checked: type === 'iframe',
                                        onChange: e => setType(e.target.value)
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label",
                                        htmlFor: "iframe",
                                        children: "Iframe"
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "radio",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-check-input",
                                        type: "radio",
                                        name: "type",
                                        value: "ws",
                                        id: "ws",
                                        "data-id": "localPluginRadioButtonws",
                                        checked: type === 'ws',
                                        onChange: e => setType(e.target.value)
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label",
                                        htmlFor: "ws",
                                        children: "Websocket"
                                    })
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("h6", {
                                children: [
                                    "Location in remix ", /*#__PURE__*/(0, _jsxRuntime.jsx)("small", {
                                        children: "(required)"
                                    })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "form-check form-group",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "radio",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-check-input",
                                        type: "radio",
                                        name: "location",
                                        value: "sidePanel",
                                        id: "none",
                                        "data-id": "localPluginRadioButtonsidePanel",
                                        checked: location === 'sidePanel',
                                        onChange: e => setLocation(e.target.value)
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label",
                                        htmlFor: "sidePanel",
                                        children: "Side Panel"
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "radio",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-check-input",
                                        type: "radio",
                                        name: "location",
                                        value: "mainPanel",
                                        id: "none",
                                        "data-id": "localPluginRadioButtonmainPanel",
                                        checked: location === 'mainPanel',
                                        onChange: e => setLocation(e.target.value)
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label",
                                        htmlFor: "mainPanel",
                                        children: "Main Panel"
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "radio",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "form-check-input",
                                        type: "radio",
                                        name: "location",
                                        value: "none",
                                        id: "none",
                                        "data-id": "localPluginRadioButtonnone",
                                        checked: location === 'none',
                                        onChange: e => setLocation(e.target.value)
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label",
                                        htmlFor: "none",
                                        children: "None"
                                    })
                                    ]
                                })
                                ]
                            })
                            ]
                        })
                    }), errorMsg ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_toaster.Toaster, {
                        message: errorMsg
                    }) : null
                    ]
                });
            }

            var _default = LocalPluginForm;
            exports.default = _default;

            /***/
        }),

        /***/ 2411:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.localPluginToastReducer = localPluginToastReducer;

            function localPluginToastReducer(currentState, toastAction) {
                switch (toastAction.type) {
                    case 'show':
                        return `Cannot create Plugin : ${toastAction.payload}`;

                    default:
                        return currentState;
                }
            }

            /***/
        }),

        /***/ 2412:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _solidityCompiler = __webpack_require__(1159);

            var _solidityCompilerPlugin = __webpack_require__(2425);

            var _engineWeb = __webpack_require__(531);

            var _queryParams = _interopRequireDefault(__webpack_require__(577));

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _helper = __webpack_require__(543);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                    _get = Reflect.get;
                } else {
                    _get = function _get(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) {
                            return;
                        }
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                            return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                    };
                }
                return _get.apply(this, arguments);
            }

            function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                    object = _getPrototypeOf(object);
                    if (object === null) {
                        break;
                    }
                }
                return object;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var profile = {
                name: 'solidity',
                displayName: 'Solidity compiler',
                icon: 'assets/img/solidity.webp',
                description: 'Compile solidity contracts',
                kind: 'compiler',
                permission: true,
                location: 'sidePanel',
                documentation: 'https://remix-ide.readthedocs.io/en/latest/solidity_editor.html',
                version: packageJson.version,
                methods: ['getCompilationResult', 'compile', 'compileWithParameters', 'setCompilerConfig', 'compileFile', 'getCompilerState']
            }; // EditorApi:
            // - events: ['compilationFinished'],
            // - methods: ['getCompilationResult']

            var CompileTab = /*#__PURE__*/function (_CompilerApiMixin) {
                _inherits(CompileTab, _CompilerApiMixin);

                var _super = _createSuper(CompileTab);

                // implements ICompilerApi
                function CompileTab(config, fileManager) {
                    var _this;

                    _classCallCheck(this, CompileTab);

                    _this = _super.call(this, profile);
                    _this.fileManager = fileManager;
                    _this.config = config;
                    _this.queryParams = new _queryParams["default"]();
                    _this.compileTabLogic = new _solidityCompiler.CompileTabLogic(_assertThisInitialized(_this), _this.contentImport);
                    _this.compiler = _this.compileTabLogic.compiler;

                    _this.compileTabLogic.init();

                    _this.initCompilerApi();

                    _this.el = document.createElement('div');

                    _this.el.setAttribute('id', 'compileTabView');

                    return _this;
                }

                _createClass(CompileTab, [
                    {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_solidityCompiler.SolidityCompiler, {
                                api: this
                            }), this.el);
                        }
                    }, {
                        key: "onCurrentFileChanged",
                        value: function onCurrentFileChanged() {
                            this.renderComponent();
                        }
                    }, {
                        key: "onResetResults",
                        value: function onResetResults() {
                            this.renderComponent();
                        }
                    }, {
                        key: "onSetWorkspace",
                        value: function onSetWorkspace() {
                            this.renderComponent();
                        }
                    }, {
                        key: "onNoFileSelected",
                        value: function onNoFileSelected() {
                            this.renderComponent();
                        }
                    }, {
                        key: "onCompilationFinished",
                        value: function onCompilationFinished() {
                            this.renderComponent();
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            this.renderComponent();
                            return this.el;
                        }
                    }, {
                        key: "compileWithParameters",
                        value: function () {
                            var _compileWithParameters = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(compilationTargets, settings) {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.next = 2;
                                                return _get(_getPrototypeOf(CompileTab.prototype), "compileWithParameters", this).call(this, compilationTargets, settings);

                                            case 2:
                                                return _context.abrupt("return", _context.sent);

                                            case 3:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function compileWithParameters(_x, _x2) {
                                return _compileWithParameters.apply(this, arguments);
                            }

                            return compileWithParameters;
                        }()
                    }, {
                        key: "getCompilationResult",
                        value: function getCompilationResult() {
                            return _get(_getPrototypeOf(CompileTab.prototype), "getCompilationResult", this).call(this);
                        }
                    }, {
                        key: "getFileManagerMode",
                        value: function getFileManagerMode() {
                            return this.fileManager.mode;
                        }
                        /**
                         * set the compiler configuration
                         * This function is used by remix-plugin compiler API.
                         * @param {object} settings {evmVersion, optimize, runs, version, language}
                         */

                    }, {
                        key: "setCompilerConfig",
                        value: function setCompilerConfig(settings) {
                            _get(_getPrototypeOf(CompileTab.prototype), "setCompilerConfig", this).call(this, settings);

                            this.renderComponent(); // @todo(#2875) should use loading compiler return value to check whether the compiler is loaded instead of "setInterval"

                            var value = JSON.stringify(settings, null, '\t');
                            this.call('notification', 'toast', (0, _helper.compilerConfigChangedToastMsg)(this.currentRequest.from, value));
                        }
                    }, {
                        key: "compile",
                        value: function compile(fileName) {
                            this.call('notification', 'toast', (0, _helper.compileToastMsg)(this.currentRequest.from, fileName));

                            _get(_getPrototypeOf(CompileTab.prototype), "compile", this).call(this, fileName);
                        }
                    }, {
                        key: "compileFile",
                        value: function compileFile(event) {
                            return _get(_getPrototypeOf(CompileTab.prototype), "compileFile", this).call(this, event);
                        }
                    }, {
                        key: "onActivation",
                        value: function () {
                            var _onActivation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                var _this2 = this;

                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _get(_getPrototypeOf(CompileTab.prototype), "onActivation", this).call(this);

                                                this.on('filePanel', 'workspaceInitializationCompleted', function () {
                                                    _this2.call('filePanel', 'registerContextMenuItem', {
                                                        id: 'solidity',
                                                        name: 'compileFile',
                                                        label: 'Compile',
                                                        type: [],
                                                        extension: ['.sol'],
                                                        path: [],
                                                        pattern: []
                                                    });
                                                });
                                                _context2.prev = 2;
                                                _context2.next = 5;
                                                return this.call('fileManager', 'file');

                                            case 5:
                                                this.currentFile = _context2.sent;
                                                _context2.next = 12;
                                                break;

                                            case 8:
                                                _context2.prev = 8;
                                                _context2.t0 = _context2["catch"](2);

                                                if (!(_context2.t0.message !== 'Error: No such file or directory No file selected')) {
                                                    _context2.next = 12;
                                                    break;
                                                }

                                                throw _context2.t0;

                                            case 12:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this, [[2, 8]]);
                            }));

                            function onActivation() {
                                return _onActivation.apply(this, arguments);
                            }

                            return onActivation;
                        }()
                    }, {
                        key: "getCompilerParameters",
                        value: function getCompilerParameters() {
                            var params = this.queryParams.get();
                            params.optimize = params.optimize === 'false' || params.optimize === null || params.optimize === undefined ? false : params.optimize;
                            params.optimize = params.optimize === 'true' ? true : params.optimize;
                            return params;
                        }
                    }, {
                        key: "setCompilerParameters",
                        value: function setCompilerParameters(params) {
                            this.queryParams.update(params);
                        }
                    }, {
                        key: "getAppParameter",
                        value: function () {
                            var _getAppParameter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(name) {
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                _context3.next = 2;
                                                return this.call('config', 'getAppParameter', name);

                                            case 2:
                                                return _context3.abrupt("return", _context3.sent);

                                            case 3:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3, this);
                            }));

                            function getAppParameter(_x3) {
                                return _getAppParameter.apply(this, arguments);
                            }

                            return getAppParameter;
                        }()
                    }, {
                        key: "setAppParameter",
                        value: function () {
                            var _setAppParameter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(name, value) {
                                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                        switch (_context4.prev = _context4.next) {
                                            case 0:
                                                _context4.next = 2;
                                                return this.call('config', 'setAppParameter', name, value);

                                            case 2:
                                            case "end":
                                                return _context4.stop();
                                        }
                                    }
                                }, _callee4, this);
                            }));

                            function setAppParameter(_x4, _x5) {
                                return _setAppParameter.apply(this, arguments);
                            }

                            return setAppParameter;
                        }()
                    }
                ]);

                return CompileTab;
            }((0, _solidityCompilerPlugin.CompilerApiMixin)(_engineWeb.ViewPlugin));

            module.exports = CompileTab;

            /***/
        }),

        /***/ 2413:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.SolidityCompiler = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _compilerContainer = __webpack_require__(2414);

            var _contractSelection = __webpack_require__(2418);

            var _toaster = __webpack_require__(195);

            var _modalDialog = __webpack_require__(141);

            var _renderer = __webpack_require__(1160);

            __webpack_require__(832);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const SolidityCompiler = props => {
                const {
                    api,
                    api: {
                        currentFile,
                        compileTabLogic,
                        contractsDetails,
                        contractMap,
                        compileErrors,
                        configurationSettings
                    }
                } = props;
                const [state, setState] = (0, _react.useState)({
                    isHardhatProject: false,
                    currentFile,
                    contractsDetails: {},
                    contractMap: {},
                    loading: false,
                    compileTabLogic: null,
                    compiler: null,
                    toasterMsg: '',
                    modal: {
                        hide: true,
                        title: '',
                        message: null,
                        okLabel: '',
                        okFn: () => {
                        },
                        cancelLabel: '',
                        cancelFn: () => {
                        },
                        handleHide: null
                    }
                });
                const [currentVersion, setCurrentVersion] = (0, _react.useState)('');
                const [hideWarnings, setHideWarnings] = (0, _react.useState)(false);
                (0, _react.useEffect)(() => {
                    (async () => {
                        const hide = (await api.getAppParameter('hideWarnings')) || false;
                        setHideWarnings(hide);
                    })();
                }, []);

                api.onCurrentFileChanged = currentFile => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            currentFile
                        });
                    });
                };

                api.onResetResults = () => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            currentFile: '',
                            contractsDetails: {},
                            contractMap: {}
                        });
                    });
                };

                api.onSetWorkspace = async isLocalhost => {
                    const isHardhat = isLocalhost && (await compileTabLogic.isHardhatProject());
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            currentFile,
                            isHardhatProject: isHardhat
                        });
                    });
                };

                api.onNoFileSelected = () => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            currentFile: ''
                        });
                    });
                };

                api.onCompilationFinished = (contractsDetails, contractMap) => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            contractsDetails,
                            contractMap
                        });
                    });
                };

                const toast = message => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            toasterMsg: message
                        });
                    });
                };

                const updateCurrentVersion = value => {
                    setCurrentVersion(value);
                    api.setCompilerParameters({
                        version: value
                    });
                };

                const modal = async (title, message, okLabel, okFn, cancelLabel, cancelFn) => {
                    await setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            modal: _objectSpread(_objectSpread({}, prevState.modal), {}, {
                                hide: false,
                                message,
                                title,
                                okLabel,
                                okFn,
                                cancelLabel,
                                cancelFn
                            })
                        });
                    });
                };

                const handleHideModal = () => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            modal: _objectSpread(_objectSpread({}, state.modal), {}, {
                                hide: true,
                                message: null
                            })
                        });
                    });
                };

                const panicMessage = message => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                        className: "fas fa-exclamation-circle remixui_panicError",
                        "aria-hidden": "true"
                    }), "The compiler returned with the following internal error: ", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), " ", /*#__PURE__*/(0, _jsxRuntime.jsxs)("b", {
                        children: [message, ".", /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "The compiler might be in a non-sane state, please be careful and do not use further compilation data to deploy to mainnet. It is heavily recommended to use another browser not affected by this issue (Firefox is known to not be affected)."]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), "Please join ", /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                        href: "https://gitter.im/ethereum/remix",
                        target: "blank",
                        children: "remix gitter channel"
                    }), " for more information."
                    ]
                });

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        id: "compileTabView",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_compilerContainer.CompilerContainer, {
                            api: api,
                            isHardhatProject: state.isHardhatProject,
                            compileTabLogic: compileTabLogic,
                            tooltip: toast,
                            modal: modal,
                            compiledFileName: currentFile,
                            updateCurrentVersion: updateCurrentVersion,
                            configurationSettings: configurationSettings
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_contractSelection.ContractSelection, {
                            api: api,
                            contractMap: contractMap,
                            contractsDetails: contractsDetails,
                            modal: modal
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "remixui_errorBlobs p-4",
                            "data-id": "compiledErrors",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                "data-id": `compilationFinishedWith_${currentVersion}`
                            }), compileErrors.error && /*#__PURE__*/(0, _jsxRuntime.jsx)(_renderer.Renderer, {
                                message: compileErrors.error.formattedMessage || compileErrors.error,
                                plugin: api,
                                opt: {
                                    type: compileErrors.error.severity || 'error',
                                    errorType: compileErrors.error.type
                                }
                            }), compileErrors.error && compileErrors.error.mode === 'panic' && modal('Error', panicMessage(compileErrors.error.formattedMessage), 'Close', null), compileErrors.errors && compileErrors.errors.length && compileErrors.errors.map((err, index) => {
                                if (hideWarnings) {
                                    if (err.severity !== 'warning') {
                                        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_renderer.Renderer, {
                                            message: err.formattedMessage,
                                            plugin: api,
                                            opt: {
                                                type: err.severity,
                                                errorType: err.type
                                            }
                                        }, index);
                                    }
                                } else {
                                    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_renderer.Renderer, {
                                        message: err.formattedMessage,
                                        plugin: api,
                                        opt: {
                                            type: err.severity,
                                            errorType: err.type
                                        }
                                    }, index);
                                }
                            })
                            ]
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_toaster.Toaster, {
                        message: state.toasterMsg
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalDialog.ModalDialog, {
                        id: "workspacesModalDialog",
                        title: state.modal.title,
                        message: state.modal.message,
                        hide: state.modal.hide,
                        okLabel: state.modal.okLabel,
                        okFn: state.modal.okFn,
                        cancelLabel: state.modal.cancelLabel,
                        cancelFn: state.modal.cancelFn,
                        handleHide: handleHideModal,
                        children: typeof state.modal.message !== 'string' && state.modal.message
                    })
                    ]
                });
            };

            exports.SolidityCompiler = SolidityCompiler;
            var _default = SolidityCompiler;
            exports.default = _default;

            /***/
        }),

        /***/ 2414:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.CompilerContainer = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _semver = _interopRequireDefault(__webpack_require__(670));

            var helper = _interopRequireWildcard(__webpack_require__(575));

            var _remixSolidity = __webpack_require__(556);

            var _compiler = __webpack_require__(2415);

            var _compiler2 = __webpack_require__(2416);

            var _reactBootstrap = __webpack_require__(860);

            __webpack_require__(832);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const _paq = window._paq = window._paq || []; //eslint-disable-line


            const CompilerContainer = props => {
                const {
                    api,
                    compileTabLogic,
                    tooltip,
                    modal,
                    compiledFileName,
                    updateCurrentVersion,
                    configurationSettings,
                    isHardhatProject
                } = props; // eslint-disable-line

                const [state, setState] = (0, _react.useState)({
                    hideWarnings: false,
                    autoCompile: false,
                    matomoAutocompileOnce: true,
                    optimize: false,
                    compileTimeout: null,
                    timeout: 300,
                    allversions: [],
                    customVersions: [],
                    selectedVersion: null,
                    defaultVersion: 'soljson-v0.8.7+commit.e28d00a7.js',
                    // this default version is defined: in makeMockCompiler (for browser test)
                    runs: '',
                    compiledFileName: '',
                    includeNightlies: false,
                    language: 'Solidity',
                    evmVersion: ''
                });
                const [disableCompileButton, setDisableCompileButton] = (0, _react.useState)(false);
                const compileIcon = (0, _react.useRef)(null);
                const promptMessageInput = (0, _react.useRef)(null);
                const [hhCompilation, sethhCompilation] = (0, _react.useState)(false);
                const [compilerContainer, dispatch] = (0, _react.useReducer)(_compiler.compilerReducer, _compiler.compilerInitialState);
                (0, _react.useEffect)(() => {
                    fetchAllVersion((allversions, selectedVersion, isURL) => {
                        setState(prevState => {
                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                allversions
                            });
                        });
                        if (isURL) {
                            _updateVersionSelector(state.defaultVersion, selectedVersion);
                        } else {
                            setState(prevState => {
                                return _objectSpread(_objectSpread({}, prevState), {}, {
                                    selectedVersion
                                });
                            });
                            updateCurrentVersion(selectedVersion);

                            _updateVersionSelector(selectedVersion);
                        }
                    });
                    const currentFileName = api.currentFile;
                    currentFile(currentFileName);
                    (0, _compiler2.listenToEvents)(compileTabLogic, api)(dispatch);
                }, []);
                (0, _react.useEffect)(() => {
                    (async () => {
                        if (compileTabLogic && compileTabLogic.compiler) {
                            const autocompile = (await api.getAppParameter('autoCompile')) || false;
                            const hideWarnings = (await api.getAppParameter('hideWarnings')) || false;
                            const includeNightlies = (await api.getAppParameter('includeNightlies')) || false;
                            setState(prevState => {
                                const params = api.getCompilerParameters();
                                const optimize = params.optimize;
                                const runs = params.runs;
                                const evmVersion = params.evmVersion;
                                const language = (0, _remixSolidity.getValidLanguage)(params.language);
                                return _objectSpread(_objectSpread({}, prevState), {}, {
                                    hideWarnings: hideWarnings,
                                    autoCompile: autocompile,
                                    includeNightlies: includeNightlies,
                                    optimize: optimize,
                                    runs: runs,
                                    evmVersion: evmVersion !== null && evmVersion !== 'null' && evmVersion !== undefined && evmVersion !== 'undefined' ? evmVersion : 'default',
                                    language: language !== null ? language : 'Solidity'
                                });
                            });
                        }
                    })();
                }, [compileTabLogic]);
                (0, _react.useEffect)(() => {
                    const isDisabled = !compiledFileName || compiledFileName && !isSolFileSelected(compiledFileName);
                    setDisableCompileButton(isDisabled);
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            compiledFileName
                        });
                    });
                }, [compiledFileName]);
                (0, _react.useEffect)(() => {
                    if (compilerContainer.compiler.mode) {
                        switch (compilerContainer.compiler.mode) {
                            case 'startingCompilation':
                                startingCompilation();
                                break;

                            case 'compilationDuration':
                                compilationDuration(compilerContainer.compiler.args[0]);
                                break;

                            case 'loadingCompiler':
                                loadingCompiler();
                                break;

                            case 'compilerLoaded':
                                compilerLoaded();
                                break;

                            case 'compilationFinished':
                                compilationFinished();
                                break;
                        }
                    }
                }, [compilerContainer.compiler.mode]);
                (0, _react.useEffect)(() => {
                    if (compilerContainer.editor.mode) {
                        switch (compilerContainer.editor.mode) {
                            case 'sessionSwitched':
                                sessionSwitched();
                                (0, _compiler2.resetEditorMode)()(dispatch);
                                break;

                            case 'contentChanged':
                                contentChanged();
                                (0, _compiler2.resetEditorMode)()(dispatch);
                                break;
                        }
                    }
                }, [compilerContainer.editor.mode]);
                (0, _react.useEffect)(() => {
                    if (configurationSettings) {
                        setConfiguration(configurationSettings);
                    }
                }, [configurationSettings]);

                const _retrieveVersion = version => {
                    if (!version) {
                        version = state.selectedVersion;
                    }
                    if (version === 'builtin') {
                        version = state.defaultVersion;
                    }
                    return _semver.default.coerce(version) ? _semver.default.coerce(version).version : '';
                }; // fetching both normal and wasm builds and creating a [version, baseUrl] map


                const fetchAllVersion = async callback => {
                    let selectedVersion, allVersionsWasm, isURL;
                    let allVersions = [
                        {
                            path: 'builtin',
                            longVersion: 'latest local version - ' + state.defaultVersion
                        }
                    ]; // fetch normal builds

                    const binRes = await (0, _remixSolidity.promisedMiniXhr)(`${_remixSolidity.baseURLBin}/list.json`); // fetch wasm builds

                    const wasmRes = await (0, _remixSolidity.promisedMiniXhr)(`${_remixSolidity.baseURLWasm}/list.json`);

                    if (binRes.event.type === 'error' && wasmRes.event.type === 'error') {
                        selectedVersion = 'builtin';
                        return callback(allVersions, selectedVersion);
                    }

                    try {
                        const versions = JSON.parse(binRes.json).builds.slice().reverse();
                        allVersions = [...allVersions, ...versions];
                        selectedVersion = state.defaultVersion;
                        if (api.getCompilerParameters().version) {
                            selectedVersion = api.getCompilerParameters().version;
                        } // Check if version is a URL and corresponding filename starts with 'soljson'

                        if (selectedVersion.startsWith('https://')) {
                            const urlArr = selectedVersion.split('/');
                            if (urlArr[urlArr.length - 1].startsWith('soljson')) {
                                isURL = true;
                            }
                        }

                        if (wasmRes.event.type !== 'error') {
                            allVersionsWasm = JSON.parse(wasmRes.json).builds.slice().reverse();
                        }
                    } catch (e) {
                        tooltip('Cannot load compiler version list. It might have been blocked by an advertisement blocker. Please try deactivating any of them from this page and reload. Error: ' + e);
                    } // replace in allVersions those compiler builds which exist in allVersionsWasm with new once


                    if (allVersionsWasm && allVersions) {
                        allVersions.forEach((compiler, index) => {
                            const wasmIndex = allVersionsWasm.findIndex(wasmCompiler => {
                                return wasmCompiler.longVersion === compiler.longVersion;
                            });

                            if (wasmIndex !== -1) {
                                allVersions[index] = allVersionsWasm[wasmIndex];
                                _remixSolidity.pathToURL[compiler.path] = _remixSolidity.baseURLWasm;
                            } else {
                                _remixSolidity.pathToURL[compiler.path] = _remixSolidity.baseURLBin;
                            }
                        });
                    }

                    callback(allVersions, selectedVersion, isURL);
                };
                /**
                 * Update the compilation button with the name of the current file
                 */


                const currentFile = (name = '') => {
                    if (name && name !== '') {
                        _setCompilerVersionFromPragma(name);
                    }

                    const compiledFileName = name.split('/').pop();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            compiledFileName
                        });
                    });
                }; // Load solc compiler version according to pragma in contract file


                const _setCompilerVersionFromPragma = filename => {
                    if (!state.allversions) {
                        return;
                    }
                    api.readFile(filename).then(data => {
                        if (!data) {
                            return;
                        }
                        const pragmaArr = data.match(/(pragma solidity (.+?);)/g);

                        if (pragmaArr && pragmaArr.length === 1) {
                            const pragmaStr = pragmaArr[0].replace('pragma solidity', '').trim();
                            const pragma = pragmaStr.substring(0, pragmaStr.length - 1);
                            const releasedVersions = state.allversions.filter(obj => !obj.prerelease).map(obj => obj.version);
                            const allVersions = state.allversions.map(obj => _retrieveVersion(obj.version));

                            const currentCompilerName = _retrieveVersion(state.selectedVersion); // contains only numbers part, for example '0.4.22'


                            const pureVersion = _retrieveVersion(); // is nightly build newer than the last release


                            const isNewestNightly = currentCompilerName.includes('nightly') && _semver.default.gt(pureVersion, releasedVersions[0]); // checking if the selected version is in the pragma range


                            const isInRange = _semver.default.satisfies(pureVersion, pragma); // checking if the selected version is from official compilers list(excluding custom versions) and in range or greater


                            const isOfficial = allVersions.includes(currentCompilerName);

                            if (isOfficial && !isInRange && !isNewestNightly) {
                                const compilerToLoad = _semver.default.maxSatisfying(releasedVersions, pragma);

                                const compilerPath = state.allversions.filter(obj => !obj.prerelease && obj.version === compilerToLoad)[0].path;

                                if (state.selectedVersion !== compilerPath) {
                                    setState(prevState => {
                                        return _objectSpread(_objectSpread({}, prevState), {}, {
                                            selectedVersion: compilerPath
                                        });
                                    });

                                    _updateVersionSelector(compilerPath);
                                }
                            }
                        }
                    });
                };

                const isSolFileSelected = (currentFile = '') => {
                    if (!currentFile) {
                        currentFile = api.currentFile;
                    }
                    if (!currentFile) {
                        return false;
                    }
                    const extention = currentFile.substr(currentFile.length - 3, currentFile.length);
                    return extention.toLowerCase() === 'sol' || extention.toLowerCase() === 'yul';
                };

                const sessionSwitched = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    scheduleCompilation();
                };

                const startingCompilation = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    compileIcon.current.setAttribute('title', 'compiling...');
                    compileIcon.current.classList.remove('remixui_bouncingIcon');
                    compileIcon.current.classList.add('remixui_spinningIcon');
                };

                const compilationDuration = speed => {
                    if (speed > 1000) {
                        console.log(`Last compilation took ${speed}ms. We suggest to turn off autocompilation.`);
                    }
                };

                const contentChanged = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    scheduleCompilation();
                    compileIcon.current.classList.add('remixui_bouncingIcon'); // @TODO: compileView tab
                };

                const loadingCompiler = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    compileIcon.current.setAttribute('title', 'compiler is loading, please wait a few moments.');
                    compileIcon.current.classList.add('remixui_spinningIcon');

                    _updateLanguageSelector();

                    setDisableCompileButton(true);
                };

                const compilerLoaded = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    compileIcon.current.setAttribute('title', '');
                    compileIcon.current.classList.remove('remixui_spinningIcon');
                    if (state.autoCompile) {
                        compile();
                    }
                    const isDisabled = !compiledFileName || compiledFileName && !isSolFileSelected(compiledFileName);
                    setDisableCompileButton(isDisabled);
                };

                const compilationFinished = () => {
                    if (!compileIcon.current) {
                        return;
                    }
                    compileIcon.current.setAttribute('title', 'idle');
                    compileIcon.current.classList.remove('remixui_spinningIcon');
                    compileIcon.current.classList.remove('remixui_bouncingIcon');

                    if (!state.autoCompile || state.autoCompile && state.matomoAutocompileOnce) {
                        _paq.push(['trackEvent', 'compiler', 'compiled_with_version', _retrieveVersion()]);

                        if (state.autoCompile && state.matomoAutocompileOnce) {
                            setState(prevState => {
                                return _objectSpread(_objectSpread({}, prevState), {}, {
                                    matomoAutocompileOnce: false
                                });
                            });
                        }
                    }
                };

                const scheduleCompilation = () => {
                    if (!state.autoCompile) {
                        return;
                    }
                    if (state.compileTimeout) {
                        window.clearTimeout(state.compileTimeout);
                    }
                    const compileTimeout = window.setTimeout(() => {
                        state.autoCompile && compile();
                    }, state.timeout);
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            compileTimeout
                        });
                    });
                };

                const compile = () => {


                    const currentFile = api.currentFile;
                    if (!isSolFileSelected()) {
                        return;
                    }

                    _setCompilerVersionFromPragma(currentFile);

                    compileTabLogic.runCompiler(hhCompilation);
                };

                const _updateVersionSelector = (version, customUrl = '') => {
                    // update selectedversion of previous one got filtered out
                    let selectedVersion = version;

                    if (!selectedVersion || !_shouldBeAdded(selectedVersion)) {
                        selectedVersion = state.defaultVersion;
                        setState(prevState => {
                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                selectedVersion
                            });
                        });
                    }

                    updateCurrentVersion(selectedVersion);
                    api.setCompilerParameters({
                        version: selectedVersion
                    });
                    let url;

                    if (customUrl !== '') {
                        selectedVersion = customUrl;
                        setState(prevState => {
                            return _objectSpread(_objectSpread({}, prevState), {}, {
                                selectedVersion,
                                customVersions: [...state.customVersions, selectedVersion]
                            });
                        });
                        updateCurrentVersion(selectedVersion);
                        url = customUrl;
                        api.setCompilerParameters({
                            version: selectedVersion
                        });
                    } else {
                        if (helper.checkSpecialChars(selectedVersion)) {
                            return console.log('loading ' + selectedVersion + ' not allowed, special chars not allowed.');
                        }

                        if (selectedVersion === 'builtin' || selectedVersion.indexOf('soljson') === 0) {
                            url = (0, _remixSolidity.urlFromVersion)(selectedVersion);
                        } else {
                            return console.log('loading ' + selectedVersion + ' not allowed, version should start with "soljson"');
                        }
                    } // Workers cannot load js on "file:"-URLs and we get a
                    // "Uncaught RangeError: Maximum call stack size exceeded" error on Chromium,
                    // resort to non-worker version in that case.


                    if (selectedVersion === 'builtin') {
                        selectedVersion = state.defaultVersion;
                    }

                    if (selectedVersion !== 'builtin' && (0, _remixSolidity.canUseWorker)(selectedVersion)) {
                        compileTabLogic.compiler.loadVersion(true, url);
                    } else {
                        compileTabLogic.compiler.loadVersion(false, url);
                    }
                };

                const _shouldBeAdded = version => {
                    return !version.includes('nightly') || version.includes('nightly') && state.includeNightlies;
                };

                const promptCompiler = () => {
                    // custom url https://solidity-blog.s3.eu-central-1.amazonaws.com/data/08preview/soljson.js
                    modal('Add a custom compiler', promptMessage('URL'), 'OK', addCustomCompiler, 'Cancel', () => {
                    });
                };

                const promptMessage = message => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            children: message
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                            type: "text",
                            "data-id": "modalDialogCustomPromptCompiler",
                            className: "form-control",
                            ref: promptMessageInput
                        })
                        ]
                    });
                };

                const addCustomCompiler = () => {
                    const url = promptMessageInput.current.value;
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            selectedVersion: url
                        });
                    });

                    _updateVersionSelector(state.defaultVersion, url);
                };

                const handleLoadVersion = value => {
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            selectedVersion: value,
                            matomoAutocompileOnce: true
                        });
                    });
                    updateCurrentVersion(value);

                    _updateVersionSelector(value);

                    _updateLanguageSelector();
                };

                const _updateLanguageSelector = () => {
                    // This is the first version when Yul is available
                    if (!_semver.default.valid(_retrieveVersion()) || _semver.default.lt(_retrieveVersion(), 'v0.5.7+commit.6da8b019.js')) {
                        handleLanguageChange('Solidity');
                        compileTabLogic.setLanguage('Solidity');
                    }
                };

                const handleAutoCompile = e => {
                    const checked = e.target.checked;
                    api.setAppParameter('autoCompile', checked);
                    checked && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            autoCompile: checked,
                            matomoAutocompileOnce: state.matomoAutocompileOnce || checked
                        });
                    });
                };

                const handleOptimizeChange = value => {
                    const checked = !!value;
                    api.setAppParameter('optimize', checked);
                    compileTabLogic.setOptimize(checked);

                    if (compileTabLogic.optimize) {
                        compileTabLogic.setRuns(parseInt(state.runs));
                    } else {
                        compileTabLogic.setRuns(200);
                    }

                    state.autoCompile && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            optimize: checked
                        });
                    });
                };

                const onChangeRuns = value => {
                    const runs = value;
                    compileTabLogic.setRuns(parseInt(runs));
                    state.autoCompile && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            runs
                        });
                    });
                };

                const handleHideWarningsChange = e => {
                    const checked = e.target.checked;
                    api.setAppParameter('hideWarnings', checked);
                    state.autoCompile && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            hideWarnings: checked
                        });
                    });
                };

                const handleNightliesChange = e => {
                    const checked = e.target.checked;
                    if (!checked) {
                        handleLoadVersion(state.defaultVersion);
                    }
                    api.setAppParameter('includeNightlies', checked);
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            includeNightlies: checked
                        });
                    });
                };

                const handleLanguageChange = value => {
                    compileTabLogic.setLanguage(value);
                    state.autoCompile && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            language: value
                        });
                    });
                };

                const handleEvmVersionChange = value => {
                    if (!value) {
                        return;
                    }
                    let v = value;

                    if (v === 'default') {
                        v = null;
                    }

                    compileTabLogic.setEvmVersion(v);
                    state.autoCompile && compile();
                    setState(prevState => {
                        return _objectSpread(_objectSpread({}, prevState), {}, {
                            evmVersion: value
                        });
                    });
                };

                const updatehhCompilation = event => {
                    const checked = event.target.checked;
                    sethhCompilation(checked);
                    api.setAppParameter('hardhat-compilation', checked);
                };
                /*
    The following functions map with the above event handlers.
    They are an external API for modifying the compiler configuration.
  */


                const setConfiguration = settings => {
                    handleLoadVersion(`soljson-v${settings.version}.js`);
                    handleEvmVersionChange(settings.evmVersion);
                    handleLanguageChange(settings.language);
                    handleOptimizeChange(settings.optimize);
                    onChangeRuns(settings.runs);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsx)("section", {
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("article", {
                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("header", {
                            className: "remixui_compilerSection border-bottom",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mb-2",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: "remixui_compilerLabel form-check-label",
                                    htmlFor: "versionSelector",
                                    children: [
                                        "Compiler", /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                            className: "far fa-plus-square border-0 p-0 mx-2 btn-sm",
                                            onClick: promptCompiler,
                                            title: "Add a custom compiler with URL"
                                        })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
                                    value: state.selectedVersion || state.defaultVersion,
                                    onChange: e => handleLoadVersion(e.target.value),
                                    className: "custom-select",
                                    id: "versionSelector",
                                    disabled: state.allversions.length <= 0,
                                    children: [
                                        state.allversions.length <= 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                            disabled: true,
                                            "data-id": state.selectedVersion === state.defaultVersion ? 'selected' : '',
                                            children: state.defaultVersion
                                        }), state.allversions.length <= 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                            disabled: true,
                                            "data-id": state.selectedVersion === 'builtin' ? 'selected' : '',
                                            children: "builtin"
                                        }), state.customVersions.map((url, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                            "data-id": state.selectedVersion === url ? 'selected' : '',
                                            value: url,
                                            children: "custom"
                                        }, i)), state.allversions.map((build, i) => {
                                            return _shouldBeAdded(build.longVersion) ? /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                                value: build.path,
                                                "data-id": state.selectedVersion === build.path ? 'selected' : '',
                                                children: build.longVersion
                                            }, i) : null;
                                        })
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mb-2 remixui_nightlyBuilds custom-control custom-checkbox",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "mr-2 custom-control-input",
                                    id: "nightlies",
                                    type: "checkbox",
                                    onChange: handleNightliesChange,
                                    checked: state.includeNightlies
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    htmlFor: "nightlies",
                                    "data-id": "compilerNightliesBuild",
                                    className: "form-check-label custom-control-label",
                                    children: "Include nightly builds"
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mb-2",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "remixui_compilerLabel form-check-label",
                                    htmlFor: "compilierLanguageSelector",
                                    children: "Language"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
                                    onChange: e => handleLanguageChange(e.target.value),
                                    value: state.language,
                                    className: "custom-select",
                                    id: "compilierLanguageSelector",
                                    title: "Available since v0.5.7",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.language === 'Solidity' ? 'selected' : '',
                                        value: "Solidity",
                                        children: "Solidity"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.language === 'Yul' ? 'selected' : '',
                                        value: "Yul",
                                        children: "Yul"
                                    })
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mb-2",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "remixui_compilerLabel form-check-label",
                                    htmlFor: "evmVersionSelector",
                                    children: "EVM Version"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
                                    value: state.evmVersion,
                                    onChange: e => handleEvmVersionChange(e.target.value),
                                    className: "custom-select",
                                    id: "evmVersionSelector",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'default' ? 'selected' : '',
                                        value: "default",
                                        children: "compiler default"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'london' ? 'selected' : '',
                                        value: "london",
                                        children: "london"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'berlin' ? 'selected' : '',
                                        value: "berlin",
                                        children: "berlin"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'istanbul' ? 'selected' : '',
                                        value: "istanbul",
                                        children: "istanbul"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'petersburg' ? 'selected' : '',
                                        value: "petersburg",
                                        children: "petersburg"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'constantinople' ? 'selected' : '',
                                        value: "constantinople",
                                        children: "constantinople"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'byzantium' ? 'selected' : '',
                                        value: "byzantium",
                                        children: "byzantium"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'spuriousDragon' ? 'selected' : '',
                                        value: "spuriousDragon",
                                        children: "spuriousDragon"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'tangerineWhistle' ? 'selected' : '',
                                        value: "tangerineWhistle",
                                        children: "tangerineWhistle"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                                        "data-id": state.evmVersion === 'homestead' ? 'selected' : '',
                                        value: "homestead",
                                        children: "homestead"
                                    })
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mt-3",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                                    className: "mt-2 remixui_compilerLabel",
                                    children: "Compiler Configuration"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "mt-2 remixui_compilerConfig custom-control custom-checkbox",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "remixui_autocompile custom-control-input",
                                        type: "checkbox",
                                        onChange: handleAutoCompile,
                                        "data-id": "compilerContainerAutoCompile",
                                        id: "autoCompile",
                                        title: "Auto compile",
                                        checked: state.autoCompile
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label custom-control-label",
                                        htmlFor: "autoCompile",
                                        children: "Auto compile"
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "mt-2 remixui_compilerConfig custom-control custom-checkbox",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                        className: "justify-content-between align-items-center d-flex",
                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                            onChange: e => {
                                                handleOptimizeChange(e.target.checked);
                                            },
                                            className: "custom-control-input",
                                            id: "optimize",
                                            type: "checkbox",
                                            checked: state.optimize
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                            className: "form-check-label custom-control-label",
                                            htmlFor: "optimize",
                                            children: "Enable optimization"
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                            min: "1",
                                            className: "custom-select ml-2 remixui_runs",
                                            id: "runs",
                                            placeholder: "200",
                                            value: state.runs,
                                            type: "number",
                                            title: "Estimated number of times each opcode of the deployed code will be executed across the life-time of the contract.",
                                            onChange: e => onChangeRuns(e.target.value),
                                            disabled: !state.optimize
                                        })
                                        ]
                                    })
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "mt-2 remixui_compilerConfig custom-control custom-checkbox",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "remixui_autocompile custom-control-input",
                                        onChange: handleHideWarningsChange,
                                        id: "hideWarningsBox",
                                        type: "checkbox",
                                        title: "Hide warnings",
                                        checked: state.hideWarnings
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "form-check-label custom-control-label",
                                        htmlFor: "hideWarningsBox",
                                        children: "Hide warnings"
                                    })
                                    ]
                                })
                                ]
                            }), isHardhatProject && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mt-3 remixui_compilerConfig custom-control custom-checkbox",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    className: "remixui_autocompile custom-control-input",
                                    onChange: updatehhCompilation,
                                    id: "enableHardhat",
                                    type: "checkbox",
                                    title: "Enable Hardhat Compilation",
                                    checked: hhCompilation
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "form-check-label custom-control-label",
                                    htmlFor: "enableHardhat",
                                    children: "Enable Hardhat Compilation"
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                    className: "mt-1 text-nowrap",
                                    href: "https://remix-ide.readthedocs.io/en/latest/hardhat.html#enable-hardhat-compilation",
                                    target: '_blank',
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.OverlayTrigger, {
                                        placement: 'right',
                                        overlay: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.Tooltip, {
                                            className: "text-nowrap",
                                            id: "overlay-tooltip",
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                                className: "p-1 pr-3",
                                                style: {
                                                    backgroundColor: 'black',
                                                    minWidth: '230px'
                                                },
                                                children: "Learn how to use Hardhat Compilation"
                                            })
                                        }),
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                            style: {
                                                fontSize: 'medium'
                                            },
                                            className: 'ml-2 fal fa-info-circle',
                                            "aria-hidden": "true"
                                        })
                                    })
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                id: "compileBtn",
                                "data-id": "compilerContainerCompileBtn",
                                className: "btn btn-primary btn-block remixui_disabled mt-3",
                                title: "Compile",
                                onClick: compile,
                                disabled: disableCompileButton,
                                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        ref: compileIcon,
                                        className: "fas fa-sync remixui_iconbtn",
                                        "aria-hidden": "true"
                                    }), "Compile ", typeof state.compiledFileName === 'string' ? helper.extractNameFromKey(state.compiledFileName) || '<no file selected>' : '<no file selected>'
                                    ]
                                })
                            })
                            ]
                        })
                    })
                });
            };

            exports.CompilerContainer = CompilerContainer;
            var _default = CompilerContainer;
            exports.default = _default;

            /***/
        }),

        /***/ 2415:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compilerReducer = exports.compilerInitialState = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const compilerInitialState = {
                compiler: {
                    mode: '',
                    args: null
                },
                editor: {
                    mode: ''
                }
            };
            exports.compilerInitialState = compilerInitialState;

            const compilerReducer = (state = compilerInitialState, action) => {
                switch (action.type) {
                    case 'SET_COMPILER_MODE': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            compiler: _objectSpread(_objectSpread({}, state.compiler), {}, {
                                mode: action.payload.mode,
                                args: action.payload.args || null
                            })
                        });
                    }

                    case 'RESET_COMPILER_MODE': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            compiler: _objectSpread(_objectSpread({}, state.compiler), {}, {
                                mode: '',
                                args: null
                            })
                        });
                    }

                    case 'SET_EDITOR_MODE': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            editor: _objectSpread(_objectSpread({}, state.editor), {}, {
                                mode: action.payload
                            })
                        });
                    }

                    case 'RESET_EDITOR_MODE': {
                        return _objectSpread(_objectSpread({}, state), {}, {
                            editor: _objectSpread(_objectSpread({}, state.editor), {}, {
                                mode: ''
                            })
                        });
                    }

                    default:
                        throw new Error();
                }
            };

            exports.compilerReducer = compilerReducer;

            /***/
        }),

        /***/ 2416:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.setEditorMode = exports.setCompilerMode = exports.resetEditorMode = exports.resetCompilerMode = exports.listenToEvents = void 0;

            const setEditorMode = mode => {
                return {
                    type: 'SET_EDITOR_MODE',
                    payload: mode
                };
            };

            exports.setEditorMode = setEditorMode;

            const resetEditorMode = () => dispatch => {
                dispatch({
                    type: 'RESET_EDITOR_MODE'
                });
            };

            exports.resetEditorMode = resetEditorMode;

            const setCompilerMode = (mode, ...args) => {
                return {
                    type: 'SET_COMPILER_MODE',
                    payload: {
                        mode,
                        args
                    }
                };
            };

            exports.setCompilerMode = setCompilerMode;

            const resetCompilerMode = () => dispatch => {
                dispatch({
                    type: 'RESET_COMPILER_MODE'
                });
            };

            exports.resetCompilerMode = resetCompilerMode;

            const listenToEvents = (compileTabLogic, api) => dispatch => {
                api.onSessionSwitched = () => {
                    dispatch(setEditorMode('sessionSwitched'));
                };

                compileTabLogic.event.on('startingCompilation', () => {
                    dispatch(setCompilerMode('startingCompilation'));
                });
                compileTabLogic.compiler.event.register('compilationDuration', speed => {
                    dispatch(setCompilerMode('compilationDuration', speed));
                });

                api.onContentChanged = () => {
                    dispatch(setEditorMode('contentChanged'));
                };

                compileTabLogic.compiler.event.register('loadingCompiler', () => {
                    dispatch(setCompilerMode('loadingCompiler'));
                });
                compileTabLogic.compiler.event.register('compilerLoaded', () => {
                    dispatch(setCompilerMode('compilerLoaded'));
                });
                compileTabLogic.compiler.event.register('compilationFinished', (success, data, source) => {
                    dispatch(setCompilerMode('compilationFinished', success, data, source));
                });
            };

            exports.listenToEvents = listenToEvents;

            /***/
        }),

        /***/ 2417:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".remixui_title {\n  font-size: 1.1em;\n  font-weight: bold;\n  margin-bottom: 1em;\n}\n.remixui_panicError {\n  color: red;\n  font-size: 20px;\n}\n.remixui_crow {\n  display: flex;\n  overflow: auto;\n  clear: both;\n  padding: .2em;\n}\n.remixui_checkboxText {\n  font-weight: normal;\n}\n.remixui_crow label {\n  cursor:pointer;\n}\n.remixui_crowNoFlex {\n  overflow: auto;\n  clear: both;\n}\n.remixui_info {\n  padding: 10px;\n  word-break: break-word;\n}\n.remixui_contract {\n  display: block;\n  margin: 3% 0;\n}\n.remixui_nightlyBuilds {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n.remixui_autocompileContainer {\n  display: flex;\n  align-items: center;\n}\n.remixui_runs {\n  width: 40%;\n}\n.remixui_hideWarningsContainer {\n  display: flex;\n  align-items: center;\n}\n.remixui_autocompile {}\n.remixui_autocompileTitle {\n  font-weight: bold;\n  margin: 1% 0;\n}\n.remixui_autocompileText {\n  margin: 1% 0;\n  font-size: 12px;\n  overflow: hidden;\n  word-break: normal;\n  line-height: initial;\n}\n.remixui_warnCompilationSlow {\n  margin-left: 1%;\n}\n.remixui_compilerConfig {\n  display: flex;\n  align-items: center;\n}\n.remixui_compilerConfig label {\n  margin: 0;\n}\n.remixui_compilerSection {\n  padding: 12px 24px 16px;\n}\n.remixui_compilerLabel {\n  margin-bottom: 2px;\n  font-size: 11px;\n  line-height: 12px;\n  text-transform: uppercase;\n}\n.remixui_copyButton {\n  padding: 6px;\n  font-weight: bold;\n  font-size: 11px;\n  line-height: 15px;\n}\n.remixui_name {\n  display: flex;\n}\n.remixui_size {\n  display: flex;\n}\n.remixui_checkboxes {\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n.remixui_compileButton {\n  width: 100%;\n  margin: 15px 0 10px 0;\n  font-size: 12px;\n}\n.remixui_container {\n  margin: 0;\n}\n.remixui_optimizeContainer {\n  display: flex;\n}\n.remixui_noContractAlert {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.remixui_contractHelperButtons {\n  margin-top: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  float: right;\n}\n.remixui_copyToClipboard {\n  font-size: 1rem;\n}\n.remixui_copyIcon {\n  margin-right: 5px;\n}\n.remixui_log {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5%;\n  overflow: visible;\n}\n.remixui_key {\n  margin-right: 5px;\n  text-transform: uppercase;\n  width: 100%;\n}\n.remixui_value {\n  display: flex;\n  width: 100%;\n  margin-top: 1.5%;\n}\n.remixui_questionMark {\n  margin-left: 2%;\n  cursor: pointer;\n}\n.remixui_questionMark:hover {\n}\n.remixui_detailsJSON {\n  padding: 8px 0;\n  border: none;\n}\n.remixui_iconbtn {\n  margin-right: 0.3em;\n}\n.remixui_errorBlobs {\n  padding-left: 5px;\n  padding-right: 5px;\n  word-break: break-word;\n}\n.remixui_storageLogo {\n  width: 20px;\n  height: 20px;\n}\n.remixui_spinningIcon {\n  display: inline-block;\n  position: relative;\n  animation: spin 2s infinite linear;\n  -moz-animation: spin 2s infinite linear;\n  -o-animation: spin 2s infinite linear;\n  -webkit-animation: spin 2s infinite linear;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n@-webkit-keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n.remixui_bouncingIcon {\n  display: inline-block;\n  position: relative;\n  -webkit-animation: bounce 2s infinite linear;\n  animation: bounce 2s infinite linear;\n}\n@-webkit-keyframes bounce {\n    0% { top: 0; }\n    50% { top: -0.2em; }\n    70% { top: -0.3em; }\n    100% { top: 0; }\n}\n@keyframes bounce {\n    0% { top: 0; }\n    50% { top: -0.2em; }\n    70% { top: -0.3em; }\n    100% { top: 0; }\n}\n\n/*# sourceMappingURL=data:application/json;base64, */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 2418:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.ContractSelection = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _publishToStorage = __webpack_require__(988);

            var _treeView = __webpack_require__(599);

            var _clipboard = __webpack_require__(574);

            __webpack_require__(832);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            const ContractSelection = props => {
                const {
                    api,
                    contractMap,
                    contractsDetails,
                    modal
                } = props;
                const [contractList, setContractList] = (0, _react.useState)([]);
                const [selectedContract, setSelectedContract] = (0, _react.useState)('');
                const [storage, setStorage] = (0, _react.useState)(null);
                (0, _react.useEffect)(() => {
                    const contractList = contractMap ? Object.keys(contractMap).map(key => ({
                        name: key,
                        file: getFileName(contractMap[key].file)
                    })) : [];
                    setContractList(contractList);
                    if (contractList.length) {
                        setSelectedContract(contractList[0].name);
                    }
                }, [contractMap, contractsDetails]);

                const resetStorage = () => {
                    setStorage('');
                }; // Return the file name of a path: ex "browser/ballot.sol" -> "ballot.sol"


                const getFileName = path => {
                    const part = path.split('/');
                    return part[part.length - 1];
                };

                const handleContractChange = contractName => {
                    setSelectedContract(contractName);
                };

                const handlePublishToStorage = type => {
                    setStorage(type);
                };

                const copyABI = () => {
                    return copyContractProperty('abi');
                };

                const copyContractProperty = property => {
                    let content = getContractProperty(property);

                    if (!content) {
                        return;
                    }

                    try {
                        if (typeof content !== 'string') {
                            content = JSON.stringify(content, null, '\t');
                        }
                    } catch (e) {
                    }

                    return content;
                };

                const getContractProperty = property => {
                    if (!selectedContract) {
                        throw new Error('No contract compiled yet');
                    }
                    const contractProperties = contractsDetails[selectedContract];
                    if (contractProperties && contractProperties[property]) {
                        return contractProperties[property];
                    }
                    return null;
                };

                const renderData = (item, key, keyPath) => {
                    const data = extractData(item);
                    const children = (data.children || []).map(child => renderData(child.value, child.key, keyPath + '/' + child.key));

                    if (children && children.length > 0) {
                        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                            id: `treeViewItem${key}`,
                            label: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex mt-2 flex-row remixui_label_item",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: "small font-weight-bold pr-1 remixui_label_key",
                                    children: [key, ":"]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "m-0 remixui_label_value",
                                    children: typeof data.self === 'boolean' ? `${data.self}` : data.self
                                })
                                ]
                            }),
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                id: `treeView${key}`,
                                children: children
                            }, keyPath)
                        }, keyPath);
                    } else {
                        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                            id: key.toString(),
                            label: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "d-flex mt-2 flex-row remixui_label_item",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: "small font-weight-bold pr-1 remixui_label_key",
                                    children: [key, ":"]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: "m-0 remixui_label_value",
                                    children: typeof data.self === 'boolean' ? `${data.self}` : data.self
                                })
                                ]
                            })
                        }, keyPath);
                    }
                };

                const extractData = item => {
                    const ret = {
                        children: null,
                        self: null
                    };

                    if (item instanceof Array) {
                        ret.children = item.map((item, index) => ({
                            key: index,
                            value: item
                        }));
                        ret.self = '';
                    } else if (item instanceof Object) {
                        ret.children = Object.keys(item).map(key => ({
                            key: key,
                            value: item[key]
                        }));
                        ret.self = '';
                    } else {
                        ret.self = item;
                        ret.children = [];
                    }

                    return ret;
                };

                const insertValue = (details, propertyName) => {
                    let node;

                    if (propertyName === 'web3Deploy' || propertyName === 'name' || propertyName === 'Assembly') {
                        node = /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                            children: details[propertyName]
                        });
                    } else if (details[propertyName] && (propertyName === 'abi' || propertyName === 'metadata')) {
                        if (details[propertyName] !== '') {
                            try {
                                node = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    children: typeof details[propertyName] === 'object' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                        id: "treeView",
                                        children: Object.keys(details[propertyName]).map(innerkey => renderData(details[propertyName][innerkey], innerkey, innerkey))
                                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                        id: "treeView",
                                        children: Object.keys(JSON.parse(details[propertyName])).map(innerkey => renderData(JSON.parse(details[propertyName])[innerkey], innerkey, innerkey))
                                    })
                                }); // catch in case the parsing fails.
                            } catch (e) {
                                node = /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    children: ["Unable to display \"$", propertyName, "\": $", e.message]
                                });
                            }
                        } else {
                            node = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                children: " - "
                            });
                        }
                    } else {
                        node = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            children: JSON.stringify(details[propertyName], null, 4)
                        });
                    }

                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                        className: "remixui_value",
                        children: node || ''
                    });
                };

                const details = () => {
                    if (!selectedContract) {
                        throw new Error('No contract compiled yet');
                    }
                    const help = {
                        Assembly: 'Assembly opcodes describing the contract including corresponding solidity source code',
                        Opcodes: 'Assembly opcodes describing the contract',
                        'Runtime Bytecode': 'Bytecode storing the state and being executed during normal contract call',
                        bytecode: 'Bytecode being executed during contract creation',
                        functionHashes: 'List of declared function and their corresponding hash',
                        gasEstimates: 'Gas estimation for each function call',
                        metadata: 'Contains all informations related to the compilation',
                        metadataHash: 'Hash representing all metadata information',
                        abi: 'ABI: describing all the functions (input/output params, scope, ...)',
                        name: 'Name of the compiled contract',
                        swarmLocation: 'Swarm url where all metadata information can be found (contract needs to be published first)',
                        web3Deploy: 'Copy/paste this code to any JavaScript/Web3 console to deploy this contract'
                    };
                    const contractProperties = contractsDetails[selectedContract] || {};
                    const log = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "remixui_detailsJSON",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                            children: Object.keys(contractProperties).map((propertyName, index) => {
                                const copyDetails = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    className: "remixui_copyDetails",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                        content: contractProperties[propertyName],
                                        direction: "top"
                                    })
                                });
                                const questionMark = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    className: "remixui_questionMark",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        title: help[propertyName],
                                        className: "fas fa-question-circle",
                                        "aria-hidden": "true"
                                    })
                                });
                                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                    className: "remixui_log",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeViewItem, {
                                        label: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                            "data-id": `remixui_treeviewitem_${propertyName}`,
                                            className: "remixui_key",
                                            children: [propertyName, " ", copyDetails, " ", questionMark]
                                        }),
                                        children: insertValue(contractProperties, propertyName)
                                    })
                                }, index);
                            })
                        })
                    });
                    modal(selectedContract, log, 'Close', null);
                };

                const copyBytecode = () => {
                    return copyContractProperty('bytecode');
                };

                return (
                    /*#__PURE__*/
                    // define swarm logo
                    (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                        children: [
                            contractList.length ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("section", {
                                className: "remixui_compilerSection pt-3",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "mb-3",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        className: "remixui_compilerLabel form-check-label",
                                        htmlFor: "compiledContracts",
                                        children: "Contract"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
                                        onChange: e => handleContractChange(e.target.value),
                                        value: selectedContract,
                                        "data-id": "compiledContracts",
                                        id: "compiledContracts",
                                        className: "custom-select",
                                        children: contractList.map(({
                                                                        name,
                                                                        file
                                                                    }, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("option", {
                                            value: name,
                                            children: [name, " (", file, ")"]
                                        }, index))
                                    })
                                    ]
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("article", {
                                    className: "mt-2 pb-0",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                                        id: "publishOnIpfs",
                                        className: "btn btn-secondary btn-block",
                                        title: "Publish on Ipfs",
                                        onClick: () => {
                                            handlePublishToStorage('ipfs');
                                        },
                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                            children: "Publish on Ipfs"
                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                                            id: "ipfsLogo",
                                            className: "remixui_storageLogo ml-2",
                                            src: "assets/img/ipfs.webp"
                                        })
                                        ]
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                        "data-id": "compilation-details",
                                        className: "btn btn-secondary btn-block",
                                        title: "Display Contract Details",
                                        onClick: () => {
                                            details();
                                        },
                                        children: "Compilation Details"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "remixui_contractHelperButtons",
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                            className: "input-group",
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                                className: "btn-group",
                                                role: "group",
                                                "aria-label": "Copy to Clipboard",
                                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                                    title: "Copy ABI to clipboard",
                                                    content: copyABI(),
                                                    direction: "top",
                                                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                                                        className: "btn remixui_copyButton",
                                                        title: "Copy ABI to clipboard",
                                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                            className: "remixui_copyIcon far fa-copy",
                                                            "aria-hidden": "true"
                                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                                            children: "ABI"
                                                        })
                                                        ]
                                                    })
                                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                                    title: "Copy ABI to clipboard",
                                                    content: copyBytecode(),
                                                    direction: "top",
                                                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                                                        className: "btn remixui_copyButton",
                                                        title: "Copy Bytecode to clipboard",
                                                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                                            className: "remixui_copyIcon far fa-copy",
                                                            "aria-hidden": "true"
                                                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                                            children: "Bytecode"
                                                        })
                                                        ]
                                                    })
                                                })
                                                ]
                                            })
                                        })
                                    })
                                    ]
                                })
                                ]
                            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("section", {
                                className: "remixui_container clearfix",
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("article", {
                                    className: "px-2 mt-2 pb-0 d-flex w-100",
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        className: "mt-2 mx-3 w-100 alert alert-warning",
                                        role: "alert",
                                        children: "No Contract Compiled Yet"
                                    })
                                })
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_publishToStorage.PublishToStorage, {
                                api: api,
                                storage: storage,
                                contract: contractsDetails[selectedContract],
                                resetStorage: resetStorage
                            })
                        ]
                    })
                );
            };

            exports.ContractSelection = ContractSelection;
            var _default = ContractSelection;
            exports.default = _default;

            /***/
        }),

        /***/ 2419:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Renderer = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(2420);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            //eslint-disable-line
            const Renderer = ({
                                  message,
                                  opt: _opt = {},
                                  plugin
                              }) => {
                const [messageText, setMessageText] = (0, _react.useState)(null);
                const [editorOptions, setEditorOptions] = (0, _react.useState)({
                    useSpan: false,
                    type: '',
                    errFile: ''
                });
                const [classList] = (0, _react.useState)(_opt.type === 'error' ? 'alert alert-danger' : 'alert alert-warning');
                const [close, setClose] = (0, _react.useState)(false);
                (0, _react.useEffect)(() => {
                    if (!message) {
                        return;
                    }
                    let text;

                    if (typeof message === 'string') {
                        text = message;
                    } else if (message.innerText) {
                        text = message.innerText;
                    } // ^ e.g:
                    // browser/gm.sol: Warning: Source file does not specify required compiler version! Consider adding "pragma solidity ^0.6.12
                    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.2.0/contracts/introspection/IERC1820Registry.sol:3:1: ParserError: Source file requires different compiler version (current compiler is 0.7.4+commit.3f05b770.Emscripten.clang) - note that nightly builds are considered to be strictly less than the released version


                    const positionDetails = getPositionDetails(text);
                    _opt.errLine = positionDetails.errLine;
                    _opt.errCol = positionDetails.errCol;
                    _opt.errFile = positionDetails.errFile ? positionDetails.errFile.trim() : '';

                    if (!_opt.noAnnotations && _opt.errFile && _opt.errFile !== '') {
                        addAnnotation(_opt.errFile, {
                            row: _opt.errLine,
                            column: _opt.errCol,
                            text: text,
                            type: _opt.type
                        });
                    }

                    setMessageText(text);
                    setEditorOptions(_opt);
                    setClose(false);
                }, [message, _opt]);

                const getPositionDetails = msg => {
                    const result = {}; // To handle some compiler warning without location like SPDX license warning etc

                    if (!msg.includes(':')) {
                        return {
                            errLine: -1,
                            errCol: -1,
                            errFile: ''
                        };
                    }
                    if (msg.includes('-->')) {
                        msg = msg.split('-->')[1].trim();
                    } // extract line / column

                    let pos = msg.match(/^(.*?):([0-9]*?):([0-9]*?)?/);
                    result.errLine = pos ? parseInt(pos[2]) - 1 : -1;
                    result.errCol = pos ? parseInt(pos[3]) : -1; // extract file

                    pos = msg.match(/^(https:.*?|http:.*?|.*?):/);
                    result.errFile = pos ? pos[1] : msg;
                    return result;
                };

                const addAnnotation = async (file, error) => {
                    if (file === (await plugin.call('config', 'getAppParameter', 'currentFile'))) {
                        await plugin.call('editor', 'addAnnotation', error, file);
                    }
                };

                const handleErrorClick = opt => {
                    if (opt.click) {
                        opt.click(message);
                    } else if (opt.errFile !== undefined && opt.errLine !== undefined && opt.errCol !== undefined) {
                        _errorClick(opt.errFile, opt.errLine, opt.errCol);
                    }
                };

                const handleClose = () => {
                    setClose(true);
                };

                const _errorClick = async (errFile, errLine, errCol) => {
                    if (errFile !== (await plugin.call('config', 'getAppParameter', 'currentFile'))) {
                        // TODO: refactor with this._components.contextView.jumpTo
                        if (await plugin.call('fileManager', 'exists', errFile)) {
                            await plugin.call('fileManager', 'open', errFile);
                            await plugin.call('editor', 'gotoLine', errLine, errCol);
                        }
                    } else {
                        await plugin.call('editor', 'gotoLine', errLine, errCol);
                    }
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
                    children: messageText && !close && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: `remixui_sol ${editorOptions.type} ${classList}`,
                        "data-id": editorOptions.errFile,
                        onClick: () => handleErrorClick(editorOptions),
                        children: [
                            editorOptions.useSpan ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                children: [" ", messageText, " "]
                            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    children: messageText
                                })
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "close",
                                "data-id": "renderer",
                                onClick: handleClose,
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                    className: "fas fa-times"
                                })
                            })
                        ]
                    })
                });
            };

            exports.Renderer = Renderer;

            /***/
        }),

        /***/ 2420:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(2421);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 2421:
        /***/ (function (module, exports) {

            module.exports = [
                [
                    module.i, ".remixui_sol.success,\n.remixui_sol.error,\n.remixui_sol.warning {\n    white-space: pre-line;\n    word-wrap: break-word;\n    cursor: pointer;\n    position: relative;\n    margin: 0.5em 0 1em 0;\n    border-radius: 5px;\n    line-height: 20px;\n    padding: 8px 15px;\n}\n\n.remixui_sol.success pre,\n.remixui_sol.error pre,\n.remixui_sol.warning pre {\n    white-space: pre-line;\n    overflow-y: hidden;\n    background-color: transparent;\n    margin: 0;\n    font-size: 12px;\n    border: 0 none;\n    padding: 0;\n    border-radius: 0;\n}\n\n.remixui_sol.success .close,\n.remixui_sol.error .close,\n.remixui_sol.warning .close {\n    visibility: hidden;\n    white-space: pre-line;\n    font-weight: bold;\n    position: absolute;\n    color: hsl(0, 0%, 0%); /* black in style-guide.js */\n    top: 0;\n    right: 0;\n    padding: 0.5em;\n}\n\n.remixui_sol.error {\n}\n\n.remixui_sol.warning {\n}\n\n.remixui_sol.success {\n  /* background-color:  // styles.rightPanel.message_Success_BackgroundColor; */\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlcmVyLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0lBR0kscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFFQTs7O0lBR0kscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQiw2QkFBNkI7SUFDN0IsU0FBUztJQUNULGVBQWU7SUFDZixjQUFjO0lBQ2QsVUFBVTtJQUNWLGdCQUFnQjtBQUNwQjs7QUFFQTs7O0lBR0ksa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHFCQUFxQixFQUFFLDRCQUE0QjtJQUNuRCxNQUFNO0lBQ04sUUFBUTtJQUNSLGNBQWM7QUFDbEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0VBQ0UsNkVBQTZFO0FBQy9FIiwiZmlsZSI6InJlbmRlcmVyLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yZW1peHVpX3NvbC5zdWNjZXNzLFxuLnJlbWl4dWlfc29sLmVycm9yLFxuLnJlbWl4dWlfc29sLndhcm5pbmcge1xuICAgIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAuNWVtIDAgMWVtIDA7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIHBhZGRpbmc6IDhweCAxNXB4O1xufVxuXG4ucmVtaXh1aV9zb2wuc3VjY2VzcyBwcmUsXG4ucmVtaXh1aV9zb2wuZXJyb3IgcHJlLFxuLnJlbWl4dWlfc29sLndhcm5pbmcgcHJlIHtcbiAgICB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIG1hcmdpbjogMDtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgYm9yZGVyOiAwIG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xufVxuXG4ucmVtaXh1aV9zb2wuc3VjY2VzcyAuY2xvc2UsXG4ucmVtaXh1aV9zb2wuZXJyb3IgLmNsb3NlLFxuLnJlbWl4dWlfc29sLndhcm5pbmcgLmNsb3NlIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IHByZS1saW5lO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBjb2xvcjogaHNsKDAsIDAlLCAwJSk7IC8qIGJsYWNrIGluIHN0eWxlLWd1aWRlLmpzICovXG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHBhZGRpbmc6IDAuNWVtO1xufVxuXG4ucmVtaXh1aV9zb2wuZXJyb3Ige1xufVxuXG4ucmVtaXh1aV9zb2wud2FybmluZyB7XG59XG5cbi5yZW1peHVpX3NvbC5zdWNjZXNzIHtcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogIC8vIHN0eWxlcy5yaWdodFBhbmVsLm1lc3NhZ2VfU3VjY2Vzc19CYWNrZ3JvdW5kQ29sb3I7ICovXG59XG4iXX0= */", '', ''
                ]
            ]

            /***/
        }),

        /***/ 2422:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _compileTabLogic = __webpack_require__(2423);

            Object.keys(_compileTabLogic).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _compileTabLogic[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _compileTabLogic[key];
                    }
                });
            });

            var _contractParser = __webpack_require__(2424);

            Object.keys(_contractParser).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _contractParser[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _contractParser[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2423:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompileTabLogic = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _remixSolidity = __webpack_require__(556);

            const Compiler = __webpack_require__(556).Compiler;

            const EventEmitter = __webpack_require__(510);

            const _paq = window._paq = window._paq || []; //eslint-disable-line


            class CompileTabLogic {
                constructor(api, contentImport) {
                    this.api = api;
                    this.contentImport = contentImport;
                    (0, _defineProperty2.default)(this, "compiler", void 0);
                    (0, _defineProperty2.default)(this, "optimize", void 0);
                    (0, _defineProperty2.default)(this, "runs", void 0);
                    (0, _defineProperty2.default)(this, "evmVersion", void 0);
                    (0, _defineProperty2.default)(this, "language", void 0);
                    (0, _defineProperty2.default)(this, "compilerImport", void 0);
                    (0, _defineProperty2.default)(this, "event", void 0);
                    this.event = new EventEmitter();
                    this.compiler = new Compiler((url, cb) => api.resolveContentAndSave(url).then(result => cb(null, result)).catch(error => cb(error.message)));
                }

                init() {
                    this.optimize = this.api.getCompilerParameters().optimize;
                    this.api.setCompilerParameters({
                        optimize: this.optimize
                    });
                    this.compiler.set('optimize', this.optimize);
                    this.runs = this.api.getCompilerParameters().runs;
                    this.runs = this.runs && this.runs !== 'undefined' ? this.runs : 200;
                    this.api.setCompilerParameters({
                        runs: this.runs
                    });
                    this.compiler.set('runs', this.runs);
                    this.evmVersion = this.api.getCompilerParameters().evmVersion;

                    if (this.evmVersion === 'undefined' || this.evmVersion === 'null' || !this.evmVersion) {
                        this.evmVersion = null;
                    }

                    this.api.setCompilerParameters({
                        evmVersion: this.evmVersion
                    });
                    this.compiler.set('evmVersion', this.evmVersion);
                    this.language = (0, _remixSolidity.getValidLanguage)(this.api.getCompilerParameters().language);

                    if (this.language != null) {
                        this.compiler.set('language', this.language);
                    }
                }

                setOptimize(newOptimizeValue) {
                    this.optimize = newOptimizeValue;
                    this.api.setCompilerParameters({
                        optimize: this.optimize
                    });
                    this.compiler.set('optimize', this.optimize);
                }

                setRuns(runs) {
                    this.runs = runs;
                    this.api.setCompilerParameters({
                        runs: this.runs
                    });
                    this.compiler.set('runs', this.runs);
                }

                setEvmVersion(newEvmVersion) {
                    this.evmVersion = newEvmVersion;
                    this.api.setCompilerParameters({
                        evmVersion: this.evmVersion
                    });
                    this.compiler.set('evmVersion', this.evmVersion);
                }

                getCompilerState() {
                    return this.compiler.state;
                }

                /**
                 * Set the compiler to using Solidity or Yul (default to Solidity)
                 * @params lang {'Solidity' | 'Yul'} ...
                 */


                setLanguage(lang) {
                    this.language = lang;
                    this.api.setCompilerParameters({
                        language: lang
                    });
                    this.compiler.set('language', lang);
                }

                /**
                 * Compile a specific file of the file manager
                 * @param {string} target the path to the file to compile
                 */


                compileFile(target, u = 0) {
                    if (!target) {
                        throw new Error('No target provided for compiliation');
                    }

                    return new Promise((resolve, reject) => {


                        document.getElementsByClassName("udapp_network")[0].addEventListener("DOMCharacterDataModified", (event) => this.compileFile(target), {once: true});
                        this.api.readFile(target).then(content => {
                                const sources = {
                                    [target]: {
                                        content
                                    }
                                };
                                this.event.emit('removeAnnotations');
                                this.event.emit('startingCompilation'); // setTimeout fix the animation on chrome... (animation triggered by 'staringCompilation')

                                setTimeout(() => {
                                    this.compiler.compile(sources, target);
                                    resolve(true);
                                }, 100);
                            }).catch(error => {
                                reject(error);
                            });
                    });
                }

                async isHardhatProject() {
                    if (this.api.getFileManagerMode() === 'localhost') {
                        return await this.api.fileExists('hardhat.config.js');
                    } else {
                        return false;
                    }
                }

                runCompiler(hhCompilation) {
                    try {
                        if (this.api.getFileManagerMode() === 'localhost' && hhCompilation) {
                            const {
                                currentVersion,
                                optimize,
                                runs
                            } = this.compiler.state;

                            if (currentVersion) {
                                const fileContent = `module.exports = {
            solidity: '${currentVersion.substring(0, currentVersion.indexOf('+commit'))}',
            settings: {
              optimizer: {
                enabled: ${optimize},
                runs: ${runs}
              }
            }
          }
          `;
                                const configFilePath = 'remix-compiler.config.js';
                                this.api.writeFile(configFilePath, fileContent);

                                _paq.push(['trackEvent', 'compiler', 'compileWithHardhat']);

                                this.api.compileWithHardhat(configFilePath).then(result => {
                                    this.api.logToTerminal({
                                        type: 'info',
                                        value: result
                                    });
                                }).catch(error => {
                                    this.api.logToTerminal({
                                        type: 'error',
                                        value: error
                                    });
                                });
                            }
                        } // TODO readd saving current file


                        this.api.saveCurrentFile();
                        var currentFile = this.api.currentFile;
                        return this.compileFile(currentFile);
                    } catch (err) {
                        console.error(err);
                    }
                }

            }

            exports.CompileTabLogic = CompileTabLogic;

            /***/
        }),

        /***/ 2424:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.parseContracts = parseContracts;

            var solcTranslate = _interopRequireWildcard(__webpack_require__(983));

            var _remixLib = __webpack_require__(508);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            const txHelper = _remixLib.execution.txHelper;

            function parseContracts(contractName, contract, source) {
                const detail = {};
                detail.name = contractName;
                detail.metadata = contract.metadata;

                if (contract.evm.bytecode.object) {
                    detail.bytecode = contract.evm.bytecode.object;
                }

                detail.abi = contract.abi;

                if (contract.evm.bytecode.object) {
                    detail.bytecode = contract.evm.bytecode;
                    detail.web3Deploy = gethDeploy(contractName.toLowerCase(), contract.abi, contract.evm.bytecode.object);
                    detail.metadataHash = retrieveMetadataHash(contract.evm.bytecode.object);

                    if (detail.metadataHash) {
                        detail.swarmLocation = 'bzzr://' + detail.metadataHash;
                    }
                }

                detail.functionHashes = {};

                for (const fun in contract.evm.methodIdentifiers) {
                    detail.functionHashes[contract.evm.methodIdentifiers[fun]] = fun;
                }

                detail.gasEstimates = formatGasEstimates(contract.evm.gasEstimates);
                detail.devdoc = contract.devdoc;
                detail.userdoc = contract.userdoc;

                if (contract.evm.deployedBytecode && contract.evm.deployedBytecode.object.length > 0) {
                    detail['Runtime Bytecode'] = contract.evm.deployedBytecode;
                }

                if (source && contract.assembly !== null) {
                    detail.Assembly = solcTranslate.prettyPrintLegacyAssemblyJSON(contract.evm.legacyAssembly, source.content);
                }

                return detail;
            }

            const retrieveMetadataHash = function retrieveMetadataHash(bytecode) {
                var match = /a165627a7a72305820([0-9a-f]{64})0029$/.exec(bytecode);

                if (!match) {
                    match = /a265627a7a72305820([0-9a-f]{64})6c6578706572696d656e74616cf50037$/.exec(bytecode);
                }

                if (match) {
                    return match[1];
                }
            };

            const gethDeploy = function gethDeploy(contractName, jsonInterface, bytecode) {
                let code = '';
                const funABI = txHelper.getConstructorInterface(jsonInterface);
                funABI.inputs.forEach(function (inp) {
                    code += 'var ' + inp.name + ' = /* var of type ' + inp.type + ' here */ ;\n';
                });
                contractName = contractName.replace(/[:./]/g, '_');
                code += 'var ' + contractName + 'Contract = new web3.eth.Contract(' + JSON.stringify(jsonInterface).replace('\n', '') + ');' + '\nvar ' + contractName + ' = ' + contractName + 'Contract.deploy({' + "\n     data: '0x" + bytecode + "', " + '\n     arguments: [';
                funABI.inputs.forEach(function (inp) {
                    code += '\n          ' + inp.name + ',';
                });
                code += '\n     ]' + '\n}).send({' + '\n     from: web3.eth.accounts[0], ' + "\n     gas: '4700000'" + '\n   }, function (e, contract){' + '\n    console.log(e, contract);' + "\n    if (typeof contract.address !== 'undefined') {" + "\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);" + '\n    }' + '\n })';
                return code;
            };

            const formatGasEstimates = function formatGasEstimates(data) {
                if (!data) {
                    return {};
                }
                if (data.creation === undefined && data.external === undefined && data.internal === undefined) {
                    return {};
                }

                const gasToText = function gasToText(g) {
                    return g === null ? 'unknown' : g;
                };

                const ret = {};
                let fun;

                if ('creation' in data) {
                    ret.Creation = data.creation;
                }

                if ('external' in data) {
                    ret.External = {};

                    for (fun in data.external) {
                        ret.External[fun] = gasToText(data.external[fun]);
                    }
                }

                if ('internal' in data) {
                    ret.Internal = {};

                    for (fun in data.internal) {
                        ret.Internal[fun] = gasToText(data.internal[fun]);
                    }
                }

                return ret;
            };

            /***/
        }),

        /***/ 2425:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _compilerApi = __webpack_require__(2426);

            Object.keys(_compilerApi).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _compilerApi[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _compilerApi[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2426:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CompilerApiMixin = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _remixSolidity = __webpack_require__(556);

            var _solidityCompiler = __webpack_require__(1159);

            const CompilerApiMixin = Base => class extends Base {
                constructor(...args) {
                    super(...args);
                    (0, _defineProperty2.default)(this, "currentFile", void 0);
                    (0, _defineProperty2.default)(this, "contractMap", void 0);
                    (0, _defineProperty2.default)(this, "compileErrors", void 0);
                    (0, _defineProperty2.default)(this, "compileTabLogic", void 0);
                    (0, _defineProperty2.default)(this, "contractsDetails", void 0);
                    (0, _defineProperty2.default)(this, "configurationSettings", void 0);
                    (0, _defineProperty2.default)(this, "onCurrentFileChanged", void 0);
                    (0, _defineProperty2.default)(this, "onResetResults", void 0);
                    (0, _defineProperty2.default)(this, "onSetWorkspace", void 0);
                    (0, _defineProperty2.default)(this, "onNoFileSelected", void 0);
                    (0, _defineProperty2.default)(this, "onCompilationFinished", void 0);
                    (0, _defineProperty2.default)(this, "onSessionSwitched", void 0);
                    (0, _defineProperty2.default)(this, "onContentChanged", void 0);
                }

                initCompilerApi() {
                    this.configurationSettings = null;
                    this._view = {
                        warnCompilationSlow: null,
                        errorContainer: null,
                        contractEl: null
                    };
                    this.contractsDetails = {};
                    this.data = {
                        eventHandlers: {},
                        loading: false
                    };
                    this.contractMap = {};
                    this.contractsDetails = {};
                    this.compileErrors = {};
                    this.compiledFileName = '';
                    this.currentFile = '';
                }

                onActivation() {
                    this.listenToEvents();
                }

                onDeactivation() {
                    this.off('editor', 'contentChanged');

                    if (this.data.eventHandlers.onLoadingCompiler) {
                        this.compiler.event.unregister('loadingCompiler', this.data.eventHandlers.onLoadingCompiler);
                    }

                    if (this.data.eventHandlers.onCompilerLoaded) {
                        this.compiler.event.unregister('compilerLoaded', this.data.eventHandlers.onCompilerLoaded);
                    }

                    if (this.data.eventHandlers.onCompilationFinished) {
                        this.compiler.event.unregister('compilationFinished', this.data.eventHandlers.onCompilationFinished);
                    }

                    this.off('filePanel', 'setWorkspace');
                    this.off('remixd', 'rootFolderChanged');
                    this.off('editor', 'sessionSwitched');

                    if (this.data.eventHandlers.onStartingCompilation) {
                        this.compileTabLogic.event.off('startingCompilation', this.data.eventHandlers.onStartingCompilation);
                    }

                    if (this.data.eventHandlers.onRemoveAnnotations) {
                        this.compileTabLogic.event.off('removeAnnotations', this.data.eventHandlers.onRemoveAnnotations);
                    }

                    this.off('fileManager', 'currentFileChanged');
                    this.off('fileManager', 'noFileSelected');
                    this.off('themeModule', 'themeChanged');

                    if (this.data.eventHandlers.onKeyDown) {
                        window.document.removeEventListener('keydown', this.data.eventHandlers.onKeyDown);
                    }
                }

                resolveContentAndSave(url) {
                    return this.call('contentImport', 'resolveAndSave', url);
                }

                compileWithHardhat(configFile) {
                    return this.call('hardhat', 'compile', configFile);
                }

                logToTerminal(content) {
                    return this.call('terminal', 'log', content);
                }

                getCompilationResult() {
                    return this.compileTabLogic.compiler.state.lastCompilationResult;
                }

                getCompilerState() {
                    return this.compileTabLogic.getCompilerState();
                }

                /**
                 * compile using @arg fileName.
                 * The module UI will be updated accordingly to the new compilation result.
                 * This function is used by remix-plugin compiler API.
                 * @param {string} fileName to compile
                 */


                compile(fileName) {
                    this.currentFile = fileName;
                    return this.compileTabLogic.compileFile(fileName);
                }

                compileFile(event) {
                    if (event.path.length > 0) {
                        this.currentFile = event.path[0];
                        this.compileTabLogic.compileFile(event.path[0]);
                    }
                }

                /**
                 * compile using @arg compilationTargets and @arg settings
                 * The module UI will *not* be updated, the compilation result is returned
                 * This function is used by remix-plugin compiler API.
                 * @param {object} map of source files.
                 * @param {object} settings {evmVersion, optimize, runs, version, language}
                 */


                async compileWithParameters(compilationTargets, settings) {
                    const compilerState = this.getCompilerState();
                    settings.version = settings.version || compilerState.currentVersion;
                    const res = await (0, _remixSolidity.compile)(compilationTargets, settings, (url, cb) => this.call('contentImport', 'resolveAndSave', url).then(result => cb(null, result)).catch(error => cb(error.message)));
                    return res;
                } // This function is used for passing the compiler configuration to 'remix-tests'


                getCurrentCompilerConfig() {
                    const compilerState = this.getCompilerState();
                    const compilerDetails = {
                        currentVersion: compilerState.currentVersion,
                        evmVersion: compilerState.evmVersion,
                        optimize: compilerState.optimize,
                        runs: compilerState.runs
                    };

                    if (this.data.loading) {
                        compilerDetails.currentVersion = this.data.loadingUrl;
                        compilerDetails.isUrl = true;
                    }

                    return compilerDetails;
                }

                /**
                 * set the compiler configuration
                 * This function is used by remix-plugin compiler API.
                 * @param {object} settings {evmVersion, optimize, runs, version, language}
                 */


                setCompilerConfig(settings) {
                    this.configurationSettings = settings;
                }

                fileExists(fileName) {
                    return this.call('fileManager', 'exists', fileName);
                }

                writeFile(fileName, content) {
                    return this.call('fileManager', 'writeFile', fileName, content);
                }

                readFile(fileName) {
                    return this.call('fileManager', 'readFile', fileName);
                }

                open(fileName) {
                    return this.call('fileManager', 'open', fileName);
                }

                saveCurrentFile() {
                    return this.call('fileManager', 'saveCurrentFile');
                }

                resetResults() {
                    this.currentFile = '';
                    this.contractsDetails = {};
                    this.emit('statusChanged', {
                        key: 'none'
                    });
                    if (this.onResetResults) {
                        this.onResetResults();
                    }
                }

                listenToEvents() {
                    var _this = this;

                    this.on('editor', 'contentChanged', () => {
                        this.emit('statusChanged', {
                            key: 'edited',
                            title: 'the content has changed, needs recompilation',
                            type: 'info'
                        });
                        if (this.onContentChanged) {
                            this.onContentChanged();
                        }
                    });

                    this.data.eventHandlers.onLoadingCompiler = url => {
                        this.data.loading = true;
                        this.data.loadingUrl = url;
                        this.emit('statusChanged', {
                            key: 'loading',
                            title: 'loading compiler...',
                            type: 'info'
                        });
                    };

                    this.compiler.event.register('loadingCompiler', this.data.eventHandlers.onLoadingCompiler);

                    this.data.eventHandlers.onCompilerLoaded = () => {
                        this.data.loading = false;
                        this.emit('statusChanged', {
                            key: 'none'
                        });
                    };

                    this.compiler.event.register('compilerLoaded', this.data.eventHandlers.onCompilerLoaded);

                    this.data.eventHandlers.onStartingCompilation = () => {
                        this.emit('statusChanged', {
                            key: 'loading',
                            title: 'compiling...',
                            type: 'info'
                        });
                    };

                    this.data.eventHandlers.onRemoveAnnotations = () => {
                        this.call('editor', 'clearAnnotations');
                    };

                    this.on('filePanel', 'setWorkspace', workspace => {
                        this.resetResults();
                        if (this.onSetWorkspace) {
                            this.onSetWorkspace(workspace.isLocalhost);
                        }
                    });
                    this.on('remixd', 'rootFolderChanged', () => {
                        this.resetResults();
                        if (this.onSetWorkspace) {
                            this.onSetWorkspace(true);
                        }
                    });
                    this.on('editor', 'sessionSwitched', () => {
                        if (this.onSessionSwitched) {
                            this.onSessionSwitched();
                        }
                    });
                    this.compileTabLogic.event.on('startingCompilation', this.data.eventHandlers.onStartingCompilation);
                    this.compileTabLogic.event.on('removeAnnotations', this.data.eventHandlers.onRemoveAnnotations);

                    this.data.eventHandlers.onCurrentFileChanged = name => {
                        this.currentFile = name;
                        if (this.onCurrentFileChanged) {
                            this.onCurrentFileChanged(name);
                        }
                    };

                    this.on('fileManager', 'currentFileChanged', this.data.eventHandlers.onCurrentFileChanged);

                    this.data.eventHandlers.onNoFileSelected = () => {
                        this.currentFile = '';
                        if (this.onNoFileSelected) {
                            this.onNoFileSelected();
                        }
                    };

                    this.on('fileManager', 'noFileSelected', this.data.eventHandlers.onNoFileSelected);

                    this.data.eventHandlers.onCompilationFinished = (success, data, source) => {
                        this.compileErrors = data;

                        if (success) {
                            // forwarding the event to the appManager infra
                            this.emit('compilationFinished', source.target, source, 'soljson', data);

                            if (data.errors && data.errors.length > 0) {
                                this.emit('statusChanged', {
                                    key: data.errors.length,
                                    title: `compilation finished successful with warning${data.errors.length > 1 ? 's' : ''}`,
                                    type: 'warning'
                                });
                            } else {
                                this.emit('statusChanged', {
                                    key: 'succeed',
                                    title: 'compilation successful',
                                    type: 'success'
                                });
                            } // Store the contracts


                            this.contractsDetails = {};
                            this.compiler.visitContracts(contract => {
                                this.contractsDetails[contract.name] = (0, _solidityCompiler.parseContracts)(contract.name, contract.object, this.compiler.getSource(contract.file));
                            });
                        } else {
                            const count = data.errors ? data.errors.filter(error => error.severity === 'error').length : 0 + (data.error ? 1 : 0);
                            this.emit('statusChanged', {
                                key: count,
                                title: `compilation failed with ${count} error${count > 1 ? 's' : ''}`,
                                type: 'error'
                            });
                        } // Update contract Selection


                        this.contractMap = {};
                        if (success) {
                            this.compiler.visitContracts(contract => {
                                this.contractMap[contract.name] = contract;
                            });
                        }
                        if (this.onCompilationFinished) {
                            this.onCompilationFinished(this.contractsDetails, this.contractMap);
                        }
                    };

                    this.compiler.event.register('compilationFinished', this.data.eventHandlers.onCompilationFinished);

                    this.data.eventHandlers.onThemeChanged = theme => {
                        const invert = theme.quality === 'dark' ? 1 : 0;
                        const img = document.getElementById('swarmLogo');

                        if (img) {
                            img.style.filter = `invert(${invert})`;
                        }
                    };

                    this.on('themeModule', 'themeChanged', this.data.eventHandlers.onThemeChanged); // Run the compiler instead of trying to save the website

                    this.data.eventHandlers.onKeyDown = async function (e) {
                        // ctrl+s or command+s
                        if ((e.metaKey || e.ctrlKey) && e.keyCode === 83 && _this.currentFile !== '') {
                            e.preventDefault();

                            _this.compileTabLogic.runCompiler(await _this.getAppParameter('hardhat-compilation'));
                        }
                    };

                    window.document.addEventListener('keydown', this.data.eventHandlers.onKeyDown);
                }

            };

            exports.CompilerApiMixin = CompilerApiMixin;

            /***/
        }),

        /***/ 2427:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _engineWeb = __webpack_require__(531);

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _settings = __webpack_require__(2428);

            var _registry = _interopRequireDefault(__webpack_require__(576));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var profile = {
                name: 'settings',
                displayName: 'Settings',
                methods: ['get'],
                events: [],
                icon: 'assets/img/settings.webp',
                description: 'Remix-IDE settings',
                kind: 'settings',
                location: 'sidePanel',
                documentation: 'https://remix-ide.readthedocs.io/en/latest/settings.html',
                version: packageJson.version,
                permission: true
            };

            module.exports = /*#__PURE__*/function (_ViewPlugin) {
                _inherits(SettingsTab, _ViewPlugin);

                var _super = _createSuper(SettingsTab);

                function SettingsTab(config, editor) {
                    var _this;

                    _classCallCheck(this, SettingsTab);

                    _this = _super.call(this, profile);
                    _this.config = config;
                    _this.editor = editor;
                    _this._deps = {
                        themeModule: _registry["default"].getInstance().get('themeModule').api
                    };
                    _this.element = document.createElement('div');

                    _this.element.setAttribute('id', 'settingsTab');

                    _this.useMatomoAnalytics = null;
                    return _this;
                }

                _createClass(SettingsTab, [
                    {
                        key: "onActivation",
                        value: function onActivation() {
                            this.renderComponent();
                        }
                    }, {
                        key: "render",
                        value: function render() {
                            return this.element;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_settings.RemixUiSettings, {
                                config: this.config,
                                editor: this.editor,
                                _deps: this._deps,
                                useMatomoAnalytics: this.useMatomoAnalytics
                            }), this.element);
                        }
                    }, {
                        key: "get",
                        value: function get(key) {
                            return this.config.get(key);
                        }
                    }, {
                        key: "updateMatomoAnalyticsChoice",
                        value: function updateMatomoAnalyticsChoice(isChecked) {
                            this.config.set('settings/matomo-analytics', isChecked);
                            this.useMatomoAnalytics = isChecked;
                            this.renderComponent();
                        }
                    }
                ]);

                return SettingsTab;
            }(_engineWeb.ViewPlugin);

            /***/
        }),

        /***/ 2428:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiSettings = __webpack_require__(2429);

            Object.keys(_remixUiSettings).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiSettings[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiSettings[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2429:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixUiSettings = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _clipboard = __webpack_require__(574);

            var _constants = __webpack_require__(833);

            __webpack_require__(2430);

            var _settingsAction = __webpack_require__(2432);

            var _settingsReducer = __webpack_require__(2433);

            var _toaster = __webpack_require__(195);

            var _themeModule = __webpack_require__(2434);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            const RemixUiSettings = props => {
                const [, dispatch] = (0, _react.useReducer)(_settingsReducer.settingReducer, _settingsReducer.initialState);
                const [state, dispatchToast] = (0, _react.useReducer)(_settingsReducer.toastReducer, _settingsReducer.toastInitialState);
                const [tokenValue, setTokenValue] = (0, _react.useState)('');
                (0, _react.useEffect)(() => {
                    const token = props.config.get('settings/gist-access-token');

                    if (token === undefined) {
                        props.config.set('settings/generate-contract-metadata', true);
                        dispatch({
                            type: 'contractMetadata',
                            payload: {
                                name: 'contractMetadata',
                                isChecked: true,
                                textClass: _constants.textDark
                            }
                        });
                    }

                    if (token) {
                        setTokenValue(token);
                    }
                }, [state.message]);
                (0, _react.useEffect)(() => {
                    if (props.useMatomoAnalytics !== null) {
                        (0, _settingsAction.useMatomoAnalytics)(props.config, props.useMatomoAnalytics, dispatch);
                    }
                }, [props.useMatomoAnalytics]);
                (0, _react.useEffect)(() => {
                    const javascriptVM = props.config.get('settings/always-use-vm');
                    if (javascriptVM === null || javascriptVM === undefined) {
                        (0, _settingsAction.ethereumVM)(props.config, true, dispatch);
                    }
                }, [props.config]);

                const onchangeGenerateContractMetadata = event => {
                    (0, _settingsAction.generateContractMetadat)(props.config, event.target.checked, dispatch);
                };

                const onchangeOption = event => {
                    (0, _settingsAction.ethereumVM)(props.config, event.target.checked, dispatch);
                };

                const textWrapEvent = event => {
                    (0, _settingsAction.textWrapEventAction)(props.config, props.editor, event.target.checked, dispatch);
                };

                const onchangePersonal = event => {
                    (0, _settingsAction.personal)(props.config, event.target.checked, dispatch);
                };

                const onchangeMatomoAnalytics = event => {
                    (0, _settingsAction.useMatomoAnalytics)(props.config, event.target.checked, dispatch);
                };

                const getTextClass = key => {
                    if (props.config.get(key)) {
                        return _constants.textDark;
                    } else {
                        return _constants.textSecondary;
                    }
                };

                const generalConfig = () => {
                    const isMetadataChecked = props.config.get('settings/generate-contract-metadata') || false;
                    const isEthereumVMChecked = props.config.get('settings/always-use-vm') || false;
                    const isEditorWrapChecked = props.config.get('settings/text-wrap') || false;
                    const isPersonalChecked = props.config.get('settings/personal-mode') || false;
                    const isMatomoChecked = props.config.get('settings/matomo-analytics') || false;
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "$border-top",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "card-body pt-3 pb-2",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                                className: "card-title",
                                children: "General settings"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mt-2 custom-control custom-checkbox mb-1",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    onChange: onchangeGenerateContractMetadata,
                                    id: "generatecontractmetadata",
                                    "data-id": "settingsTabGenerateContractMetadata",
                                    type: "checkbox",
                                    className: "custom-control-input",
                                    name: "contractMetadata",
                                    checked: isMetadataChecked
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: `form-check-label custom-control-label align-middle ${getTextClass('settings/generate-contract-metadata')}`,
                                    "data-id": "settingsTabGenerateContractMetadataLabel",
                                    htmlFor: "generatecontractmetadata",
                                    children: _constants.generateContractMetadataText
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "fmt-2 custom-control custom-checkbox mb-1",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    onChange: onchangeOption,
                                    className: "custom-control-input",
                                    id: "alwaysUseVM",
                                    "data-id": "settingsTabAlwaysUseVM",
                                    type: "checkbox",
                                    name: "ethereumVM",
                                    checked: isEthereumVMChecked
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: `form-check-label custom-control-label align-middle ${getTextClass('settings/always-use-vm')}`,
                                    htmlFor: "alwaysUseVM",
                                    children: _constants.ethereunVMText
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "mt-2 custom-control custom-checkbox mb-1",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    id: "editorWrap",
                                    className: "custom-control-input",
                                    type: "checkbox",
                                    onChange: textWrapEvent,
                                    checked: isEditorWrapChecked
                                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                    className: `form-check-label custom-control-label align-middle ${getTextClass('settings/text-wrap')}`,
                                    htmlFor: "editorWrap",
                                    children: _constants.wordWrapText
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "custom-control custom-checkbox mb-1",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    onChange: onchangePersonal,
                                    id: "personal",
                                    type: "checkbox",
                                    className: "custom-control-input",
                                    checked: isPersonalChecked
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: `form-check-label custom-control-label align-middle ${getTextClass('settings/personal-mode')}`,
                                    htmlFor: "personal",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        className: "fas fa-exclamation-triangle text-warning",
                                        "aria-hidden": "true"
                                    }), " ", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        children: "   "
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        children: "   "
                                    }), _constants.enablePersonalModeText, " ", _constants.warnText
                                    ]
                                })
                                ]
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "custom-control custom-checkbox mb-1",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    onChange: onchangeMatomoAnalytics,
                                    id: "settingsMatomoAnalytics",
                                    type: "checkbox",
                                    className: "custom-control-input",
                                    checked: isMatomoChecked
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: `form-check-label custom-control-label align-middle ${getTextClass('settings/matomo-analytics')}`,
                                    htmlFor: "settingsMatomoAnalytics",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        children: _constants.matomoAnalytics
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                        href: "https://medium.com/p/66ef69e14931/",
                                        target: "_blank",
                                        children: " Analytics in Remix IDE"
                                    }), " ", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                        children: "&"
                                    }), " ", /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                        target: "_blank",
                                        href: "https://matomo.org/free-software",
                                        children: "Matomo"
                                    })
                                    ]
                                })
                                ]
                            })
                            ]
                        })
                    });
                };

                const saveToken = () => {
                    (0, _settingsAction.saveTokenToast)(props.config, dispatchToast, tokenValue);
                };

                const removeToken = () => {
                    setTokenValue('');
                    (0, _settingsAction.removeTokenToast)(props.config, dispatchToast);
                };

                const handleSaveTokenState = (0, _react.useCallback)(event => {
                    setTokenValue(event.target.value);
                }, [tokenValue]);

                const gistToken = () => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "border-top",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "card-body pt-3 pb-2",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                            className: "card-title",
                            children: _constants.gitAccessTokenTitle
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                            className: "mb-1",
                            children: _constants.gitAccessTokenText
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                            className: "",
                            children: _constants.gitAccessTokenText2
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                            className: "mb-1",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                className: "text-primary",
                                target: "_blank",
                                href: "https://github.com/settings/tokens",
                                children: _constants.gitAccessTokenLink
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                children: "TOKEN:"
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "text-secondary mb-0 h6",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    id: "gistaccesstoken",
                                    "data-id": "settingsTabGistAccessToken",
                                    type: "password",
                                    className: "form-control",
                                    onChange: handleSaveTokenState,
                                    value: tokenValue
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                    className: "d-flex justify-content-end pt-2",
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_clipboard.CopyToClipboard, {
                                        content: tokenValue,
                                        "data-id": "copyToClipboardCopyIcon"
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                        className: "btn btn-sm btn-primary ml-2",
                                        id: "savegisttoken",
                                        "data-id": "settingsTabSaveGistToken",
                                        onClick: () => saveToken(),
                                        value: "Save",
                                        type: "button",
                                        disabled: tokenValue === ''
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                                        className: "btn btn-sm btn-secondary ml-2",
                                        id: "removegisttoken",
                                        "data-id": "settingsTabRemoveGistToken",
                                        title: "Delete Github access token",
                                        onClick: () => removeToken(),
                                        children: "Remove"
                                    })
                                    ]
                                })
                                ]
                            })
                            ]
                        })
                        ]
                    })
                });

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    children: [
                        state.message ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_toaster.Toaster, {
                            message: state.message
                        }) : null, generalConfig(), gistToken(), /*#__PURE__*/(0, _jsxRuntime.jsx)(_themeModule.RemixUiThemeModule, {
                            themeModule: props._deps.themeModule
                        })
                    ]
                });
            };

            exports.RemixUiSettings = RemixUiSettings;

            /***/
        }),

        /***/ 2430:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(2431);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 2431:
        /***/ (function (module, exports) {

            module.exports = [[module.i, "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZW1peC11aS1zZXR0aW5ncy5jc3MifQ== */", '', '']]

            /***/
        }),

        /***/ 2432:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.useMatomoAnalytics = exports.textWrapEventAction = exports.saveTokenToast = exports.removeTokenToast = exports.personal = exports.generateContractMetadat = exports.ethereumVM = void 0;

            var _constants = __webpack_require__(833);

            const _paq = window._paq = window._paq || []; //eslint-disable-line


            const generateContractMetadat = (config, checked, dispatch) => {
                config.set('settings/generate-contract-metadata', checked);
                dispatch({
                    type: 'contractMetadata',
                    payload: {
                        isChecked: checked,
                        textClass: checked ? _constants.textDark : _constants.textSecondary
                    }
                });
            };

            exports.generateContractMetadat = generateContractMetadat;

            const ethereumVM = (config, checked, dispatch) => {
                config.set('settings/always-use-vm', checked);
                dispatch({
                    type: 'ethereumVM',
                    payload: {
                        isChecked: checked,
                        textClass: checked ? _constants.textDark : _constants.textSecondary
                    }
                });
            };

            exports.ethereumVM = ethereumVM;

            const textWrapEventAction = (config, editor, checked, dispatch) => {
                config.set('settings/text-wrap', checked);
                editor.resize(checked);
                dispatch({
                    type: 'textWrap',
                    payload: {
                        isChecked: checked,
                        textClass: checked ? _constants.textDark : _constants.textSecondary
                    }
                });
            };

            exports.textWrapEventAction = textWrapEventAction;

            const personal = (config, checked, dispatch) => {
                config.set('settings/personal-mode', checked);
                dispatch({
                    type: 'personal',
                    payload: {
                        isChecked: checked,
                        textClass: checked ? _constants.textDark : _constants.textSecondary
                    }
                });
            };

            exports.personal = personal;

            const useMatomoAnalytics = (config, checked, dispatch) => {
                config.set('settings/matomo-analytics', checked);
                dispatch({
                    type: 'useMatomoAnalytics',
                    payload: {
                        isChecked: checked,
                        textClass: checked ? _constants.textDark : _constants.textSecondary
                    }
                });

                if (checked) {
                    _paq.push(['forgetUserOptOut']); // @TODO remove next line when https://github.com/matomo-org/matomo/commit/9e10a150585522ca30ecdd275007a882a70c6df5 is used


                    document.cookie = 'mtm_consent_removed=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                } else {
                    _paq.push(['optUserOut']);
                }
            };

            exports.useMatomoAnalytics = useMatomoAnalytics;

            const saveTokenToast = (config, dispatch, tokenValue) => {
                config.set('settings/gist-access-token', tokenValue);
                dispatch({
                    type: 'save',
                    payload: {
                        message: 'Access token has been saved'
                    }
                });
            };

            exports.saveTokenToast = saveTokenToast;

            const removeTokenToast = (config, dispatch) => {
                config.set('settings/gist-access-token', '');
                dispatch({
                    type: 'removed',
                    payload: {
                        message: 'Access token removed'
                    }
                });
            };

            exports.removeTokenToast = removeTokenToast;

            /***/
        }),

        /***/ 2433:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.toastReducer = exports.toastInitialState = exports.settingReducer = exports.initialState = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            var _constants = __webpack_require__(833);

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const initialState = {
                elementState: [
                    {
                        name: 'contractMetadata',
                        isChecked: false,
                        textClass: _constants.textSecondary
                    }, {
                        name: 'ethereumVM',
                        isChecked: false,
                        textClass: _constants.textSecondary
                    }, {
                        name: 'textWrap',
                        isChecked: false,
                        textClass: _constants.textSecondary
                    }, {
                        name: 'personal',
                        isChecked: false,
                        textClass: _constants.textSecondary
                    }, {
                        name: 'useMatomoAnalytics',
                        isChecked: false,
                        textClass: _constants.textSecondary
                    }
                ]
            };
            exports.initialState = initialState;

            const settingReducer = (state, action) => {
                switch (action.type) {
                    case 'contractMetadata':
                        state.elementState.map(element => {
                            if (element.name === 'contractMetadata') {
                                element.isChecked = action.payload.isChecked;
                                element.textClass = action.payload.textClass;
                            }
                        });
                        return _objectSpread({}, state);

                    case 'ethereumVM':
                        state.elementState.map(element => {
                            if (element.name === 'ethereumVM') {
                                element.isChecked = action.payload.isChecked;
                                element.textClass = action.payload.textClass;
                            }
                        });
                        return _objectSpread({}, state);

                    case 'textWrap':
                        state.elementState.map(element => {
                            if (element.name === 'textWrap') {
                                element.isChecked = action.payload.isChecked;
                                element.textClass = action.payload.textClass;
                            }
                        });
                        return _objectSpread({}, state);

                    case 'personal':
                        state.elementState.map(element => {
                            if (element.name === 'personal') {
                                element.isChecked = action.payload.isChecked;
                                element.textClass = action.payload.textClass;
                            }
                        });
                        return _objectSpread({}, state);

                    case 'useMatomoAnalytics':
                        state.elementState.map(element => {
                            if (element.name === 'useMatomoAnalytics') {
                                element.isChecked = action.payload.isChecked;
                                element.textClass = action.payload.textClass;
                            }
                        });
                        return _objectSpread({}, state);

                    default:
                        return initialState;
                }
            };

            exports.settingReducer = settingReducer;
            const toastInitialState = {
                message: ''
            };
            exports.toastInitialState = toastInitialState;

            const toastReducer = (state, action) => {
                switch (action.type) {
                    case 'save':
                        return _objectSpread(_objectSpread({}, state), {}, {
                            message: action.payload.message
                        });

                    case 'removed':
                        return _objectSpread(_objectSpread({}, state), {}, {
                            message: action.payload.message
                        });

                    default:
                        return _objectSpread(_objectSpread({}, state), {}, {
                            message: ''
                        });
                }
            };

            exports.toastReducer = toastReducer;

            /***/
        }),

        /***/ 2434:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiThemeModule = __webpack_require__(2435);

            Object.keys(_remixUiThemeModule).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiThemeModule[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiThemeModule[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2435:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.RemixUiThemeModule = RemixUiThemeModule;
            exports.default = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            __webpack_require__(2436);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            /* eslint-disable @typescript-eslint/no-explicit-any */
            function RemixUiThemeModule({
                                            themeModule
                                        }) {
                const [themeName, setThemeName] = (0, _react.useState)('');
                (0, _react.useEffect)(() => {
                    themeModule.switchTheme();
                }, [themeName, themeModule]);
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "border-top",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "card-body pt-3 pb-2",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h6", {
                            className: "card-title",
                            children: "Themes"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "card-text themes-container",
                            children: themeModule.getThemes() ? themeModule.getThemes().map((theme, idx) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                className: "radio custom-control custom-radio mb-1 form-check",
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                                    type: "radio",
                                    onChange: event => {
                                        themeModule.switchTheme(theme.name);
                                        setThemeName(theme.name);
                                    },
                                    className: "align-middle custom-control-input",
                                    name: "theme",
                                    id: theme.name,
                                    "data-id": `settingsTabTheme${theme.name}`,
                                    checked: themeModule.active === theme.name.toLocaleLowerCase()
                                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                                    className: "form-check-label custom-control-label",
                                    "data-id": `settingsTabThemeLabel${theme.name}`,
                                    htmlFor: theme.name,
                                    children: [theme.name, " (", theme.quality, ")"]
                                })
                                ]
                            }, idx)) : null
                        })
                        ]
                    })
                });
            }

            var _default = RemixUiThemeModule;
            exports.default = _default;

            /***/
        }),

        /***/ 2436:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(2437);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 2437:
        /***/ (function (module, exports, __webpack_require__) {

            // Imports
            var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(2438);
            exports = ___CSS_LOADER_API_IMPORT___(false);
            // Module
            exports.push([module.i, "", ""]);
            // Exports
            module.exports = exports;


            /***/
        }),

        /***/ 2439:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _engineWeb = __webpack_require__(531);

            var _reactDom = _interopRequireDefault(__webpack_require__(103));

            var _events = __webpack_require__(510);

            var _staticAnalyser = __webpack_require__(2440);

            var packageJson = _interopRequireWildcard(__webpack_require__(194));

            var _registry = _interopRequireDefault(__webpack_require__(576));

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                    return {"default": obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj["default"] = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {"default": obj};
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this, args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        descriptor.writable = true;
                    }
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) {
                    _defineProperties(Constructor.prototype, protoProps);
                }
                if (staticProps) {
                    _defineProperties(Constructor, staticProps);
                }
                return Constructor;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    _setPrototypeOf(subClass, superClass);
                }
            }

            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }

            function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                    var Super = _getPrototypeOf(Derived), result;
                    if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                    } else {
                        result = Super.apply(this, arguments);
                    }
                    return _possibleConstructorReturn(this, result);
                };
            }

            function _possibleConstructorReturn(self, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                    return call;
                } else if (call !== void 0) {
                    throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
            }

            function _assertThisInitialized(self) {
                if (self === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
            }

            function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if (typeof Proxy === "function") {
                    return true;
                }
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    }));
                    return true;
                } catch (e) {
                    return false;
                }
            }

            function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
            }

            var EventManager = __webpack_require__(620);

            var profile = {
                name: 'solidityStaticAnalysis',
                displayName: 'Solidity static analysis',
                methods: [],
                events: [],
                icon: 'assets/img/staticAnalysis.webp',
                description: 'Checks the contract code for security vulnerabilities and bad practices.',
                kind: 'analysis',
                location: 'sidePanel',
                documentation: 'https://remix-ide.readthedocs.io/en/latest/static_analysis.html',
                version: packageJson.version
            };

            var AnalysisTab = /*#__PURE__*/function (_ViewPlugin) {
                _inherits(AnalysisTab, _ViewPlugin);

                var _super = _createSuper(AnalysisTab);

                function AnalysisTab() {
                    var _this;

                    _classCallCheck(this, AnalysisTab);

                    _this = _super.call(this, profile);
                    _this.event = new EventManager();
                    _this.events = new _events.EventEmitter();
                    _this.registry = _registry["default"].getInstance();
                    _this.element = document.createElement('div');

                    _this.element.setAttribute('id', 'staticAnalyserView');

                    _this._components = {};
                    _this._components.registry = _this.registry;
                    _this._deps = {
                        offsetToLineColumnConverter: _this.registry.get('offsettolinecolumnconverter').api
                    };
                    return _this;
                }

                _createClass(AnalysisTab, [
                    {
                        key: "onActivation",
                        value: function () {
                            var _onActivation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                var isSolidityActive;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.next = 2;
                                                return this.call('manager', 'isActive', 'solidity');

                                            case 2:
                                                isSolidityActive = _context.sent;

                                                if (isSolidityActive) {
                                                    _context.next = 6;
                                                    break;
                                                }

                                                _context.next = 6;
                                                return this.call('manager', 'activatePlugin', 'solidity');

                                            case 6:
                                                this.renderComponent();

                                            case 7:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, this);
                            }));

                            function onActivation() {
                                return _onActivation.apply(this, arguments);
                            }

                            return onActivation;
                        }()
                    }, {
                        key: "render",
                        value: function render() {
                            return this.element;
                        }
                    }, {
                        key: "renderComponent",
                        value: function renderComponent() {
                            var _this2 = this;

                            _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_staticAnalyser.RemixUiStaticAnalyser, {
                                registry: this.registry,
                                analysisModule: this,
                                event: this.event
                            }), this.element, function () {
                                _this2.event.register('staticAnaysisWarning', function (count) {
                                    if (count > 0) {
                                        _this2.emit('statusChanged', {
                                            key: count,
                                            title: "".concat(count, " warning").concat(count === 1 ? '' : 's'),
                                            type: 'warning'
                                        });
                                    } else if (count === 0) {
                                        _this2.emit('statusChanged', {
                                            key: 'succeed',
                                            title: 'no warning',
                                            type: 'success'
                                        });
                                    } else {
                                        // count ==-1 no compilation result
                                        _this2.emit('statusChanged', {
                                            key: 'none'
                                        });
                                    }
                                });
                            });
                        }
                    }
                ]);

                return AnalysisTab;
            }(_engineWeb.ViewPlugin);

            module.exports = AnalysisTab;

            /***/
        }),

        /***/ 2440:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiStaticAnalyser = __webpack_require__(2441);

            Object.keys(_remixUiStaticAnalyser).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiStaticAnalyser[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiStaticAnalyser[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2441:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.RemixUiStaticAnalyser = void 0;

            var _react = _interopRequireWildcard(__webpack_require__(13));

            var _StaticAnalyserButton = _interopRequireDefault(__webpack_require__(2442));

            var _remixLib = __webpack_require__(508);

            var _lodash = _interopRequireDefault(__webpack_require__(1161));

            var _treeView = __webpack_require__(599);

            var _checkbox = __webpack_require__(2443);

            var _ErrorRenderer = _interopRequireDefault(__webpack_require__(2447));

            var _staticAnalysisActions = __webpack_require__(2448);

            var _staticAnalysisReducer = __webpack_require__(2449);

            var _reactBootstrap = __webpack_require__(860);

            var _remixAnalyzer = __webpack_require__(2450);

            var _jsxRuntime = __webpack_require__(21);

            function _getRequireWildcardCache(nodeInterop) {
                if (typeof WeakMap !== "function") {
                    return null;
                }
                var cacheBabelInterop = new WeakMap();
                var cacheNodeInterop = new WeakMap();
                return (_getRequireWildcardCache = function (nodeInterop) {
                    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                })(nodeInterop);
            }

            function _interopRequireWildcard(obj, nodeInterop) {
                if (!nodeInterop && obj && obj.__esModule) {
                    return obj;
                }
                if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                    return {default: obj};
                }
                var cache = _getRequireWildcardCache(nodeInterop);
                if (cache && cache.has(obj)) {
                    return cache.get(obj);
                }
                var newObj = {};
                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var key in obj) {
                    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                        if (desc && (desc.get || desc.set)) {
                            Object.defineProperty(newObj, key, desc);
                        } else {
                            newObj[key] = obj[key];
                        }
                    }
                }
                newObj.default = obj;
                if (cache) {
                    cache.set(obj, newObj);
                }
                return newObj;
            }

            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            // eslint-disable-line
            const _paq = window._paq = window._paq || []; //eslint-disable-line

            /* eslint-disable-next-line */


            const RemixUiStaticAnalyser = props => {
                const [runner] = (0, _react.useState)(new _remixAnalyzer.CodeAnalysis());

                const preProcessModules = arr => {
                    return arr.map((Item, i) => {
                        const itemObj = new Item();
                        itemObj._index = i;
                        itemObj.categoryDisplayName = itemObj.category.displayName;
                        itemObj.categoryId = itemObj.category.id;
                        return itemObj;
                    });
                };

                const groupedModules = _remixLib.util.groupBy(preProcessModules(runner.modules()), 'categoryId');

                const getIndex = (modules, array) => {
                    Object.values(modules).map(value => {
                        if (Array.isArray(value)) {
                            value.forEach(x => {
                                array.push(x._index.toString());
                            });
                        } else {
                            array.push(value._index.toString());
                        }
                    });
                };

                const groupedModuleIndex = modules => {
                    const indexOfCategory = [];

                    if (!_lodash.default.isEmpty(modules)) {
                        getIndex(modules, indexOfCategory);
                    }

                    return indexOfCategory;
                };

                const [autoRun, setAutoRun] = (0, _react.useState)(true);
                const [slitherEnabled, setSlitherEnabled] = (0, _react.useState)(false);
                const [showSlither, setShowSlither] = (0, _react.useState)(false);
                const [categoryIndex, setCategoryIndex] = (0, _react.useState)(groupedModuleIndex(groupedModules));

                const warningContainer = _react.default.useRef(null);

                const [warningState, setWarningState] = (0, _react.useState)({});
                const [state, dispatch] = (0, _react.useReducer)(_staticAnalysisReducer.analysisReducer, _staticAnalysisReducer.initialState);
                (0, _react.useEffect)(() => {
                    (0, _staticAnalysisActions.compilation)(props.analysisModule, dispatch);
                }, [props]);
                (0, _react.useEffect)(() => {
                    setWarningState({});

                    if (autoRun) {
                        if (state.data !== null) {
                            run(state.data, state.source, state.file);
                        }
                    } else {
                        props.event.trigger('staticAnaysisWarning', []);
                    }

                    return () => {
                    };
                }, [state]);
                (0, _react.useEffect)(() => {
                    props.analysisModule.on('filePanel', 'setWorkspace', currentWorkspace => {
                        // Reset warning state
                        setWarningState([]); // Reset badge

                        props.event.trigger('staticAnaysisWarning', []); // Reset state

                        dispatch({
                            type: '',
                            payload: {}
                        }); // Show 'Enable Slither Analysis' checkbox

                        if (currentWorkspace && currentWorkspace.isLocalhost === true) {
                            setShowSlither(true);
                        } else {
                            setShowSlither(false);
                            setSlitherEnabled(false);
                        }
                    });
                    props.analysisModule.on('manager', 'pluginDeactivated', plugin => {
                        // Hide 'Enable Slither Analysis' checkbox
                        if (plugin.name === 'remixd') {
                            // Reset warning state
                            setWarningState([]); // Reset badge

                            props.event.trigger('staticAnaysisWarning', []); // Reset state

                            dispatch({
                                type: '',
                                payload: {}
                            });
                            setShowSlither(false);
                            setSlitherEnabled(false);
                        }
                    });
                    return () => {
                    };
                }, [props]);

                const message = (name, warning, more, fileName, locationString) => {
                    return `
    <span className='d-flex flex-column'>
    <span className='h6 font-weight-bold'>${name}</span>
    ${warning}
    ${more ? /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                            href: more,
                            target: "_blank",
                            children: "more"
                        })
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        children: " "
                    })}
    <span className="" title={Position in ${fileName}}>Pos: ${locationString}</span>
    </span>`;
                };

                const showWarnings = (warningMessage, groupByKey) => {
                    const resultArray = [];
                    warningMessage.map(x => {
                        resultArray.push(x);
                    });

                    function groupBy(objectArray, property) {
                        return objectArray.reduce((acc, obj) => {
                            const key = obj[property];

                            if (!acc[key]) {
                                acc[key] = [];
                            } // Add object to list for given key's value


                            acc[key].push(obj);
                            return acc;
                        }, {});
                    }

                    const groupedCategory = groupBy(resultArray, groupByKey);
                    setWarningState(groupedCategory);
                };

                const run = (lastCompilationResult, lastCompilationSource, currentFile) => {
                    if (state.data !== null) {
                        if (lastCompilationResult && (categoryIndex.length > 0 || slitherEnabled)) {
                            let warningCount = 0;
                            const warningMessage = [];
                            const warningErrors = []; // Remix Analysis

                            _paq.push(['trackEvent', 'solidityStaticAnalyzer', 'analyzeWithRemixAnalyzer']);

                            runner.run(lastCompilationResult, categoryIndex, results => {
                                results.map(result => {
                                    let moduleName;
                                    Object.keys(groupedModules).map(key => {
                                        groupedModules[key].forEach(el => {
                                            if (el.name === result.name) {
                                                moduleName = groupedModules[key][0].categoryDisplayName;
                                            }
                                        });
                                    });
                                    result.report.map(item => {
                                        let location = {};
                                        let locationString = 'not available';
                                        let column = 0;
                                        let row = 0;
                                        let fileName = currentFile;

                                        if (item.location) {
                                            const split = item.location.split(':');
                                            const file = split[2];
                                            location = {
                                                start: parseInt(split[0]),
                                                length: parseInt(split[1])
                                            };
                                            location = props.analysisModule._deps.offsetToLineColumnConverter.offsetToLineColumn(location, parseInt(file), lastCompilationSource.sources, lastCompilationResult.sources);
                                            row = location.start.line;
                                            column = location.start.column;
                                            locationString = row + 1 + ':' + column + ':';
                                            fileName = Object.keys(lastCompilationResult.sources)[file];
                                        }

                                        warningCount++;
                                        const msg = message(result.name, item.warning, item.more, fileName, locationString);
                                        const options = {
                                            type: 'warning',
                                            useSpan: true,
                                            errFile: fileName,
                                            fileName,
                                            errLine: row,
                                            errCol: column,
                                            item: item,
                                            name: result.name,
                                            locationString,
                                            more: item.more,
                                            location: location
                                        };
                                        warningErrors.push(options);
                                        warningMessage.push({
                                            msg,
                                            options,
                                            hasWarning: true,
                                            warningModuleName: moduleName
                                        });
                                    });
                                }); // Slither Analysis

                                if (slitherEnabled) {
                                    props.analysisModule.call('solidity', 'getCompilerState').then(compilerState => {
                                        const {
                                            currentVersion,
                                            optimize,
                                            evmVersion
                                        } = compilerState;
                                        props.analysisModule.call('terminal', 'log', {
                                            type: 'info',
                                            value: '[Slither Analysis]: Running...'
                                        });

                                        _paq.push(['trackEvent', 'solidityStaticAnalyzer', 'analyzeWithSlither']);

                                        props.analysisModule.call('slither', 'analyse', state.file, {
                                            currentVersion,
                                            optimize,
                                            evmVersion
                                        }).then(async result => {
                                            if (result.status) {
                                                props.analysisModule.call('terminal', 'log', {
                                                    type: 'info',
                                                    value: `[Slither Analysis]: Analysis Completed!! ${result.count} warnings found.`
                                                });
                                                const report = result.data;

                                                for (const item of report) {
                                                    let location = {};
                                                    let locationString = 'not available';
                                                    let column = 0;
                                                    let row = 0;
                                                    let fileName = currentFile;

                                                    if (item.sourceMap && item.sourceMap.length) {
                                                        let path = item.sourceMap[0].source_mapping.filename_relative;
                                                        let fileIndex = Object.keys(lastCompilationResult.sources).indexOf(path);

                                                        if (fileIndex === -1) {
                                                            path = await props.analysisModule.call('fileManager', 'getUrlFromPath', path);
                                                            fileIndex = Object.keys(lastCompilationResult.sources).indexOf(path.file);
                                                        }

                                                        if (fileIndex >= 0) {
                                                            location = {
                                                                start: item.sourceMap[0].source_mapping.start,
                                                                length: item.sourceMap[0].source_mapping.length
                                                            };
                                                            location = props.analysisModule._deps.offsetToLineColumnConverter.offsetToLineColumn(location, fileIndex, lastCompilationSource.sources, lastCompilationResult.sources);
                                                            row = location.start.line;
                                                            column = location.start.column;
                                                            locationString = row + 1 + ':' + column + ':';
                                                            fileName = Object.keys(lastCompilationResult.sources)[fileIndex];
                                                        }
                                                    }

                                                    warningCount++;
                                                    const msg = message(item.title, item.description, item.more, fileName, locationString);
                                                    const options = {
                                                        type: 'warning',
                                                        useSpan: true,
                                                        errFile: fileName,
                                                        fileName,
                                                        errLine: row,
                                                        errCol: column,
                                                        item: {
                                                            warning: item.description
                                                        },
                                                        name: item.title,
                                                        locationString,
                                                        more: item.more,
                                                        location: location
                                                    };
                                                    warningErrors.push(options);
                                                    warningMessage.push({
                                                        msg,
                                                        options,
                                                        hasWarning: true,
                                                        warningModuleName: 'Slither Analysis'
                                                    });
                                                }

                                                showWarnings(warningMessage, 'warningModuleName');
                                                props.event.trigger('staticAnaysisWarning', [warningCount]);
                                            }
                                        }).catch(() => {
                                            props.analysisModule.call('terminal', 'log', {
                                                type: 'error',
                                                value: '[Slither Analysis]: Error occured! See remixd console for details.'
                                            });
                                            showWarnings(warningMessage, 'warningModuleName');
                                        });
                                    });
                                } else {
                                    showWarnings(warningMessage, 'warningModuleName');
                                    props.event.trigger('staticAnaysisWarning', [warningCount]);
                                }
                            });
                        } else {
                            if (categoryIndex.length) {
                                warningContainer.current.innerText = 'No compiled AST available';
                            }

                            props.event.trigger('staticAnaysisWarning', [-1]);
                        }
                    }
                };

                const handleCheckAllModules = groupedModules => {
                    const index = groupedModuleIndex(groupedModules);

                    if (index.every(el => categoryIndex.includes(el))) {
                        setCategoryIndex(categoryIndex.filter(el => {
                            return !index.includes(el);
                        }));
                    } else {
                        setCategoryIndex(_lodash.default.uniq([...categoryIndex, ...index]));
                    }
                };

                const handleCheckOrUncheckCategory = category => {
                    const index = groupedModuleIndex(category);

                    if (index.every(el => categoryIndex.includes(el))) {
                        setCategoryIndex(categoryIndex.filter(el => {
                            return !index.includes(el);
                        }));
                    } else {
                        setCategoryIndex(_lodash.default.uniq([...categoryIndex, ...index]));
                    }
                };

                const handleSlitherEnabled = () => {
                    if (slitherEnabled) {
                        setSlitherEnabled(false);
                    } else {
                        setSlitherEnabled(true);
                    }
                };

                const handleAutoRun = () => {
                    if (autoRun) {
                        setAutoRun(false);
                    } else {
                        setAutoRun(true);
                    }
                };

                const handleCheckSingle = (event, _index) => {
                    _index = _index.toString();

                    if (categoryIndex.includes(_index)) {
                        setCategoryIndex(categoryIndex.filter(val => val !== _index));
                    } else {
                        setCategoryIndex(_lodash.default.uniq([...categoryIndex, _index]));
                    }
                };

                const categoryItem = (categoryId, item, i) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "form-check",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.RemixUiCheckbox, {
                            categoryId: categoryId,
                            id: `staticanalysismodule_${categoryId}_${i}`,
                            inputType: "checkbox",
                            name: "checkSingleEntry",
                            itemName: item.name,
                            label: item.description,
                            onClick: event => handleCheckSingle(event, item._index),
                            checked: categoryIndex.includes(item._index.toString()),
                            onChange: () => {
                            }
                        })
                    }, i);
                };

                const categorySection = (category, categoryId, i) => {
                    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        className: "",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "block",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_treeView.TreeView, {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_treeView.TreeViewItem, {
                                    label: /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                                        htmlFor: `heading${categoryId}`,
                                        style: {
                                            cursor: 'pointer'
                                        },
                                        className: "pl-3 card-header h6 d-flex justify-content-between font-weight-bold px-1 py-2 w-100",
                                        "data-bs-toggle": "collapse",
                                        "data-bs-expanded": "false",
                                        "data-bs-controls": `heading${categoryId}`,
                                        "data-bs-target": `#heading${categoryId}`,
                                        children: category[0].categoryDisplayName
                                    }),
                                    expand: false,
                                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.RemixUiCheckbox, {
                                            onClick: () => handleCheckOrUncheckCategory(category),
                                            id: categoryId,
                                            inputType: "checkbox",
                                            label: `Select ${category[0].categoryDisplayName}`,
                                            name: "checkCategoryEntry",
                                            checked: category.map(x => x._index.toString()).every(el => categoryIndex.includes(el)),
                                            onChange: () => {
                                            }
                                        })
                                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                        className: "w-100 d-block px-2 my-1 entries collapse multi-collapse",
                                        id: `heading${categoryId}`,
                                        children: category.map((item, i) => {
                                            return categoryItem(categoryId, item, i);
                                        })
                                    })
                                    ]
                                })
                            })
                        })
                    }, i);
                };

                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "analysis_3ECCBV px-3 pb-1",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "my-2 d-flex flex-column align-items-left",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex justify-content-between",
                            id: "staticanalysisButton",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.RemixUiCheckbox, {
                                id: "checkAllEntries",
                                inputType: "checkbox",
                                checked: Object.values(groupedModules).map(value => {
                                    return value.map(x => {
                                        return x._index.toString();
                                    });
                                }).flat().every(el => categoryIndex.includes(el)),
                                label: "Select all",
                                onClick: () => handleCheckAllModules(groupedModules),
                                onChange: () => {
                                }
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.RemixUiCheckbox, {
                                id: "autorunstaticanalysis",
                                inputType: "checkbox",
                                onClick: handleAutoRun,
                                checked: autoRun,
                                label: "Autorun",
                                onChange: () => {
                                }
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_StaticAnalyserButton.default, {
                                buttonText: "Run",
                                onClick: () => run(state.data, state.source, state.file),
                                disabled: (state.data === null || categoryIndex.length === 0) && !slitherEnabled
                            })
                            ]
                        }), showSlither && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                            className: "d-flex mt-2",
                            id: "enableSlitherAnalysis",
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.RemixUiCheckbox, {
                                id: "enableSlither",
                                inputType: "checkbox",
                                onClick: handleSlitherEnabled,
                                checked: slitherEnabled,
                                label: "Enable Slither Analysis",
                                onChange: () => {
                                }
                            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                className: "mt-1 text-nowrap",
                                href: "https://remix-ide.readthedocs.io/en/latest/slither.html#enable-slither-analysis",
                                target: '_blank',
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.OverlayTrigger, {
                                    placement: 'right',
                                    overlay: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactBootstrap.Tooltip, {
                                        className: "text-nowrap",
                                        id: "overlay-tooltip",
                                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                            className: "p-1 pr-3",
                                            style: {
                                                backgroundColor: 'black',
                                                minWidth: '230px'
                                            },
                                            children: "Learn how to use Slither Analysis"
                                        })
                                    }),
                                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                        style: {
                                            fontSize: 'medium'
                                        },
                                        className: 'fal fa-info-circle ml-3',
                                        "aria-hidden": "true"
                                    })
                                })
                            })
                            ]
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        id: "staticanalysismodules",
                        className: "list-group list-group-flush",
                        children: Object.keys(groupedModules).map((categoryId, i) => {
                            const category = groupedModules[categoryId];
                            return categorySection(category, categoryId, i);
                        })
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: "mt-2 p-2 d-flex border-top flex-column",
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            children: "Last results for:"
                        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                            className: "text-break break-word word-break font-weight-bold",
                            id: "staticAnalysisCurrentFile",
                            children: state.file
                        })
                        ]
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("br", {}), Object.entries(warningState).length > 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                        id: "staticanalysisresult",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "mb-4",
                            children: Object.entries(warningState).map((element, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                    className: "text-dark h6",
                                    children: element[0]
                                }), element[1]['map']((x, i) => // eslint-disable-line dot-notation
                                    x.hasWarning ?
                                        /*#__PURE__*/
                                        // eslint-disable-next-line  dot-notation
                                        (0, _jsxRuntime.jsx)("div", {
                                            "data-id": `staticAnalysisModule${x.warningModuleName}${i}`,
                                            id: `staticAnalysisModule${x.warningModuleName}${i}`,
                                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ErrorRenderer.default, {
                                                message: x.msg,
                                                opt: x.options,
                                                warningErrors: x.warningErrors,
                                                editor: props.analysisModule
                                            })
                                        }, i) : null)
                                ]
                            }, index))
                        })
                    })
                    ]
                });
            };

            exports.RemixUiStaticAnalyser = RemixUiStaticAnalyser;
            var _default = RemixUiStaticAnalyser;
            exports.default = _default;

            /***/
        }),

        /***/ 2442:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            const StaticAnalyserButton = ({
                                              onClick,
                                              buttonText,
                                              disabled
                                          }) => {
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                    className: "btn btn-sm w-25 btn-primary",
                    onClick: onClick,
                    disabled: disabled,
                    children: buttonText
                });
            };

            var _default = StaticAnalyserButton;
            exports.default = _default;

            /***/
        }),

        /***/ 2443:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _remixUiCheckbox = __webpack_require__(2444);

            Object.keys(_remixUiCheckbox).forEach(function (key) {
                if (key === "default" || key === "__esModule") {
                    return;
                }
                if (key in exports && exports[key] === _remixUiCheckbox[key]) {
                    return;
                }
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function () {
                        return _remixUiCheckbox[key];
                    }
                });
            });

            /***/
        }),

        /***/ 2444:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.RemixUiCheckbox = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            __webpack_require__(2445);

            var _jsxRuntime = __webpack_require__(21);

            //eslint-disable-line
            const RemixUiCheckbox = ({
                                         id,
                                         label,
                                         onClick,
                                         inputType,
                                         name,
                                         checked,
                                         onChange,
                                         itemName,
                                         categoryId,
                                         visibility,
                                         display: _display = 'flex'
                                     }) => {
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                    className: "listenOnNetwork_2A0YE0 custom-control custom-checkbox",
                    style: {
                        display: _display,
                        alignItems: 'center',
                        visibility: visibility
                    },
                    onClick: onClick,
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                        id: id,
                        type: inputType,
                        onChange: onChange,
                        style: {
                            verticalAlign: 'bottom'
                        },
                        name: name,
                        className: "custom-control-input",
                        checked: checked
                    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                        className: "form-check-label custom-control-label",
                        id: `heading${categoryId}`,
                        style: {
                            paddingTop: '0.15rem'
                        },
                        children: [
                            name ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                                className: "font-weight-bold",
                                children: itemName
                            }) : '', label
                        ]
                    })
                    ]
                });
            };

            exports.RemixUiCheckbox = RemixUiCheckbox;
            var _default = RemixUiCheckbox;
            exports.default = _default;

            /***/
        }),

        /***/ 2445:
        /***/ (function (module, exports, __webpack_require__) {

            var content = __webpack_require__(2446);

            if (typeof content === 'string') {
                content = [[module.i, content, '']];
            }

            var options = {}

            options.insert = "head";
            options.singleton = false;

            var update = __webpack_require__(35)(content, options);

            if (content.locals) {
                module.exports = content.locals;
            }


            /***/
        }),

        /***/ 2446:
        /***/ (function (module, exports) {

            module.exports = [[module.i, "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZW1peC11aS1jaGVja2JveC5jc3MifQ== */", '', '']]

            /***/
        }),

        /***/ 2447:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = void 0;

            var _react = _interopRequireDefault(__webpack_require__(13));

            var _jsxRuntime = __webpack_require__(21);

            const ErrorRenderer = ({
                                       message,
                                       opt,
                                       editor
                                   }) => {
                const getPositionDetails = msg => {
                    const result = {}; // To handle some compiler warning without location like SPDX license warning etc

                    if (!msg.includes(':')) {
                        return {
                            errLine: -1,
                            errCol: -1,
                            errFile: msg
                        };
                    } // extract line / column

                    let position = msg.match(/^(.*?):([0-9]*?):([0-9]*?)?/);
                    result.errLine = position ? parseInt(position[2]) - 1 : -1;
                    result.errCol = position ? parseInt(position[3]) : -1; // extract file

                    position = msg.match(/^(https:.*?|http:.*?|.*?):/);
                    result.errFile = position ? position[1] : '';
                    return result;
                };

                const handlePointToErrorOnClick = async (location, fileName) => {
                    await editor.call('editor', 'discardHighlight');
                    await editor.call('editor', 'highlight', location, fileName, '', {
                        focus: true
                    });
                };

                if (!message) {
                    return;
                }
                let position = getPositionDetails(message);

                if (!position.errFile || opt.errorType && opt.errorType === position.errFile) {
                    // Updated error reported includes '-->' before file details
                    const errorDetails = message.split('-->'); // errorDetails[1] will have file details

                    if (errorDetails.length > 1) {
                        position = getPositionDetails(errorDetails[1]);
                    }
                }

                opt.errLine = position.errLine;
                opt.errCol = position.errCol;
                opt.errFile = position.errFile.trim();
                const classList = opt.type === 'error' ? 'alert alert-danger' : 'alert alert-warning';
                return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                        className: `sol ${opt.type} ${classList}`,
                        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                            className: "close",
                            "data-id": "renderer",
                            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
                                className: "fas fa-times"
                            })
                        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                            className: "d-flex flex-column",
                            onClick: () => handlePointToErrorOnClick(opt.location, opt.fileName),
                            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                className: "h6 font-weight-bold",
                                children: opt.name
                            }), opt.item.warning, opt.item.more ? /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
                                    href: opt.item.more,
                                    target: "_blank",
                                    children: "more"
                                })
                            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                                children: " "
                            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                                title: `Position in ${opt.errFile}`,
                                children: ["Pos: ", opt.locationString]
                            })
                            ]
                        })
                        ]
                    })
                });
            };

            var _default = ErrorRenderer;
            exports.default = _default;

            /***/
        }),

        /***/ 2448:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compilation = void 0;

            //eslint-disable-line
            const compilation = (analysisModule, dispatch) => {
                if (analysisModule) {
                    analysisModule.on('solidity', 'compilationFinished', (file, source, languageVersion, data) => {
                        if (languageVersion.indexOf('soljson') !== 0) {
                            return;
                        }
                        dispatch({
                            type: 'compilationFinished',
                            payload: {
                                file,
                                source,
                                languageVersion,
                                data
                            }
                        });
                    });
                }
            };

            exports.compilation = compilation;

            /***/
        }),

        /***/ 2449:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var _interopRequireDefault = __webpack_require__(24);

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.initialState = exports.analysisReducer = void 0;

            var _defineProperty2 = _interopRequireDefault(__webpack_require__(63));

            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) {
                        symbols = symbols.filter(function (sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                    }
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }

            function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i] != null ? arguments[i] : {};
                    if (i % 2) {
                        ownKeys(Object(source), true).forEach(function (key) {
                            (0, _defineProperty2.default)(target, key, source[key]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    } else {
                        ownKeys(Object(source)).forEach(function (key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                }
                return target;
            }

            const initialState = {
                file: null,
                source: null,
                languageVersion: null,
                data: null
            };
            exports.initialState = initialState;

            const analysisReducer = (state, action) => {
                switch (action.type) {
                    case 'compilationFinished':
                        return _objectSpread(_objectSpread({}, state), {}, {
                            file: action.payload.file,
                            source: action.payload.source,
                            languageVersion: action.payload.languageVersion,
                            data: action.payload.data
                        });

                    default:
                        return initialState;
                }
            };

            exports.analysisReducer = analysisReducer;

            /***/
        }),

        /***/ 2450:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                    "default": mod
                };
            };

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.CodeAnalysis = void 0;

            var solidity_analyzer_1 = __webpack_require__(2451);

            Object.defineProperty(exports, "CodeAnalysis", {
                enumerable: true,
                get: function () {
                    return __importDefault(solidity_analyzer_1).default;
                }
            });

            /***/
        }),

        /***/ 2451:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const remix_astwalker_1 = __webpack_require__(600);

            const list_1 = (0, tslib_1.__importDefault)(__webpack_require__(2452));

            class staticAnalysisRunner {
                /**
                 * Run analysis (Used by IDE)
                 * @param compilationResult contract compilation result
                 * @param toRun module indexes (compiled from remix IDE)
                 * @param callback callback
                 */
                run(compilationResult, toRun, callback) {
                    const modules = toRun.map(i => {
                        const Module = this.modules()[i];
                        const m = new Module();
                        return {
                            name: m.name,
                            mod: m
                        };
                    });
                    this.runWithModuleList(compilationResult, modules, callback);
                }

                /**
                 * Run analysis passing list of modules to run
                 * @param compilationResult contract compilation result
                 * @param modules analysis module
                 * @param callback callback
                 */


                runWithModuleList(compilationResult, modules, callback) {
                    let reports = []; // Also provide convenience analysis via the AST walker.

                    const walker = new remix_astwalker_1.AstWalker();

                    for (const k in compilationResult.sources) {
                        walker.walkFull(compilationResult.sources[k].ast, node => {
                            modules.map(item => {
                                if (item.mod.visit !== undefined) {
                                    try {
                                        item.mod.visit(node);
                                    } catch (e) {
                                        reports.push({
                                            name: item.name,
                                            report: [
                                                {
                                                    warning: 'INTERNAL ERROR in module ' + item.name + ' ' + e.message,
                                                    error: e.stack
                                                }
                                            ]
                                        });
                                    }
                                }
                            });
                            return true;
                        });
                    } // Here, modules can just collect the results from the AST walk,
                    // but also perform new analysis.


                    reports = reports.concat(modules.map(item => {
                        let report = null;

                        try {
                            report = item.mod.report(compilationResult);
                        } catch (e) {
                            report = [
                                {
                                    warning: 'INTERNAL ERROR in module ' + item.name + ' ' + e.message,
                                    error: e.stack
                                }
                            ];
                        }

                        return {
                            name: item.name,
                            report: report
                        };
                    }));
                    callback(reports);
                }

                /**
                 * Get list of all analysis modules
                 */


                modules() {
                    return list_1.default;
                }

            }

            exports.default = staticAnalysisRunner;

            /***/
        }),

        /***/ 2452:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const txOrigin_1 = (0, tslib_1.__importDefault)(__webpack_require__(2453));
            const gasCosts_1 = (0, tslib_1.__importDefault)(__webpack_require__(2454));
            const thisLocal_1 = (0, tslib_1.__importDefault)(__webpack_require__(2455));
            const checksEffectsInteraction_1 = (0, tslib_1.__importDefault)(__webpack_require__(2456));
            const constantFunctions_1 = (0, tslib_1.__importDefault)(__webpack_require__(2457));
            const similarVariableNames_1 = (0, tslib_1.__importDefault)(__webpack_require__(2458));
            const inlineAssembly_1 = (0, tslib_1.__importDefault)(__webpack_require__(2461));
            const blockTimestamp_1 = (0, tslib_1.__importDefault)(__webpack_require__(2462));
            const lowLevelCalls_1 = (0, tslib_1.__importDefault)(__webpack_require__(2463));
            const blockBlockhash_1 = (0, tslib_1.__importDefault)(__webpack_require__(2464));
            const noReturn_1 = (0, tslib_1.__importDefault)(__webpack_require__(2465));
            const selfdestruct_1 = (0, tslib_1.__importDefault)(__webpack_require__(2466));
            const guardConditions_1 = (0, tslib_1.__importDefault)(__webpack_require__(2467));
            const deleteDynamicArrays_1 = (0, tslib_1.__importDefault)(__webpack_require__(2468));
            const assignAndCompare_1 = (0, tslib_1.__importDefault)(__webpack_require__(2469));
            const erc20Decimals_1 = (0, tslib_1.__importDefault)(__webpack_require__(2470));
            const stringBytesLength_1 = (0, tslib_1.__importDefault)(__webpack_require__(2471));
            const deleteFromDynamicArray_1 = (0, tslib_1.__importDefault)(__webpack_require__(2472));
            const forLoopIteratesOverDynamicArray_1 = (0, tslib_1.__importDefault)(__webpack_require__(2473));
            const etherTransferInLoop_1 = (0, tslib_1.__importDefault)(__webpack_require__(2474));
            const intDivisionTruncate_1 = (0, tslib_1.__importDefault)(__webpack_require__(2475));
            exports.default = [txOrigin_1.default, gasCosts_1.default, thisLocal_1.default, checksEffectsInteraction_1.default, erc20Decimals_1.default, constantFunctions_1.default, similarVariableNames_1.default, inlineAssembly_1.default, blockTimestamp_1.default, lowLevelCalls_1.default, blockBlockhash_1.default, noReturn_1.default, selfdestruct_1.default, guardConditions_1.default, deleteDynamicArrays_1.default, assignAndCompare_1.default, stringBytesLength_1.default, deleteFromDynamicArray_1.default, forLoopIteratesOverDynamicArray_1.default, etherTransferInLoop_1.default, intDivisionTruncate_1.default];

            /***/
        }),

        /***/ 2453:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));
            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            class txOrigin {
                constructor() {
                    this.txOriginNodes = [];
                    this.name = 'Transaction origin: ';
                    this.description = '\'tx.origin\' used';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if ((0, staticAnalysisCommon_1.isTxOriginAccess)(node)) {
                        this.txOriginNodes.push(node);
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    const version = (0, staticAnalysisCommon_1.getCompilerVersion)(compilationResults.contracts);
                    return this.txOriginNodes.map((item, i) => {
                        return {
                            warning: `Use of tx.origin: "tx.origin" is useful only in very exceptional cases. 
                  If you use it for authentication, you usually want to replace it by "msg.sender", because otherwise any contract you call can act on your behalf.`,
                            location: item.src,
                            more: `https://solidity.readthedocs.io/en/${version}/security-considerations.html#tx-origin`
                        };
                    });
                }

            }

            exports.default = txOrigin;

            /***/
        }),

        /***/ 2454:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));
            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            class gasCosts {
                constructor() {
                    this.name = 'Gas costs: ';
                    this.description = 'Too high gas requirement of functions';
                    this.category = categories_1.default.GAS;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                    this.warningNodes = [];
                }

                visit(node) {
                    if (node.nodeType === 'FunctionDefinition' && node.kind !== 'constructor' && node.implemented || node.nodeType === 'VariableDeclaration' && (0, staticAnalysisCommon_1.isVariableTurnedIntoGetter)(node)) {
                        this.warningNodes.push(node);
                    }
                }

                report(compilationResults) {
                    const report = [];
                    const methodsWithSignature = this.warningNodes.map(node => {
                        let signature;

                        if (node.nodeType === 'FunctionDefinition') {
                            const functionName = (0, staticAnalysisCommon_1.getFunctionDefinitionName)(node);
                            signature = staticAnalysisCommon_1.helpers.buildAbiSignature(functionName, (0, staticAnalysisCommon_1.getMethodParamsSplittedTypeDesc)(node, compilationResults.contracts));
                        } else {
                            signature = node.name + '()';
                        }

                        return {
                            name: node.name,
                            src: node.src,
                            signature: signature
                        };
                    });

                    for (const method of methodsWithSignature) {
                        for (const filename in compilationResults.contracts) {
                            for (const contractName in compilationResults.contracts[filename]) {
                                const contract = compilationResults.contracts[filename][contractName];
                                const methodGas = this.checkMethodGas(contract, method.signature);

                                if (methodGas && methodGas.isInfinite) {
                                    if (methodGas.isFallback) {
                                        report.push({
                                            warning: `Fallback function of contract ${contractName} requires too much gas (${methodGas.msg}). 
                If the fallback function requires more than 2300 gas, the contract cannot receive Ether.`,
                                            location: method.src
                                        });
                                    } else {
                                        report.push({
                                            warning: `Gas requirement of function ${contractName}.${method.name} ${methodGas.msg}: 
                If the gas requirement of a function is higher than the block gas limit, it cannot be executed.
                Please avoid loops in your functions or actions that modify large areas of storage
                (this includes clearing or copying arrays in storage)`,
                                            location: method.src
                                        });
                                    }
                                } else {
                                    continue;
                                }
                            }
                        }
                    }

                    return report;
                }

                checkMethodGas(contract, methodSignature) {
                    if (contract.evm && contract.evm.gasEstimates && contract.evm.gasEstimates.external) {
                        if (methodSignature === '()') {
                            const fallback = contract.evm.gasEstimates.external[''];

                            if (fallback !== undefined && (fallback === null || parseInt(fallback) >= 2100 || fallback === 'infinite')) {
                                return {
                                    isInfinite: true,
                                    isFallback: true,
                                    msg: fallback
                                };
                            }
                        } else {
                            const gas = contract.evm.gasEstimates.external[methodSignature];
                            const gasString = gas === null ? 'unknown or not constant' : 'is ' + gas;

                            if (gas === null || parseInt(gas) >= 3000000 || gas === 'infinite') {
                                return {
                                    isInfinite: true,
                                    isFallback: false,
                                    msg: gasString
                                };
                            }
                        }
                    }
                }

            }

            exports.default = gasCosts;

            /***/
        }),

        /***/ 2455:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            class thisLocal {
                constructor() {
                    this.warningNodes = [];
                    this.name = 'This on local calls: ';
                    this.description = 'Invocation of local functions via \'this\'';
                    this.category = categories_1.default.GAS;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if (node.nodeType === 'MemberAccess' && (0, staticAnalysisCommon_1.isThisLocalCall)(node)) {
                        this.warningNodes.push(node);
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    const version = (0, staticAnalysisCommon_1.getCompilerVersion)(compilationResults.contracts);
                    return this.warningNodes.map(function (item, i) {
                        return {
                            warning: 'Use of "this" for local functions: Never use "this" to call functions in the same contract, it only consumes more gas than normal local calls.',
                            location: item.src,
                            more: `https://solidity.readthedocs.io/en/${version}/control-structures.html#external-function-calls`
                        };
                    });
                }

            }

            exports.default = thisLocal;

            /***/
        }),

        /***/ 2456:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            const functionCallGraph_1 = __webpack_require__(1162);

            const abstractAstView_1 = (0, tslib_1.__importDefault)(__webpack_require__(627));

            class checksEffectsInteraction {
                constructor() {
                    this.name = 'Check-effects-interaction: ';
                    this.description = 'Potential reentrancy bugs';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.HEURISTIC;
                    this.version = {
                        start: '0.4.12'
                    };
                    this.abstractAst = new abstractAstView_1.default();
                    this.visit = this.abstractAst.build_visit(node => node.nodeType === 'FunctionCall' && ((0, staticAnalysisCommon_1.isInteraction)(node) || (0, staticAnalysisCommon_1.isLocalCallGraphRelevantNode)(node)) || (node.nodeType === 'Assignment' || node.nodeType === 'UnaryOperation' || node.nodeType === 'InlineAssembly') && (0, staticAnalysisCommon_1.isEffect)(node));
                    this.report = this.abstractAst.build_report(this._report.bind(this));
                }

                _report(contracts, multipleContractsWithSameName, version) {
                    const warnings = [];
                    const hasModifiers = contracts.some(item => item.modifiers.length > 0);
                    const callGraph = (0, functionCallGraph_1.buildGlobalFuncCallGraph)(contracts);
                    contracts.forEach(contract => {
                        contract.functions.forEach(func => {
                            func['changesState'] = this.checkIfChangesState((0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, func.node, func.parameters), this.getContext(callGraph, contract, func));
                        });
                        contract.functions.forEach(func => {
                            if (this.isPotentialVulnerableFunction(func, this.getContext(callGraph, contract, func))) {
                                const funcName = (0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, func.node, func.parameters);
                                let comments = hasModifiers ? 'Note: Modifiers are currently not considered by this static analysis.' : '';
                                comments += multipleContractsWithSameName ? 'Note: Import aliases are currently not supported by this static analysis.' : '';
                                warnings.push({
                                    warning: `Potential violation of Checks-Effects-Interaction pattern in ${funcName}: Could potentially lead to re-entrancy vulnerability. ${comments}`,
                                    location: func.node.src,
                                    more: `https://solidity.readthedocs.io/en/${version}/security-considerations.html#re-entrancy`
                                });
                            }
                        });
                    });
                    return warnings;
                }

                getContext(callGraph, currentContract, func) {
                    return {
                        callGraph: callGraph,
                        currentContract: currentContract,
                        stateVariables: this.getStateVariables(currentContract, func)
                    };
                }

                getStateVariables(contract, func) {
                    return contract.stateVariables.concat(func.localVariables.filter(staticAnalysisCommon_1.isStorageVariableDeclaration));
                }

                isPotentialVulnerableFunction(func, context) {
                    let isPotentialVulnerable = false;
                    let interaction = false;
                    func.relevantNodes.forEach(node => {
                        if ((0, staticAnalysisCommon_1.isInteraction)(node)) {
                            interaction = true;
                        } else if (interaction && ((0, staticAnalysisCommon_1.isWriteOnStateVariable)(node, context.stateVariables) || this.isLocalCallWithStateChange(node, context))) {
                            isPotentialVulnerable = true;
                        }
                    });
                    return isPotentialVulnerable;
                }

                isLocalCallWithStateChange(node, context) {
                    if ((0, staticAnalysisCommon_1.isLocalCallGraphRelevantNode)(node)) {
                        const func = (0, functionCallGraph_1.resolveCallGraphSymbol)(context.callGraph, (0, staticAnalysisCommon_1.getFullQualifiedFunctionCallIdent)(context.currentContract.node, node));
                        return !func || func && func.node['changesState'];
                    }

                    return false;
                }

                checkIfChangesState(startFuncName, context) {
                    return (0, functionCallGraph_1.analyseCallGraph)(context.callGraph, startFuncName, context, (node, context) => (0, staticAnalysisCommon_1.isWriteOnStateVariable)(node, context.stateVariables));
                }

            }

            exports.default = checksEffectsInteraction;

            /***/
        }),

        /***/ 2457:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            const functionCallGraph_1 = __webpack_require__(1162);

            const abstractAstView_1 = (0, tslib_1.__importDefault)(__webpack_require__(627));

            class constantFunctions {
                constructor() {
                    this.name = 'Constant/View/Pure functions: ';
                    this.description = 'Potentially constant/view/pure functions';
                    this.category = categories_1.default.MISC;
                    this.algorithm = algorithmCategories_1.default.HEURISTIC;
                    this.version = {
                        start: '0.4.12'
                    };
                    this.abstractAst = new abstractAstView_1.default();
                    this.visit = this.abstractAst.build_visit(node => (0, staticAnalysisCommon_1.isLowLevelCall)(node) || (0, staticAnalysisCommon_1.isTransfer)(node) || (0, staticAnalysisCommon_1.isExternalDirectCall)(node) || (0, staticAnalysisCommon_1.isEffect)(node) || (0, staticAnalysisCommon_1.isLocalCallGraphRelevantNode)(node) || node.nodeType === 'InlineAssembly' || node.nodeType === 'NewExpression' || (0, staticAnalysisCommon_1.isSelfdestructCall)(node) || (0, staticAnalysisCommon_1.isDeleteUnaryOperation)(node));
                    this.report = this.abstractAst.build_report(this._report.bind(this));
                }

                _report(contracts, multipleContractsWithSameName, version) {
                    const warnings = [];
                    const hasModifiers = contracts.some(item => item.modifiers.length > 0);
                    const callGraph = (0, functionCallGraph_1.buildGlobalFuncCallGraph)(contracts);
                    contracts.forEach(contract => {
                        contract.functions.forEach(func => {
                            if ((0, staticAnalysisCommon_1.isPayableFunction)(func.node) || (0, staticAnalysisCommon_1.isConstructor)(func.node)) {
                                func['potentiallyshouldBeConst'] = false;
                            } else {
                                func['potentiallyshouldBeConst'] = this.checkIfShouldBeConstant((0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, func.node, func.parameters), this.getContext(callGraph, contract, func));
                            }
                        });
                        contract.functions.filter(func => (0, staticAnalysisCommon_1.hasFunctionBody)(func.node)).forEach(func => {
                            if ((0, staticAnalysisCommon_1.isConstantFunction)(func.node) !== func['potentiallyshouldBeConst']) {
                                const funcName = (0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, func.node, func.parameters);
                                let comments = hasModifiers ? 'Note: Modifiers are currently not considered by this static analysis.' : '';
                                comments += multipleContractsWithSameName ? 'Note: Import aliases are currently not supported by this static analysis.' : '';

                                if (func['potentiallyshouldBeConst']) {
                                    warnings.push({
                                        warning: `${funcName} : Potentially should be constant/view/pure but is not. ${comments}`,
                                        location: func.node.src,
                                        more: `https://solidity.readthedocs.io/en/${version}/contracts.html#view-functions`
                                    });
                                } else {
                                    warnings.push({
                                        warning: `${funcName} : Is constant but potentially should not be. ${comments}`,
                                        location: func.node.src,
                                        more: `https://solidity.readthedocs.io/en/${version}/contracts.html#view-functions`
                                    });
                                }
                            }
                        });
                    });
                    return warnings;
                }

                getContext(callGraph, currentContract, func) {
                    return {
                        callGraph: callGraph,
                        currentContract: currentContract,
                        stateVariables: this.getStateVariables(currentContract, func)
                    };
                }

                getStateVariables(contract, func) {
                    return contract.stateVariables.concat(func.localVariables.filter(staticAnalysisCommon_1.isStorageVariableDeclaration));
                }

                checkIfShouldBeConstant(startFuncName, context) {
                    return !(0, functionCallGraph_1.analyseCallGraph)(context.callGraph, startFuncName, context, this.isConstBreaker.bind(this));
                }

                isConstBreaker(node, context) {
                    return (0, staticAnalysisCommon_1.isWriteOnStateVariable)(node, context.stateVariables) || (0, staticAnalysisCommon_1.isLowLevelCall)(node) || (0, staticAnalysisCommon_1.isTransfer)(node) || this.isCallOnNonConstExternalInterfaceFunction(node, context) || (0, staticAnalysisCommon_1.isCallToNonConstLocalFunction)(node) || node.nodeType === 'InlineAssembly' || node.nodeType === 'NewExpression' || (0, staticAnalysisCommon_1.isSelfdestructCall)(node) || (0, staticAnalysisCommon_1.isDeleteUnaryOperation)(node);
                }

                isCallOnNonConstExternalInterfaceFunction(node, context) {
                    if ((0, staticAnalysisCommon_1.isExternalDirectCall)(node)) {
                        const func = (0, functionCallGraph_1.resolveCallGraphSymbol)(context.callGraph, (0, staticAnalysisCommon_1.getFullQualifiedFunctionCallIdent)(context.currentContract.node, node));
                        return !func || func && !(0, staticAnalysisCommon_1.isConstantFunction)(func.node.node);
                    }

                    return false;
                }

            }

            exports.default = constantFunctions;

            /***/
        }),

        /***/ 2458:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));
            const abstractAstView_1 = (0, tslib_1.__importDefault)(__webpack_require__(627));

            const fast_levenshtein_1 = __webpack_require__(2459);

            const remix_lib_1 = __webpack_require__(508);

            const remix_astwalker_1 = __webpack_require__(600);

            class similarVariableNames {
                constructor() {
                    this.name = 'Similar variable names: ';
                    this.description = 'Variable names are too similar';
                    this.category = categories_1.default.MISC;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                    this.abstractAst = new abstractAstView_1.default(); // eslint-disable-next-line @typescript-eslint/no-unused-vars

                    this.visit = this.abstractAst.build_visit(node => false);
                    this.report = this.abstractAst.build_report(this._report.bind(this));
                }

                _report(contracts, multipleContractsWithSameName, version) {
                    const warnings = [];
                    const hasModifiers = contracts.some(item => item.modifiers.length > 0);
                    contracts.forEach(contract => {
                        contract.functions.forEach(func => {
                            const funcName = (0, staticAnalysisCommon_1.getFullQuallyfiedFuncDefinitionIdent)(contract.node, func.node, func.parameters);
                            let hasModifiersComments = '';

                            if (hasModifiers) {
                                hasModifiersComments = 'Note: Modifiers are currently not considered by this static analysis.';
                            }

                            let multipleContractsWithSameNameComments = '';

                            if (multipleContractsWithSameName) {
                                multipleContractsWithSameNameComments = 'Note: Import aliases are currently not supported by this static analysis.';
                            }

                            const vars = this.getFunctionVariables(contract, func).map(staticAnalysisCommon_1.getDeclaredVariableName);
                            this.findSimilarVarNames(vars).map(sim => {
                                // check if function is implemented
                                if (func.node.implemented) {
                                    const astWalker = new remix_astwalker_1.AstWalker();
                                    const functionBody = func.node.body; // Walk through all statements of function

                                    astWalker.walk(functionBody, node => {
                                        // check if these is an identifier node which is one of the tracked similar variables
                                        if ((node.nodeType === 'Identifier' || node.nodeType === 'VariableDeclaration') && (node.name === sim.var1 || node.name === sim.var2)) {
                                            warnings.push({
                                                warning: `${funcName} : Variables have very similar names "${sim.var1}" and "${sim.var2}". ${hasModifiersComments} ${multipleContractsWithSameNameComments}`,
                                                location: node.src
                                            });
                                        }

                                        return true;
                                    });
                                }
                            });
                        });
                    });
                    return warnings;
                }

                findSimilarVarNames(vars) {
                    const similar = [];
                    const comb = {};
                    vars.map(varName1 => vars.map(varName2 => {
                        if (varName1.length > 1 && varName2.length > 1 && varName2 !== varName1 && !this.isCommonPrefixedVersion(varName1, varName2) && !this.isCommonNrSuffixVersion(varName1, varName2) && !(comb[varName1 + ';' + varName2] || comb[varName2 + ';' + varName1])) {
                            comb[varName1 + ';' + varName2] = true;
                            const distance = (0, fast_levenshtein_1.get)(varName1, varName2);
                            if (distance <= 2) {
                                similar.push({
                                    var1: varName1,
                                    var2: varName2,
                                    distance: distance
                                });
                            }
                        }
                    }));
                    return similar;
                }

                isCommonPrefixedVersion(varName1, varName2) {
                    return varName1.startsWith('_') && varName1.slice(1) === varName2 || varName2.startsWith('_') && varName2.slice(1) === varName1;
                }

                isCommonNrSuffixVersion(varName1, varName2) {
                    const ref = '^' + remix_lib_1.util.escapeRegExp(varName1.slice(0, -1)) + '[0-9]*$';
                    return varName2.match(ref) != null;
                }

                getFunctionVariables(contract, func) {
                    return contract.stateVariables.concat(func.localVariables);
                }

            }

            exports.default = similarVariableNames;

            /***/
        }),

        /***/ 2461:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));
            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            class inlineAssembly {
                constructor() {
                    this.inlineAssNodes = [];
                    this.name = 'Inline assembly: ';
                    this.description = 'Inline assembly used';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if (node.nodeType === 'InlineAssembly') {
                        this.inlineAssNodes.push(node);
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    const version = (0, staticAnalysisCommon_1.getCompilerVersion)(compilationResults.contracts);
                    return this.inlineAssNodes.map(node => {
                        return {
                            warning: `The Contract uses inline assembly, this is only advised in rare cases. 
                  Additionally static analysis modules do not parse inline Assembly, this can lead to wrong analysis results.`,
                            location: node.src,
                            more: `https://solidity.readthedocs.io/en/${version}/assembly.html`
                        };
                    });
                }

            }

            exports.default = inlineAssembly;

            /***/
        }),

        /***/ 2462:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            class blockTimestamp {
                constructor() {
                    this.warningNowNodes = [];
                    this.warningblockTimestampNodes = [];
                    this.name = 'Block timestamp: ';
                    this.description = 'Can be influenced by miners';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if (node.nodeType === 'Identifier' && (0, staticAnalysisCommon_1.isNowAccess)(node)) {
                        this.warningNowNodes.push(node);
                    } else if (node.nodeType === 'MemberAccess' && (0, staticAnalysisCommon_1.isBlockTimestampAccess)(node)) {
                        this.warningblockTimestampNodes.push(node);
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    const version = (0, staticAnalysisCommon_1.getCompilerVersion)(compilationResults.contracts);
                    return this.warningNowNodes.map((item, i) => {
                        return {
                            warning: `Use of "now": "now" does not mean current time. "now" is an alias for "block.timestamp". 
                  "block.timestamp" can be influenced by miners to a certain degree, be careful.`,
                            location: item.src,
                            more: `https://solidity.readthedocs.io/en/${version}/units-and-global-variables.html?highlight=block.timestamp#block-and-transaction-properties`
                        };
                    }).concat(this.warningblockTimestampNodes.map(item => {
                        return {
                            warning: `Use of "block.timestamp": "block.timestamp" can be influenced by miners to a certain degree. 
                  That means that a miner can "choose" the block.timestamp, to a certain degree, to change the outcome of a transaction in the mined block.`,
                            location: item.src,
                            more: `https://solidity.readthedocs.io/en/${version}/units-and-global-variables.html?highlight=block.timestamp#block-and-transaction-properties`
                        };
                    }));
                }

            }

            exports.default = blockTimestamp;

            /***/
        }),

        /***/ 2463:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            class lowLevelCalls {
                constructor() {
                    this.llcNodes = [];
                    this.name = 'Low level calls: ';
                    this.description = 'Should only be used by experienced devs';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if ((0, staticAnalysisCommon_1.isLLCall)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.CALL
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLDelegatecall)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.DELEGATECALL
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLSend)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.SEND
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLDelegatecall04)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.DELEGATECALL
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLSend04)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.SEND
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLCall04)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.CALL
                        });
                    } else if ((0, staticAnalysisCommon_1.isLLCallcode)(node)) {
                        this.llcNodes.push({
                            node: node,
                            type: staticAnalysisCommon_1.lowLevelCallTypes.CALLCODE
                        });
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    const version = (0, staticAnalysisCommon_1.getCompilerVersion)(compilationResults.contracts);
                    return this.llcNodes.map((item, i) => {
                        let text = '';
                        let morehref = '';

                        switch (item.type) {
                            case staticAnalysisCommon_1.lowLevelCallTypes.CALL:
                                text = `Use of "call": should be avoided whenever possible. 
                  It can lead to unexpected behavior if return value is not handled properly. 
                  Please use Direct Calls via specifying the called contract's interface.`;
                                morehref = `https://solidity.readthedocs.io/en/${version}/control-structures.html?#external-function-calls`;
                                break;

                            case staticAnalysisCommon_1.lowLevelCallTypes.CALLCODE:
                                text = `Use of "callcode": should be avoided whenever possible. 
                  External code, that is called can change the state of the calling contract and send ether from the caller's balance. 
                  If this is wanted behaviour, use the Solidity library feature if possible.`;
                                morehref = `https://solidity.readthedocs.io/en/${version}/contracts.html#libraries`;
                                break;

                            case staticAnalysisCommon_1.lowLevelCallTypes.DELEGATECALL:
                                text = `Use of "delegatecall": should be avoided whenever possible. 
                  External code, that is called can change the state of the calling contract and send ether from the caller's balance. 
                  If this is wanted behaviour, use the Solidity library feature if possible.`;
                                morehref = `https://solidity.readthedocs.io/en/${version}/contracts.html#libraries`;
                                break;

                            case staticAnalysisCommon_1.lowLevelCallTypes.SEND:
                                text = `Use of "send": "send" does not throw an exception when not successful, make sure you deal with the failure case accordingly. 
                  Use "transfer" whenever failure of the ether transfer should rollback the whole transaction. 
                  Note: if you "send/transfer" ether to a contract the fallback function is called, the callees fallback function is very limited due to the limited amount of gas provided by "send/transfer". 
                  No state changes are possible but the callee can log the event or revert the transfer. "send/transfer" is syntactic sugar for a "call" to the fallback function with 2300 gas and a specified ether value.`;
                                morehref = `https://solidity.readthedocs.io/en/${version}/security-considerations.html#sending-and-receiving-ether`;
                                break;
                        }

                        return {
                            warning: text,
                            more: morehref,
                            location: item.node.src
                        };
                    });
                }

            }

            exports.default = lowLevelCalls;

            /***/
        }),

        /***/ 2464:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));

            class blockBlockhash {
                constructor() {
                    this.warningNodes = [];
                    this.name = 'Block hash: ';
                    this.description = 'Can be influenced by miners';
                    this.category = categories_1.default.SECURITY;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                }

                visit(node) {
                    if (node.nodeType === 'FunctionCall' && (0, staticAnalysisCommon_1.isBlockBlockHashAccess)(node)) {
                        this.warningNodes.push(node);
                    }
                } // eslint-disable-next-line @typescript-eslint/no-unused-vars


                report(compilationResults) {
                    return this.warningNodes.map(item => {
                        return {
                            warning: `Use of "blockhash": "blockhash(uint blockNumber)" is used to access the last 256 block hashes. 
                  A miner computes the block hash by "summing up" the information in the current block mined. 
                  By "summing up" the information cleverly, a miner can try to influence the outcome of a transaction in the current block. 
                  This is especially easy if there are only a small number of equally likely outcomes.`,
                            location: item.src
                        };
                    });
                }

            }

            exports.default = blockBlockhash;

            /***/
        }),

        /***/ 2465:
        /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            const tslib_1 = __webpack_require__(494);

            const categories_1 = (0, tslib_1.__importDefault)(__webpack_require__(517));

            const staticAnalysisCommon_1 = __webpack_require__(513);

            const algorithmCategories_1 = (0, tslib_1.__importDefault)(__webpack_require__(518));
            const abstractAstView_1 = (0, tslib_1.__importDefault)(__webpack_require__(627));

            class noReturn {
                constructor() {
                    this.name = 'No return: ';
                    this.description = 'Function with \'returns\' not returning';
                    this.category = categories_1.default.MISC;
                    this.algorithm = algorithmCategories_1.default.EXACT;
                    this.version = {
                        start: '0.4.12'
                    };
                    this.abstractAst = new abstractAstView_1.default();
                    this.visit = this.abstractAst.build_visit(node => node.nodeType === 'Return' || node.nodeType === 'Assignment');
                    this.report = this.abstractAst.build_report(this._report.bind(this));
                }

                _report(contracts, multipleContractsWithSameName, version) {
        
